Set dicTestCaseStatus  = CreateObject("Scripting.Dictionary")
Set dicMethod = CreateObject("Scripting.Dictionary")
Environment("TestStepCount")  = 0
Environment("ReportStepCount")  = 0 
intWait = 35000
'Environment.Value("intWait") = 10000

''##########################################################################################################################
''@Function:			VerifyCaptureBitmap
''@Description:			Tests the functionality of CaptureBitmap method for the passed in object
''@Return Type:			Boolean
''@Created By:			Naveen
''@Created On:			8-Aug-2012
''@Modified  by :  		Shweta
''@Modified  On : 		28-May-2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	Object for which the CaptureBitmap method needs to be tested/executed
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  strOption  
''@Param Type:   String
''@Param Drtn: 		In
''@Param Desc: 	Options for CaptureBitMap method i.e For capturing .png image case will be "png" , for .bmp image case will be "bmp" , for  overriding  .png file case will be "override_png "
'for overriding .bmp file case will be "override_bmp"
''--------------------------------------------------------------------------------------------------------------------------
''@Example: Set objTestObject = MobiDevice("Device").MobiButton("Button_Cancel")
''					  blnResult = VerifyCaptureBitmap(objTestObject , "png")
					 'blnResult = VerifyCaptureBitmap(objTestObject , "bmp")
					 'blnResult = VerifyCaptureBitmap(objTestObject , "override_png")
					 'blnResult = VerifyCaptureBitmap(objTestObject , "override_bmp")
''--------------------------------------------------------------------------------------------------------------------------   

Function VerifyCaptureBitmap(objTestObject , strOption)   
	On Error Resume Next
	Reporter.Filter = rfEnableAll
	Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", "" 
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")

	'Generate a unique file name
	strFileName = Replace(Replace(Replace(CStr(Now), "/", ""), " ", "_"), ":", "")
	
	'Generate the path to save the file. Path should be System's Temp directory
	strImagePath = Environment("SystemTempDir") & "\TrustTestResult\ErrorScreenShots\" & strFileName 
	
	'Delete any file in Temp that has the same name as strFileName
	Set objFSO = CreateObject("Scripting.FileSystemObject")
	
	If objFSO.FileExists(strImagePath) Then
		objFSO.DeleteFile strImagePath, True
	End If

	'Assign  message in case of  overriding an existing file
	strOverrideMessage = "Cannot create a file when that file already exists."
	'Set default return value
	VerifyCaptureBitmap = False
	
	Select Case LCase(strOption)

		Case "png"
			strImagePath = strImagePath & ".png"
			MobiDevice("micclass:=MobiDevice").Activate
			objTestObject.CaptureBitmap  strImagePath 
			Environment("Pass") = "CaptureBitMap successfully captured screenshot in .png format"
			Environment("Fail") =  "CaptureBitMap failed to  capture screenshot in .png format"

		Case "bmp"
			strImagePath = strImagePath & ".bmp"
			MobiDevice("micclass:=MobiDevice").Activate
			objTestObject.CaptureBitmap  strImagePath 
			Environment("Pass")  = "CaptureBitMap successfully captured screenshot in .bmp format"
			Environment("Fail") =  "CaptureBitMap failed to capture screenshot  in .bmp format"

		Case "override_bmp" 
			strImagePath = strImagePath & ".bmp"
			Reporter.Filter  = rfDisableAll
			Err.Clear
			objTestObject.CaptureBitmap  strImagePath &".bmp" 
			objTestObject.CaptureBitmap  strImagePath &".bmp" , False
			Reporter.Filter = rfEnableAll
			Environment("Pass") = "Error thrown " &Space(2)&chr(34) &strOverrideMessage &chr(34)
			Environment("Fail")  = "Error thrown as "&Space(2) &Err.Description &Space(2) &"Expected error was -> "& strOverrideMessage

		Case "override_png" 
			strImagePath = strImagePath & ".png"
			Reporter.Filter  = rfDisableAll
			Err.Clear
			objTestObject.CaptureBitmap  strImagePath &".png" 
			objTestObject.CaptureBitmap  strImagePath &".png" , False
			Reporter.Filter = rfEnableAll
			Environment("Pass") = "Error thrown " &Space(2)&chr(34) &strOverrideMessage &chr(34)
			Environment("Fail")  = "Error thrown as "&Space(2) &Err.Description &Space(2) &"Expected error was -> "& strOverrideMessage

	End Select
	
	If  LCase(strOption) = "png"  OR LCase(strOption) = "bmp" Then
			If objFSO.FileExists(strImagePath)  AND Err.Description = "" Then		
				VerifyCaptureBitmap = True
			End If
	Else		
			If  Instr(1 , Replace(LCase(Err.Description) , " " , "") ,  Replace(LCase(strOverrideMessage) , " " , "") ) > 0  Then
				VerifyCaptureBitmap = True
				Err.Clear
			End If
	End If 

	If  VerifyCaptureBitmap AND Err.Description = "" Then
		ReportStep "CaptureBitMap" , Environment("Description") , Environment("ExpectedResult") , Environment("Pass")  , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass")
	Else
		ReportStep  "CaptureBitMap" ,  Environment("Description") , Environment("ExpectedResult") , Environment("Fail") &Space(2)& Err.Description , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") &Space(2)& Err.Description 
	End If

	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "CaptureBitMap" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
	On Error GoTo 0
End Function


''##########################################################################################################################
''@Function:        VerifyGetToProperty
''@Description: 	Verify GetToProperty method .
''@Return Type:		Boolean
''@Created By:  	Shweta
''@Created On:   	28-May-2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	Objectname
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  arrTOProperties 
''@Param Type:   Array
''@Param Drtn: 		In
''@Param Desc: Array containing all identification properties
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  arrTOPropertyValues 
''@Param Type:   Array
''@Param Drtn: 		In
''@Param Desc:  Array containing  identification properties value
''--------------------------------------------------------------------------------------------------------------------------
''@Example: arrTOProperties = Array("micclass" , "text" , "id" , "visible")
''arrTOPropertyValues =  Array("MobiButton" , "Sign In " , "10234" , "True")
''Set objTestObject = Mobidevice("Device").MobiPage("Brightness").MobiSlider("Slider_Bright") 
'blnFlag = VerifyGetToProperty objTestObject , arrTOProperties , arrTOPropertyValues )

''--------------------------------------------------------------------------------------------------------------------------

Function VerifyGetToProperty(objTestObject,arrTOProperties , arrTOPropertyValues)
	On Error Resume Next
	Reporter.Filter = rfEnableAll
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
    	strNotMapped  = ""
	'Setting default  return value
	VerifyGetToProperty = False  		

	For intArrIndex = 0 To UBound(arrTOProperties)
			strPropertyValue = objTestObject.GetTOProperty(arrTOProperties(intArrIndex))
			If Not (LCase(strPropertyValue) = LCase(arrTOPropertyValues(intArrIndex)))Then
				 strNotMapped = strNotMapped & arrTOProperties(intArrIndex) & "- > " & "Property Value: '" & strPropertyValue & "'" & VBNewLine				
			End If
	Next

	If  strNotMapped = ""  AND Len(Err.Description) = 0 Then
		VerifyGetToProperty = True
		ReportStep  "GetTOProperty" , Environment("Description") , Environment("ExpectedResult") , "Correct values returned for -" & Join(arrTOProperties) , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), "Correct values returned for -" & Join(arrTOProperties)
	Else
		ReportStep   "GetTOProperty" , Environment("Description") , Environment("ExpectedResult")  ,"Failed to map following properties ->"&strNotMapped &Space(2) & Err.Description , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), "Failed to map following properties ->"&strNotMapped &Space(2) & Err.Description 
	End If
	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll

    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "GetTOProperty" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End function

''##########################################################################################################################
''@Function:			    VerifyGetROProperty
''@Description:			Tests the functionality of GetROProperty method for the passed in object
''@Return Type:			NA
''@Created By:			Amit
''@Created On:			22Aug-2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	Object for which the GetROProperty  method needs to be tested
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  arrProperty 
''@Param Type:   Array
''@Param Drtn: 		In
''@Param Desc: 	Array of object property
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  arrPropertyValue 
''@Param Type:   Array
''@Param Drtn: 		In
''@Param Desc: 	Array of object property value
''--------------------------------------------------------------------------------------------------------------------------
''@Example: Set objTestObject = MobiDevice("Device").MobiPage("NewMessages").MobiButton("Button_Cancel")
''@			arrProperty = Array("class","text","html tag")
''@			arrPropertyValue = Array("Object","sampletext","A")
''					      VerifyGetROProperty(objTestObject,arrProperty,arrPropertyValue)
''--------------------------------------------------------------------------------------------------------------------------

Function VerifyGetROProperty(objTestObject, arrProperty, arrPropertyValue)

	strPropertyNotExist = ""
	Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	'@verify all properties with their values
	For i=0 to Ubound(arrProperty)
		If Lcase(objTestObject.GetROProperty(arrProperty(i))) <> Lcase(arrPropertyValue(i)) Then
			strPropertyNotExist = strPropertyNotExist & arrProperty(i) & ", "
		End If
	Next

	If strPropertyNotExist = "" AND Err.Description = "" Then
		VerifyGetROProperty = True
		ReportStep "GetROProperty" , Environment("Description"), Environment("ExpectedResult"), "Following properties :- " & join(arrProperty, ", ") & " matched with their property values :- " & join(arrPropertyValue, ", ") , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), "Following properties :- " & join(arrProperty, ", ") & " matched with their property values :- " & join(arrPropertyValue, ", ")
	Else
		VerifyGetROProperty = False
		ReportStep "GetROProperty" , Environment("Description"), Environment("ExpectedResult"), "Following properties :- " & strPropertyNotExist & " are not matched with their property values. " , "Fail"
		Reporter.ReportEvent  micFail, Environment("Description"), "Following properties :- " & strPropertyNotExist & " are not matched with their property values. "  & Err.Description
	End If

    	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "GetROProperty" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If

	Err.Clear
	On Error GoTo 0
End Function

''##########################################################################################################################
''@Function:		VerifyDblClick
''@Description:		Verify Double Click functionality on "MobiElement", "MobiEdit", "MobiDevice"  and  "MobiImage"
''@Return Type:		Boolean
''@Created By :     Shweta
''@Created  On:   	12th Feb 2013
''@Modified By :    Shweta
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	objTestObject 
''@Param Type:   	Object
''@Param Drtn: 		In
''@Param Desc: 		Object 
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	strCoordsOption 
''@Param Type:   	String
''@Param Drtn: 		In
''@Param Desc:  	Option for DblClick eg "withcoordinates" , "withoutcoordinates" , "withrandomvalues" , "withzerovalues" etc
''--------------------------------------------------------------------------------------------------------------------------
''@Example: 	Set objTestObject = MobiDevice("Device").MobiElement("Element")
''							blnResult =  VerifyDblClick(objTestObject, ,"withzercoords")
''---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Function VerifyDblClick(objTestObject , strCoordsOption)

   	On Error Resume Next
    Reporter.Filter = rfEnableAll
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	VerifyDblClick = False

	If Window("regexpwndtitle:=deviceViewer").Exist(2) Then
		Window("regexpwndtitle:=deviceViewer").Activate
	End If

Select Case LCase(strCoordsOption)

			Case "withoutcoords"
		
			Case "withboundarycoords"
				intX = objTestObject.GetROProperty("width")-10
				intY = objTestObject.GetROProperty("height")-10
	
			Case "withrandomcoords"	
				intX = CInt(Int(objTestObject.GetROProperty("width"))*Rnd)
				intY = CInt(Int(objTestObject.GetROProperty("height"))*Rnd)
						
			Case "withzercoords"
				intX = 1
				intY = 1		

			Case "withnegativecoords"
				Err.Clear
				intX = -40
				intY = -40			
				strErrorMessage = "The statement contains one or more invalid function arguments"	
				Reporter.Filter = rfDisableAll
			Case "withonlyxcoord"
				intX = CInt(objTestObject.GetROProperty("width") / 2)

			Case "withonlyycoord"
				intY = CInt(objTestObject.GetROProperty("height") /2)

			Case  "withvalidvalues"
				intX = CInt(objTestObject.GetROProperty("width") / 2)
				intY = CInt(objTestObject.GetROProperty("height") / 2)

End Select

If  Not LCase(strCoordsOption)  =  "validlapsenegativecoords"   Then	
				If  NOT LCase(Environment("MobiObjectClass") ) = "mobiedit"  Then
					strHeaderBeforeClick = FetchHeaderElement		
					wait  2		
				Else
				strImagePathBefore = Environment("SystemTempDir") & "\" & Replace(Replace(Replace(CStr(Now), "/", ""), " ", "_"), ":", "")   &".bmp"	
				MobiDevice("micclass:=MobiDevice").Activate
				'objTestObject.CaptureBitmap  strImagePathBefore , True
				MobiDevice("micclass:=MobiDevice").CaptureBitmap  strImagePathBefore , True
				wait 1
				End If
End If

	If LCase(strCoordsOption) = "withonlyxcoord" Then
		objTestObject.DblClick intX
		Wait 3
		Environment("Pass")   =   "DblClick  with  X :"& intX & Space(2) & "blank  Y working correctly"
		Environment("Fail")    =    "DblClick  with  X :"& intX & Space(2) & "blank  Y working correctly not  working correctly"

	ElseIf  LCase(strCoordsOption) = "withonlyycoord" Then
		objTestObject.DblClick  , intY
		Wait 3
		Environment("Pass")   =   "DblClick  with blank  X  and Y :"& intY &Space(2) & "working correctly"
		Environment("Fail")    =   "DblClick  with  blank X  and Y :"& intY &Space(2) & "not working"

	ElseIf   LCase(strCoordsOption) = "withoutcoords" Then
		objTestObject.DblClick
		Wait 3
		Environment("Pass") = "DblClick without co-ordinates is working correctly"
		Environment("Fail") = "DblClick without co-ordinates is not working correctly"

	Else
		objTestObject.Dblclick intX , intY
		Wait 3
		Environment("Pass")   =   "DblClick  with  X :" & intX &Space(2) &"Y :"&intY &Space(2) &"is working correctly "
		Environment("Fail")    =    "DblClick  with  X :" & intX &Space(2) &"Y :"&intY &Space(2) &"is not working correctly "	

		'Enable reporting if  disabled
		If  Reporter.Filter = rfDisableAll Then
			Reporter.Filter  = rfEnableAll
		End If

	End If

	'Hit Enter to close the image on MobiEdit
	'If  LCase(Environment("MobiObjectClass")) = "mobiedit" Then
			'Window("regexpwndtitle:=deviceViewer").Type micReturn
	'End If
	
	'Verify in case of negative co-ordinates or invalid lapse time
	If LCase(strCoordsOption) = "withnegativecoords"  Then
		If  Instr(1 , LCase(Replace(Err.Description , " " , "")) , LCase(Replace(strErrorMessage , " " , ""))) > 0 Then
			VerifyDblClick  = True
			ReportStep  "DblClick" , Environment("Description") , Environment("ExpectedResult") ,	"Thrown error :"&Err.Description  , "Pass"
			Reporter.ReportEvent micPass, Environment("Description"),"Thrown error :"&Err.Description 
			Exit Function
		Else
			ReportStep   "DblClick" , Environment("Description") , Environment("ExpectedResult") ,	"Thrown error :"&Err.Description &" "&"Expected Error was :"& strErrorMessage , "Fail"
			Reporter.ReportEvent micFail, Environment("Description"), "Thrown error :"&Err.Description &" "&"Expected Error was :"& strErrorMessage
			Exit Function
		End If
'	ElseIf blnFlag Then
'		'Verify in case of  all  valid  values  
'		If  VerifyScreenChange AND Len(Err.Description) = 0  Then
'			VerifyLongClick = True
'			ReportStep "LongClick" , Environment("Description") , Environment("ExpectedResult") ,Environment("Pass") , "Pass"
'			Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass") 
'		Else
'			ReportStep "LongClick" , Environment("Description") , Environment("ExpectedResult") ,Environment("Fail") , "Fail"
'			Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") & " " &Err.Description
'		End If
'
	
	ElseIf   LCase(Environment("MobiObjectClass") ) = "mobiedit"   Then

		wait 1
	    strImagePathAfter = Environment("SystemTempDir") & "\" & Replace(Replace(Replace(CStr(Now), "/", ""), " ", "_"), ":", "")   &".bmp"	
		MobiDevice("micclass:=MobiDevice").Activate
		MobiDevice("micclass:=MobiDevice").CaptureBitmap  strImagePathAfter , True
		'objTestObject.CaptureBitmap  strImagePathAfter , True

		If  LCase(Environment("MobiObjectClass")) = "mobiedit"  AND  Instr(1, Lcase(objTestObject.GetTOProperty("devicetype")),"iphone") > 0 Then
				Window("regexpwndtitle:=deviceViewer").Type micReturn
		End If 

		If CompareBitmap( strImagePathBefore , strImagePathAfter)  AND  Len(Err.Description)  = 0 Then
			VerifyDblClick = True
			ReportStep "DblClick" , Environment("Description") , Environment("ExpectedResult") ,Environment("Pass") , "Pass"
			Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass") 
			Exit Function
		Else
			ReportStep "DblClick" , Environment("Description") , Environment("ExpectedResult") ,Environment("Fail")  & Space(2) & Err.Description, "Fail"
			Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") & " " &Err.Description
			Exit Function
		End If	

	Else	
		If  (LCase(Environment("MobiObjectClass")) = "mobidevice"  AND LCase(strCoordsOption) = "withboundarycoords" )  OR (LCase(Environment("MobiObjectClass")) = "mobidevice"  AND LCase(strCoordsOption) = "withzercoords" ) Then
				If  Len(Err.Description) = 0  Then
					VerifyDblClick = True
					ReportStep "DblClick" , Environment("Description") , Environment("ExpectedResult") ,Environment("Pass") , "Pass"
					Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass") 			
				Else
					ReportStep "DblClick" , Environment("Description") , Environment("ExpectedResult") ,Environment("Fail") & Space(2)  & Err.Description , "Fail"
					Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") & " " &Err.Description									
				End If
		Else
					objTestObject.WaitProperty "visible" , False  , 30000
					strHeaderAfterClick = FetchHeaderElement
	
					If  StrComp(Lcase(Replace(strHeaderBeforeClick , " " , ""))  , Lcase(Replace(strHeaderAfterClick , " " , "")) , 1)  <>  0  AND Len(Err.Description) = 0 Then
						VerifyDblClick = True
						ReportStep "DblClick" , Environment("Description") , Environment("ExpectedResult") ,Environment("Pass") , "Pass"
						Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass") 						
					Else
						ReportStep "DblClick" , Environment("Description") , Environment("ExpectedResult") ,Environment("Fail") & Space(2)  & Err.Description , "Fail"
						Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") & " " &Err.Description						
					End If		
	End If	
End If 

	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "DblClick" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll   
	Err.Clear
	On Error GoTo 0
End Function

'##########################################################################################################################
''@Function:			VerifyExist
''@Description:			Tests the functionality of Exist method for the passed in object
''@Return Type:			Boolean
''@Created By:			Naveen
''@Created On:			27-Aug-2012
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	Object for which the Exist method needs to be tested
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  blnObjExists 
''@Param Type:   Boolean
''@Param Drtn: 		In
''@Param Desc: 	True if the object is expected to be there and False if the object is not expected to exist
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  intTimeOut 
''@Param Type:   Integer
''@Param Drtn: 		In
''@Param Desc: 	Timeout in seconds
''--------------------------------------------------------------------------------------------------------------------------
''@Example: Set objTestObject = MobiDevice("Device").MobiPage("NewMessages").MobiButton("Button_Cancel")
''					  blnResult = VerifyExist(objTestObject , True , 5)
''--------------------------------------------------------------------------------------------------------------------------

Function VerifyExist(objTestObject, blnObjExists, intTimeOut)

   On Error Resume Next 
	Reporter.Filter = rfEnableAll
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	If intTimeOut  = ""  Then

			'Execute method
			blnExist = objTestObject.Exist
	Else
			'Execute method
			intTimeOut = 20
			blnExist = objTestObject.Exist(intTimeOut)
	End If
	 If Not blnObjExists Then
			objTestObject.WaitProperty  "visible" , False , 60
	 End If

	'Assign default return value
	VerifyExist = False

	'Report results
    If blnObjExists AND blnExist  AND Len(Err.Description) = 0 Then
		VerifyExist = True
		ReportStep "Exist" , Environment("Description") , Environment("ExpectedResult"), "Exist method is working correctly" , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), "Exist method is working correctly" &Space(2) &intTimeOut 

    ElseIf Not(blnObjExists) AND Not(blnExist) Then
		VerifyExist = True
		ReportStep  "Exist" , Environment("Description") , Environment("ExpectedResult"), "Exist method is working correctly"    , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), "Exist method is working correctly" &Space(2) &intTimeOut 
     Else
		ReportStep  "Exist" , Environment("Description") , Environment("ExpectedResult"),"Returned" &Space(2)&blnExist &Space(2)&"when Expected Result was"&Space(2) & blnObjExists &Space(2)& Err.Description, "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), "Returned" &Space(2)&blnExist &"when Expected Result was"&Space(2) & blnObjExists &Space(2) &intTimeOut  &Space(2)& Err.Description
    End If
		
	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
    	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "Exist" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	On Error GoTo 0
	Err.Clear
End Function


'##########################################################################################################################
''@Function:  VerifyGetPercentage
''@Description:  Returns set percentage value
''@Return Type:	Boolean
''@Created By: Shweta
''@ modified by : Saurabh (Removed case for color)
''@Created On: 02/06/2012
''@Modified On: 06/05/2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	Object  (MobiDevice)
''--------------------------------------------------------------------------------------------------------------------------
''@Example: Set  objTestObject = MobiDevice("PhoneLookup").MobiSlider("SliderObject")
'' 							blnFlag = VerifyGetPercentage(objTestObject )
'--------------------------------------------------------------------------------------------------------------------------
Function VerifyGetPercentage (objTestObject)

	On Error Resume Next 
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	strFailedFor = ""

	arrPerc = Array (0 , 40, 100)

	For i = 0 to UBound(arrPerc)

			objTestObject.Set arrPerc(i)
			objTestObject.WaitProperty  "value "  , arrPerc(i) , 30000
        	intCurrentPerc = objTestObject.GetPercentage
    
			If CStr( intCurrentPerc) <> CStr(objTestObject.GetROProperty("value"))  Then
					strFailedFor = strFailedFor &arrPerc(i) &","
			Else
					VerifyGetPercentage = True
			End If

	Next
	
	If strFailedFor <> "" Then
		VerifyGetPercentage = False
	End If

	If  VerifyGetPercentage AND Len(Err.Description) = 0 Then
		ReportStep "GetPercentage" ,Environment("Description") , Environment("ExpectedResult") , "Returned correct values for" &Space(2) &Join(arrPerc , ",") , "Pass"
		Reporter.ReportEvent micFail, Environment("Description") , "Returned correct values for" &Space(2) &Join(arrPerc , ",")
	Else
		ReportStep "GetPercentage",Environment("Description")  , Environment("ExpectedResult")  ,"Failed for the following percentages ->"&strFailedFor &Space(2)& Err.Description, "Fail"
		Reporter.ReportEvent micFail, "GetPercentage : Verify percentage set on"&Space(2) & Environment("MobiObjectClass"), "Failed for the following percentages ->"&strFailedFor &Space(2)& Err.Description
	End If

    	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "GetPercentage" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function

'##########################################################################################################################
''@Function:        VerifyClick
''@Description: 	Verify click method  with coordinates or without coordinates
''@Created By: 		Shweta Bhati
''@Created On: 		05/03/13
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	objTestObject 
''@Param Type:   	Object
''@Param Drtn: 		In
''@Param Desc: 		MobiObject
''--------------------------------------------------------------------------------------------------------------------------
''@Return Type: 	strCoordsOption
''@Return Desc: 	Option for Click eg. "withcoordinates" , "withoutcoordinates" , "withboundaryvalues" , "withrandomvalues"
''@Param Type: 		String
''--------------------------------------------------------------------------------------------------------------------------
''@Example: 		''Set objTestObject =     MobiDevice("Device").MobiPage("Page_1").MobiSlider("Slider")
''									VerifyClick(objTestObject  , "withzerovalues"
''--------------------------------------------------------------------------------------------------------------------------

Function VerifyClick(objTestObject, strCoordsOption)
	On error resume next
	err.clear
    Reporter.Filter = rfEnableAll
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	VerifyClick = False

	If Lcase(strCoordsOption) =  "withnegativecoords" Then
		Err.Clear
		objTestObject.Click -20 , -20
		Wait 3 
		If Instr(1, LCase(Err.Description) , "the statement contains one or more invalid function arguments") > 0 Then
			VerifyClick = True
			Environment("Pass") = "Error message :-  The statement contains one or more invalid function arguments is displayed for negative co-ordinates" 
			ReportStep  "Click" , Environment("Description") , Environment("ExpectedResult") , Environment("Pass") , "Pass"
			Reporter.ReportEvent micPass,Environment("Description"), Environment("Pass")
			Exit Function
		Else
			VerifyClick = False
			Environment("Fail") = "Error message thrown as ->"& Err.Description & space(2) & " and expected message was --> The statement contains one or more invalid function arguments"
			ReportStep   "Click" , Environment("Description") , Environment("ExpectedResult") , Environment("Fail") , "Fail"
			Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") & " " &Err.Description
			Exit Function
		End If
	End If

	Select Case LCase(Environment("MobiObjectClass"))
	
	Case "mobiswitch"
	     strBeforeState = objTestObject.getroproperty("state")
	     
	     Click objTestObject , strCoordsOption
	     Wait 2
	     MobiDevice("micclass:=MobiDevice").Sync
	     strAfterState = objTestObject.getroproperty("state")
		If LCase(strAfterState) <> LCase(strBeforeState) Then
			VerifyClick = True
		Else 
		    VerifyClick = False
		End If
	Case "mobiradio" , "mobiwebradiobutton"
		wait 2
		MobiDevice("micclass:=MobiDevice").Sync
		strCheckedBefore = objTestObject.GetROProperty("checked")
		Click objTestObject , strCoordsOption
		wait 2
		MobiDevice("micclass:=MobiDevice").Sync
		strCheckedAfter = objTestObject.GetROProperty("checked")
		If  strCheckedBefore  =  False Then
			If   strCheckedAfter  =  True Then
						VerifyClick = True
			End If
		Else
			If   strCheckedAfter  = True Then
						VerifyClick = True
			End If
		End If

	Case "mobiwebcheckbox" , "mobicheckbox"
	MobiDevice("micclass:=MobiDevice").Sync
	strCheckedBefore = objTestObject.GetROProperty("checked")
	Click objTestObject , strCoordsOption
	wait 5
	MobiDevice("micclass:=MobiDevice").Sync
	strCheckedAfter = objTestObject.GetROProperty("checked")

	If  strCheckedAfter <> strCheckedBefore Then
			VerifyClick = True
	End If

	Case "mobisegment"
		MobiDevice("micclass:=MobiDevice").Sync
		strBeforeProperty = objTestObject.GetROProperty("selecteditemindex")
		
		Click objTestObject , strCoordsOption
		wait 5
		MobiDevice("micclass:=MobiDevice").Sync
		'objTestObject.WaitProperty "visible" , False , 20000
		strAfterProperty =  objTestObject.GetROProperty("selecteditemindex")
		
		If strBeforeProperty <>  strAfterProperty Then
			VerifyClick = True
		Else
			VerifyClick = False
		End If
	
	Case "mobiwebtable"  , "mobidatetimepicker" , "mobipicker"
		Click objTestObject , strCoordsOption
		If Len(Err.Description) = 0 Then
			VerifyClick = True
		End If 	
	Case "mobibutton", "mobilist" , "mobidevice" , "mobielement"
		strHeaderBeforeClick = FetchHeaderElement
		Click objTestObject , strCoordsOption
		Wait 1
		'objTestObject.WaitProperty "visible" , False  , 30000
		strHeaderAfterClick = FetchHeaderElement

		If  (LCase(Environment("MobiObjectClass")) = "mobidevice"  AND LCase(strCoordsOption) = "withboundarycoords" )  OR (LCase(Environment("MobiObjectClass")) = "mobidevice"  AND LCase(strCoordsOption) = "withzerovalues" ) Then
				If  Len(Err.Description) = 0  Then
					VerifyClick = True
				End If
		Else
		If  StrComp(Lcase(Replace(strHeaderBeforeClick , " " , ""))  , Lcase(Replace(strHeaderAfterClick , " " , "")) , 1)  <>  0 Then
			VerifyClick = True
		End If
	End If 

	Case "mobiweblink"  , "mobiwebimage" , "mobiwebelement", "mobiwebbutton"

		Set objEdit = Description.Create
		objEdit("micclass").Value = "MobiEdit"
		wait 5
		MobiDevice("micclass:=MobiDevice").Sync
		Set objEditChild = MobiDevice("micclass:=MobiDevice").ChildObjects(objEdit)

		strTextBeforeClick  = objEditChild(0).GetROProperty("text")
		strIDBeforeClick = objTestObject.getroproperty("id")
		Click objTestObject , strCoordsOption
		wait 5
		MobiDevice("micclass:=MobiDevice").Sync
		i = 0
        Do
        strTextAfterClick  = objEditChild(0).GetROProperty("text")
        strIDAfterClick = objTestObject.getroproperty("id")
		Wait 2
		If  (LCase(strTextBeforeClick)  <>  LCase(strTextAfterClick)) OR  (Lcase(strIDAfterClick) <> Lcase(strIDBeforeClick)) Then
		       If Len(Err.Description) = 0 Then
		       	VerifyClick = True
				Print VerifyClick
		       End If
			Exit Do
				
		End If
		i = i + 1
        Loop While(i<=50)
		'objTestObject.WaitProperty "visible" , False , 30000
	
	   
	Case "mobiwebdropdown" , "mobidropdown"
	     strTextBefore =  MobiDevice("micclass:=MobiDevice").GetVisibleText
	     Click objTestObject , strCoordsOption
	     wait 2
	     strTextAfter = MobiDevice("micclass:=MobiDevice").GetVisibleText
	     If LCase(strTextBefore) <> LCase(strTextAfter) AND Len(Err.Description) = 0 Then
					VerifyClick = True
		 End If
		 
	Case "mobiwebedit" , "mobiedit"
	    Click objTestObject , strCoordsOption
	    Wait 2
	    MobiDevice("micclass:=MobiDevice").Type "test"
	    Wait 2
	    If objTestObject.getroproperty("text") = "test" Then
	    	VerifyClick = True
	    End If
	   'Window("regexpwndtitle:=deviceViewer").Type micReturn
	   'Wait 3
	   objTestObject.clear
	   Wait 2
	Case Else
		If LCase(MobiDevice("micclass:=MobiDevice").GetROProperty("Platform")) = "iphone os"  AND LCase(Environment("MobiObjectClass")) = "mobislider"  Then
				Click objTestObject , strCoordsOption
				If Len(Err.Description) = 0 Then
					VerifyClick = True
				End If
	ElseIf LCase(MobiDevice("micclass:=MobiDevice").GetROProperty("platform")) = "androidos"  AND LCase(Environment("MobiObjectClass")) = "mobislider"  Then
				MobiDevice("micclass:=MobiDevice").Sync
				strValueBefore = objTestObject.GetROProperty("percentage")
				Click objTestObject , strCoordsOption
				wait 5
				MobiDevice("micclass:=MobiDevice").Sync
				strValueAfter = objTestObject.GetROProperty("percentage")
				If Len(Err.Description) = 0  AND  strValueBefore <> strValueAfter Then
					VerifyClick = True
				End If
				
		Else
		'Generate the path to save the file. Path should be System's Temp directory
		strImagePathBefore = Environment("SystemTempDir") & "\" & Replace(Replace(Replace(CStr(Now), "/", ""), " ", "_"), ":", "")   &".bmp"	
		MobiDevice("micclass:=MobiDevice").Activate
		'objTestObject.CaptureBitmap  strImagePathBefore , True
		MobiDevice("micclass:=MobiDevice").CaptureBitmap strImagePathBefore , True
		Click objTestObject , strCoordsOption
		wait 3
		strImagePathAfter = Environment("SystemTempDir") & "\" & Replace(Replace(Replace(CStr(Now), "/", ""), " ", "_"), ":", "")   &".bmp"	
		MobiDevice("micclass:=MobiDevice").Activate
		'objTestObject.CaptureBitmap  strImagePathAfter , True
		MobiDevice("micclass:=MobiDevice").CaptureBitmap strImagePathAfter , True
		Wait 3
			If CompareBitmap( strImagePathBefore , strImagePathAfter)  Then
				VerifyClick = True
			End If
		End If 
	End Select

		
	If  LCase(Environment("MobiObjectClass"))  = "mobiedit"  AND Instr(LCase(MobiDevice("micclass:=MobiDevice").GetROProperty("platform")) , "iphone") > 0 Then
			Window("regexpwndtitle:=deviceViewer").Type micReturn
	End If

	If   VerifyClick   AND  Len(Err.Description) = 0  Then
			ReportStep  "Click" , Environment("Description") , Environment("ExpectedResult") , Environment("Pass") , "Pass"
			Reporter.ReportEvent micPass,Environment("Description"), Environment("Pass") 
	Else
			ReportStep   "Click" , Environment("Description") , Environment("ExpectedResult") , Environment("Fail")  & Space(2) & err.Description, "Fail"
			Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") & " " &Err.Description
	End If

	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "Click" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll  
	Err.Clear
	On Error GoTo 0
End Function


'##########################################################################################################################
''@Function:        VerifyGetToProperties
''@Description: Verify GetToProperties method .
''@Return Type:  NA
''@Created By: Prashant
''@Created On: 8-Aug-2012
''@Modified  by :  		Shweta
''@Modified  On : 		28-May-2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn:      In
''@Param Desc:   Object for which the GetToProperties method needs to be tested
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  arrProperties 
''@Param Type:   Array
''@Param Drtn:     In
''@Param Desc: Properties for which user need to check the GetToProperties
''--------------------------------------------------------------------------------------------------------------------------
''@Example: 
''Set objTestObject = Mobidevice("Device").MobiSlider("Slider_Bright") 
''arrProperties = Array("x", "y","width", "height","micclass")
'blnFlag = VerifyGetToProperties objTestObject,arrProperties 
''--------------------------------------------------------------------------------------------------------------------------
Function VerifyGetToProperties(objTestObject,arrProperties)

	On Error Resume Next
	Reporter.Filter = rfEnableAll
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""

	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	VerifyGetToProperties = False
	strMissingProperties = ""

	Set colProperties = objTestObject.GetTOProperties
		For intArrIndex = 0 To UBound(arrProperties)
			blnFound = False
            'Check for all required properties
            For intColIndex = 0 To colProperties.Count - 1
				  If UCase(colProperties(intColIndex).Name) = UCase(arrProperties(intArrIndex)) Then
					   blnFound = True
                       Exit For
                  End If
            Next

			If Not(blnFound) Then
				strMissingProperties = strMissingProperties & "'" & arrProperties(intArrIndex) & "'" & VBNewLine
            End If
          Next

	'Verify that all supported properties are returned
	If strMissingProperties = ""  AND Len(Err.Description) = 0 Then
		ReportStep  "GetTOProperties" , Environment("Description") , Environment("ExpectedResult"), "Properties returned are"&Space(2)&Join(arrProperties , ",") , "Pass"	
		Reporter.ReportEvent micPass, Environment("Description"), "Properties returned are"&Space(2)&Join(arrProperties , ",")
		VerifyGetToProperties = True
	Else
		ReportStep   "GetTOProperties" , Environment("Description") , Environment("ExpectedResult"),"Properties not found ->"&strMissingProperties &Space(2)&Err.Description , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"),"Properties not found ->"&strMissingProperties &Space(2)&Err.Description
	End If
	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "GetToProperties" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End function

'##########################################################################################################################
''@Function:        VerifySetToProperty
''@Description: Verify SetToProperty method .
''@Return Type:NA
''@Created  by :  		Shweta
''@Created On: 27-Aug-2012
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn:      In
''@Param Desc:   Object for which the SetToProperty method needs to be tested
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  arrProperties 
''@Param Type:   Array
''@Param Drtn:     In
''@Param Desc: Properties for which user need to check the SetToProperty
''--------------------------------------------------------------------------------------------------------------------------
''@Example: 
''Set objTestObject = Mobidevice("Device").MobiPage("Brightness").MobiSlider("Slider_Bright") 
''strSetFailedFor = ""
''arrProperties = Array("x", "y","width", "height","micclass")
'VerifySetToProperty objTestObject,arrProperties,strSetFailedFor 
''--------------------------------------------------------------------------------------------------------------------------
Function VerifySetToProperty(objTestObject,arrProperties)
	Err.Clear
	On Error Resume Next 
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	strSetFailedFor = ""
	VerifySetToProperty = False
	
	Reporter.Filter = rfEnableAll
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	For intArrIndex = 0 To UBound(arrProperties)
		strTOValue = cstr(objTestObject.GetTOProperty(arrProperties(intArrIndex)))
		'strUpdateValue = "Mobi"

		'Execute method
		'objTestObject.SetTOProperty arrProperties(intArrIndex), strTOValue & strUpdateValue
			objTestObject.SetTOProperty arrProperties(intArrIndex), strTOValue
		strTOValueUpdated =objTestObject.GetTOProperty(arrProperties(intArrIndex))
	'If Not (LCase(strTOValueUpdated) = LCase(strTOValue & strUpdateValue))  Then
		If Not (LCase(strTOValueUpdated) = LCase(strTOValue))  Then
			strSetFailedFor = strSetFailedFor & "Property Name: '" & arrProperties(intArrIndex) & "' > " & "Expected Property Value: '" & strTOValue & strUpdateValue &_
			 "' Actual Property Value: '" & strTOValueUpdated & "'" & VBNewLine
		End If
	Next

	If  strSetFailedFor = "" AND Err.Description = "" Then
		Reportstep "SetTOProperty" , Environment("Description") , Environment("ExpectedResult") , "Successfully set values for" &Space(2) &Join(arrProperties , ",") , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), "Successfully set values for" &Space(2) &Join(arrProperties , ",")
	Else
		Reportstep "SetTOProperty" ,  Environment("Description") , Environment("ExpectedResult") , "Failed for" &Space(2)&strSetFailedFor &Space(2)&Err.Description , "Fail"
		Reporter.ReportEvent micFail,  Environment("Description") , "Failed for" &Space(2)&strSetFailedFor &Space(2)&Err.Description
	End If

	'Set property values to original
	For intArrIndex = 0 To UBound(arrProperties)
		strTOValue = objTestObject.GetTOProperty(arrProperties(intArrIndex))
		'strTOValueOriginal = Left(strTOValue, Len(strTOValue) - 4)
		'Execute method 
		objTestObject.SetTOProperty arrProperties(intArrIndex), strTOValue
	Next
	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "SetTOProperty" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End function


'''##########################################################################################################################
''@Function:    VerifySet
''@Description: Verify  set method for MobiEdit , MobiSwitch , MobiDropDown , MobiRadio , mobiCheckBox , MobiRadio
''@Return Type:	boolean
''@Created By:  Shweta
''@Modified On: 4th June 2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:  Object
''@Param Drtn: 	In
''@Param Desc: 	object on which method needs to be performed
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  ValueToSet 
''@Param Type:  Variant
''@Param Drtn: 	In
''@Param Desc: 	Value to be set for the object passed , can be either integer(0 , 1 for enumerations) or string
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject2 
''@Param Type:  Object
''@Param Drtn: 	In
''@Param Desc: 	optional object(It will be passed in case of MobiRadio or MobiWebRadioButton in case if previously passed object is already selected)
''--------------------------------------------------------------------------------------------------------------------------
''@Example () :   Set objTestObject = Mobidevice("Device").MobiEdit("ObjectName")
''			  							VerfiySet objTestObject  , "text" , null
'------------------------------------------------------------------------------------------------------------------------
Function VerifySet(objTestObject , ValueToSet , objTestObject2)

   On Error Resume Next
    Reporter.Filter = rfEnableAll
	Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	strType =  objTestObject.GetTOProperty("micclass")

	'Setting function's default return value to false	
	VerifySet = False

	'Verifying error message on passing blank values 
	If IsNull(ValueToSet) AND  LCase(strType) <> "mobiradio" AND LCase(strType) <> "mobiwebradiobutton" Then
		Err.Clear
		Reporter.Filter = rfDisableAll
		objTestObject.Set
		strErrorMessage = "Invalid number of parameter"
		If   Instr(1, LCase(Replace(Err.Description , " " , "")), LCase(Replace(strErrorMessage , " " , ""))) > 0 Then
				VerifySet = True
				Environment("Pass") = "Error thrown:Invalid number of parameters."
				Err.Clear
		Else
				Environment("Fail") =  "Error thrown :"&Space(2)&chr(34)&Err.Description&chr(34)&"expected was-> Invalid number of parameters."
		End If
		Reporter.Filter = rfEnableAll

	Else

	Select Case LCase(strType)

	Case  "mobiedit" ,"mobidropdown" , "mobiwebedit"

		objTestObject.Set ValueToSet

		'objTestObject.Refreshobject
		'Wait 3

		If   IsNumeric(ValueToSet) Then
					objTestObject.WaitProperty "selecteditemindex" , ValueToSet  , 30000
			If  objTestObject.GetROProperty("selecteditemindex") = ValueToSet  Then
				VerifySet  = True
			End If
		'Comparing run time text property value with the value passed
		Else
			objTestObject.WaitProperty "text" , ValueToSet  , 30000
			If Lcase(objTestObject.GetROProperty("text")) =  Lcase(ValueToSet)Then
			VerifySet  = True
			End If
		End If

		Environment("Pass") = "Value set :"&ValueToSet
		Environment("Fail") =  "Failed to set value :"& ValueToSet &Space(2)&Err.Description
	
	Case "mobiradio" , "mobiwebradiobutton"
	
		'If  object is already selected choose another object 
		If  strInitialValue AND Not IsNull(objTestObject2) Then
			objTestObject2.Set 
		End If
		
		strInitialValue = objTestObject.GetROProperty("checked")
		
		'Execute method
		objTestObject.Set
		objTestObject.WaitProperty "checked" ,  True  , 60000
		strValue = objTestObject.GetROProperty("checked")

	If   strInitialValue   Then
			If   strValue  Then
				Environment("Pass") = "Checked property before and  after Set  is True"
				VerifySet = True
			Else
				Environment("Fail") = "Set is working as Click"
			End If
	Else

			If  strInitialValue  <> strValue  Then
					Environment("Pass") = "Checked property before set is"&Space(2) & strInitialValue &Space(2)&"and after set is"& Space(2)  &  strValue
					VerifySet = True
				Else
					Environment("Fail") = "Value Before set :"  &  strInitialValue &Space(2)  &"After set :"&  strValue
			End If
	End If 

	Case "mobiswitch"

		strInitialState = objTestObject.GetROProperty("state")

		'Changing the state of the switch to the passed state
	    objTestObject.Set ValueToSet
		wait 3
		objTestObject.RefreshObject


		If  ValueToSet = 0 Then
			ValueToSet = "eDEACTIVATE"
			strValue = "off"
		Else
			ValueToSet = "eACTIVATE"
			strvalue = "on"
		End If

		objTestObject.WaitProperty "state" , strvalue , 60000
		If  LCase(strInitialState) =  "on" Then
			strInitialState = "eACTIVATE"
		Else
			strInitialState = "eDEACTIVATE"
		End If

		If LCase(objTestObject.GetROProperty("state")) = "on" Then
			strAfterSet = "eACTIVATE"
		Else
			strAfterSet = "eDEACTIVATE"
		End If

		Environment("Pass") =  "Value to set :" &ValueToSet & Space(2) & "before  :"& strInitialState & Space(2)& "after  :"& strAfterSet
		Environment("Fail") =   "Value to set :"& ValueToSet & Space(2) & "before  :"& strInitialState & Space(2)& "after   :"& strAfterSet

		If  LCase(ValueToSet) <> Lcase(strInitialState) and Lcase(strAfterSet) <> Lcase(strInitialState)Then
			VerifySet = True
		End If

		If  LCase(ValueToSet)  =  Lcase(strInitialState) and Lcase(strAfterSet)  =  Lcase(strInitialState)Then
			VerifySet = True
		End If

	Case "mobicheckbox" , "mobiwebcheckbox"

		'Initial  checked property value
		strInitialValue = CStr(objTestObject.GetROProperty("checked"))

		'Execute Set method 
	    objTestObject.Set ValueToSet
		If  ValueToSet = 1 Then
			ValueToSet = "eChecked"
			checkedValue = "True"
		Else
			ValueToSet = "eUnChecked"
			checkedValue = "False"
		End If
		objTestObject.WaitProperty  "checked" , checkedValue , 60000


		If  CStr(Lcase(strInitialValue)) = "true"Then
			strInitialValue = "eChecked"
		Else
			strInitialValue = "eUnChecked"
		End If

		strAfterValue = CStr(objTestObject.GetROProperty("checked"))

		If  CStr(Lcase(strAfterValue))  = "true" Then
			strAfterValue = "eChecked"
		Else
			strAfterValue = "eUnChecked"
		End If

'		If  ValueToSet = 0 Then
'			ValueToSet  = "False"
'			strValueToSet = "False"
'		Else ValueToSet = 1 
'			ValueToSet   = "True"
'			strValueToSet = "True"
'		End If 


		If  CStr(LCase(ValueToSet)) <> Cstr(Lcase(strInitialValue)) Then 
			If  strAfterValue <> strInitialValue AND Len(Err.Description) = 0  Then
							VerifySet = True
			End If

		ElseIf  Cstr(LCase(ValueToSet))  =  CStr(Lcase(strInitialValue))  Then
			If  strAfterValue =  strInitialValue AND Len(Err.Description) = 0  Then
							VerifySet = True
			End If
		End If

		Environment("Pass") =  "Value to set : "&ValueToSet &Space(2) & "value before set :"& strInitialValue &Space(2) &"value after set :"&strAfterValue
		Environment("Fail") =   "Value to set : "&ValueToSet &Space(2) & "value before set :"& strInitialValue &Space(2) &"value after set :"&strAfterValue


	Case  "mobislider" 
		err.clear
		Reporter.Filter = rfDisableAll
		strNegativeError = "Value must be between 0 and 100."
		objTestObject.Set ValueToSet
		Wait 5
		'objTestObject.WaitProperty  "value" , ValueToSet , 20000
		'objTestObject.RefreshObject
		Reporter.Filter = rfEnableAll
				
		If  ValueToSet < 0  Then

				If Instr(1, LCase(Replace(strNegativeError , " " , "")) , LCase(Replace(Err.Description , " " , ""))) > 0 Then
					Environment("Pass") = "Error thrown: "&Space(2)& Err.Description 
					VerifySet = True
					Err.Clear
				Else
					Environment("Fail") =  "Error thrown :"&Space(2)&chr(34)&Err.Description&chr(34)&"expected was"&Space(2)& strNegativeError
				End If 
		Else  
				If objTestObject.GetROProperty("value") = ValueToSet Then
					Environment("Pass") = "Successfully set percentage"&Space(2) & ValueTOSet
					VerifySet = True
				Else
					Environment("Fail") = "Failed to set percentage  "&Space(2)&ValueTOSet &Space(2) & "Value set is :"&objTestObject.GetROProperty("value")
				End If 
		End If 
		End Select 
		End If

	If  VerifySet AND Err.Description = "" Then
		ReportStep  "Set" , Environment("Description") , Environment("ExpectedResult") ,Environment("Pass") , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass")
	Else
		ReportStep "Set" , Environment("Description") , Environment("ExpectedResult") ,Environment("Fail")&Space(2)&Err.Description , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail")&Space(2)&Err.Description
	End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""

	Reporter.Filter = rfDisableAll
    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "Set" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	On Error GoTo 0
End Function

'##########################################################################################################################
''@Function:		VerifyCheckProperty
''@Description:		Verify CheckProperty functionality for any MobiObject
''@Return Type:		Boolean
''@Created By:		Sushant
''@Created On:		27-Aug-2012
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	Object for which the CheckProperty method needs to be tested
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  strPropertyName 
''@Param Type:   String
''@Param Drtn: 		In
''@Param Desc: 	 The name of the property whose value is checked
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  varPropertyValue 
''@Param Type:   Variant
''@Param Drtn: 		In
''@Param Desc: 	The ExpectedResult against which the actual property value should be checked
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  longTimeOut 
''@Param Type:   Long
''@Param Drtn: 		In
''@Param Desc: 	The time, in milliseconds, within which QuickTest should check whether the actual value of the property matches the specified ExpectedResult
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  blnPropertyCheck 
''@Param Type:   Boolean
''@Param Drtn: 		In
''@Param Desc: 	True if the value of desired object is expected to be found and False if the value of desired object is not expected to found
''--------------------------------------------------------------------------------------------------------------------------
''@Example: Set objTestObject = MobiDevice("Device").MobiButton("Button")
''					  blnResult = VerifyCheckProperty(objTestObject,"text", "Log In", 5, True)
''--------------------------------------------------------------------------------------------------------------------------

Function VerifyCheckProperty(objTestObject, strPropertyName,  varPropertyValue, longTimeOut, blnObjectVisible)

   On Error Resume Next
    Reporter.Filter = rfEnableAll
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	longTimeOut = 20000
	VerifyCheckProperty = False

	'Execute method
	Reporter.Filter  = rfDisableAll
	wait 5
	MobiDevice("micclass:=MobiDevice").Sync
	blnProperty = objTestObject.CheckProperty(strPropertyName, varPropertyValue, longTimeOut)

	If  IsEmpty(blnProperty) OR  blnProperty = 0 Then
			blnProperty  =  False
	End If 

	Reporter.Filter = rfEnableAll
	'Report results
	If blnObjectVisible AND blnProperty AND Err.Description = "" Then
    	ReportStep  "CheckProperty" , Environment("Description"), Environment("ExpectedResult") , "Returned"&Space(2)&blnProperty &Space(2)&"when object is visible", "Pass"
		Reporter.ReportEvent miPass, Environment("Description"), "Returned"&Space(2)&blnProperty &"when object is visible"
		VerifyCheckProperty = True

	ElseIf Not(blnObjectVisible) AND Not(blnProperty) Then 
		ReportStep  "CheckProperty" , Environment("Description"), Environment("ExpectedResult") , "Returned"&Space(2)&blnProperty &Space(2) &"when object is not visible", "Pass"
		Reporter.ReportEvent miPass, Environment("Description"), "Returned"&Space(2)&blnProperty &"when object is not visible"
		VerifyCheckProperty = True
	Else
		ReportStep  "CheckProperty" , Environment("Description"), Environment("ExpectedResult") , "Returned"&Space(2)&blnProperty &Space(2)&"when object is not visible", "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), "Returned"&Space(2)&blnProperty &"when object is not visible" &Space(2)&Err.Description
	End If
	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
    	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "CheckProperty" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function



'##########################################################################################################################
''@Function:		VerifyWaitProperty
''@Description:		Verify WaitProperty functionality for any MobiObject
''@Return Type:		Boolean
''@Created By:		shweta
''@Created On:		29-05-2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	Object for which the WaitProperty method needs to be tested
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  strPropertyName 
''@Param Type:   String
''@Param Drtn: 		In
''@Param Desc: 	 The name of the property whose value is checked
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  varPropertyValue 
''@Param Type:   Variant
''@Param Drtn: 		In
''@Param Desc: 	The value to be achieved before continuing to the next step
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  longTimeOut 
''@Param Type:   Long
''@Param Drtn: 		In
''@Param Desc: 	The time, in milliseconds, after which QuickTest continues to the next step if the specified value is not achieved
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  blnObjectVisible 
''@Param Type:   Boolean
''@Param Drtn: 		In
''@Param Desc: 	True if object exist False otherwise.
''--------------------------------------------------------------------------------------------------------------------------
''@Example: Set objTestObject = MobiDevice("Device").MobiButton("Button")
''					  blnResult = VerifyWaitProperty(objTestObject,"text", "Log In", 5, True)
''--------------------------------------------------------------------------------------------------------------------------

Function VerifyWaitProperty(objTestObject, strPropertyName,  varPropertyValue, longTimeOut, blnObjectVisible)
	On Error Resume Next
    Reporter.Filter = rfEnableAll
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	VerifyWaitProperty = False

	MobiDevice("micclass:=MobiDevice").Sync
	wait 2
	'Execute method
	blnValue = objTestObject.WaitProperty(strPropertyName, varPropertyValue, longTimeOut)
	wait 2	
	If blnValue = 0  OR  IsEmpty(blnValue) Then
		blnValue = False
	End If 
	
	'Verify output
	If blnObjectVisible AND blnValue Then
		VerifyWaitProperty = True    	
	ElseIf Not blnObjectVisible AND Not blnValue Then
		VerifyWaitProperty = True
	End If 

	If VerifyWaitProperty AND Err.Description = "" Then
		ReportStep "WaitProperty" , Environment("Description") , Environment("ExpectedResult") ,"Returned"&Space(2)&blnValue&Space(2)&"for property->"&strPropertyName  , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), "Returned"&Space(2)&blnValue&Space(2)&"for property->"&strPropertyName&":Value->"&varPropertyValue
	Else
		ReportStep  "WaitProperty" , Environment("Description") , Environment("ExpectedResult") ,"Returned "&Space(2)&blnValue&Space(2)&" for property->"&strPropertyName , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), "Returned"&Space(2)&blnValue&Space(2)&"for property->"&strPropertyName&": Value->"&varPropertyValue &Space(2)&Err.Description 
	End If
	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "WaitProperty" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function

'##########################################################################################################################
''@Function:		VerifyGetItem
''@Description:		Verify GetItem functionality for MobiList
''@Return Type:		String
''@Created By:		Shweta
''@Created On:		4-June-2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	objTestObject 
''@Param Type:   	Object
''@Param Drtn: 		In
''@Param Desc: 		Object for which the GetItem method needs to be tested
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	intIndex 
''@Param Type:   	Int
''@Param Drtn: 		In
''@Param Desc: 		The index number is an Integer value. Numeric index of the item to be fetched. Index values begin with 0
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	intWheelCount 
''@Param Type:   	Int
''@Param Drtn: 		In
''@Param Desc: 		Wheel number
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	strExpectedValue
''@Param Type:   	String
''@Param Drtn: 		In
''@Param Desc: 		The Item, it should returned from the specified index in the list
''--------------------------------------------------------------------------------------------------------------------------
''@Example: Set objTestObject = MobiDevice("Device").MobiList("List")
''					  blnResult = VerifyGetItem(objTestObject,1,1 ,"Picker1 >", "withoutparameter")
''--------------------------------------------------------------------------------------------------------------------------

Function VerifyGetItem(objTestObject, intIndex, intWheelCount , strExpectedValue , strOption)
	err.clear
   On Error Resume Next
    Reporter.Filter = rfEnableAll
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	'Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	strObjectType = objTestObject.GetTOProperty("micclass")
	VerifyGetItem = False
	strErrorMessage = ""

	Select Case LCase(strOption)

	Case  "withoutparameter"
		Reporter.Filter = rfDisableAll
		err.clear
		strErrorMessage = "Invalid number of parameters."
		strItem = objTestObject.GetItem
		Reporter.Filter = rfEnableAll

	 Case "withindexonly"
			Reporter.Filter = rfDisableAll
			err.clear
			strItemReturned = objTestObject.GetItem(intIndex)

			'Case : index value is a string
			If   VarType(intIndex) = 8 Then

						strErrorMessage = "Type mismatch." 
			'Case : index value is negative
			ElseIf  intIndex < 0  Then
				If LCase(strObjectType) = "mobipicker"  Then
						strErrorMessage = "the requested item exceeds the number of items in the list or is negative."
				ElseIf LCase(strObjectType) = "mobidropdown" Then
						strErrorMessage = "Cannot identify the specified item of the object. Confirm that the specified item is included in the object's item collection."
				ElseIf LCase(strObjectType) = "mobilist" Then
						strErrorMessage ="Invalid index specified. Must be greater than or equal to zero."
				Else
						strErrorMessage ="Invalid index specified. Must be greater or equal to zero"
				End If
			'Case : index value is out of range
			ElseIf  intIndex >= objTestObject.GetROProperty("itemscount") Then
				If LCase(strObjectType) = "mobipicker"  Then
						strErrorMessage = "the requested item exceeds the number of items in the list or is negative."
				ElseIf LCase(strObjectType) = "mobilist" Then
						strErrorMessage = "Invalid index specified. Must be greater than or equal to zero and less then the final index (" & objTestObject.GetROProperty("itemscount") & ")"
				Else
						strErrorMessage ="Cannot identify the specified item of the object. Confirm that the specified item is included in the object's item collection."
				End If

			Else
				'Case : Valid index value
				If  Lcase(Trim(strExpectedValue))= Lcase(Trim(strItemReturned)) Then
						VerifyGetItem = True
						Environment("Pass") = "Value returned as"& Space(2) & strItemReturned & Space(2)  & "at index  :"& intIndex 
				Else
						Environment("Fail") = "Value returned as"& Space(2) & strItemReturned & Space(2)  & "at index  :"& intIndex &Space(2)&"but expected value was :"& strExpectedValue
				End If
			End If 
			Reporter.Filter = rfEnableAll

	Case "withbothparameters" ,"withonlyoneparameter"
		err.clear
			Reporter.Filter = rfDisableAll
			strItemReturned = objTestObject.GetItem( intIndex , intWheelcount)
			'Case : valid index and wheelcount
			If intIndex < objTestObject.GetROProperty("itemscount") AND intWheelcount < objTestObject.GetROProperty("wheelcount")  Then
				If  Lcase(Trim(strExpectedValue))= Lcase(Trim(strItemReturned)) Then
						VerifyGetItem = True
						Environment("Pass") = "Value returned as"& Space(2) & strItemReturned & Space(2)  & "at index  :"& intIndex &" , "& "Wheelcount  :"& intWheelcount
				Else
						Environment("Fail") = "Value returned as"& Space(2) & strItemReturned & Space(2)  & "at index  :"& intIndex &" , "& "Wheelcount  :"& intWheelcount & Space(2)&"but expected value was :"& strExpectedValue
				End If 
			'Case : blank index and valid wheelcount
			Else
				If intIndex = " " AND  intWheelcount < objTestObject.GetROProperty("wheelcount") Then
						strErrorMessage = "Type mismatch." 

				'Case : valid index and wheelcount either negative or out of range
				ElseIf intIndex  < objTestObject.GetROProperty("itemscount")  AND ( intWheelcount < 0 OR intWheelcount > objTestObject.GetROProperty("wheelcount")) Then
						strErrorMessage = "Invalid picker wheel number assignment"
				End If 
			End If 
	End Select

		If  Len(strErrorMessage) <> 0  Then
				If Instr(1, LCase(Replace(Err.Description , " " , "")), LCase(Replace(strErrorMessage , " " , "")) ) > 0 Then
						VerifyGetItem = True
						Environment("Pass") = "Error message thrown  :"&chr(34) &Err.Description&chr(34)
				Else
						Environment("Fail") = "Error message thrown  :"&chr(34) &Err.Description&chr(34) &"but Expected message was :"& strErrorMessage
				End If
		End If
	Reporter.Filter = rfEnableAll	

	If  VerifyGetItem AND Err.Description = "" Then
        ReportStep  "GetItem" ,  Environment("Description"),Environment("ExpectedResult") , Environment("Pass")   , "Pass"
		Reporter.ReportEvent  micPass  ,  Environment("Description")  ,Environment("Pass")
	Else
		ReportStep "GetItem" , Environment("Description"),Environment("ExpectedResult")  , Environment("Fail") , "Fail"
		Reporter.ReportEvent micFail  ,  Environment("Description")  ,Environment("Fail") &Space(2)&Err.Description
	End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
    	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "GetItem" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function
	
'
''########################################################################################################################
'''@Function:        VerifyClickColor
'''@Description:  VerifyClickColor method .
'''@Return Type:	string
'''@Created By: Saurabh
'''@Modified by : Shweta
'''@Created On: 08/30/2012
'''--------------------------------------------------------------------------------------------------------------------------
'''@Param Name:  objTestObject 
'''@Param Type:   String
'''@Param Drtn: 		In
'''@Param Desc: 	Objectname
'''--------------------------------------------------------------------------------------------------------------------------
'''--------------------------------------------------------------------------------------------------------------------------
'''@Param Name:  strCase 
'''@Param Type:   string
'''@Param Drtn: 		In
'''@Param Desc: Type of input as parameter for ClickColor method
'''--------------------------------------------------------------------------------------------------------------------------
'''--------------------------------------------------------------------------------------------------------------------------
'''@Param Name:  strcolor 
'''@Param Type:   string
'''@Param Drtn: 		In
'''@Param Desc: Color name on which user wants to perform click operation
'''--------------------------------------------------------------------------------------------------------------------------
'''--------------------------------------------------------------------------------------------------------------------------
'''@Param Name:  intallowablediff 
'''@Param Type:   int
'''@Param Drtn: 		In
'''@Param Desc: allowable difference
'''@note :  if user does not  have any value for allowable difference then pass ""  as an input
'''--------------------------------------------------------------------------------------------------------------------------
'''@Example: 
''VerifyClickColor(objTestObject,"validwithdiff","Black",20)
'''Set objTestObject = Mobidevice("Device").MobiPage("Brightness").MobiElement("Slider_Bright") 
'''--------------------------------------------------------------------------------------------------------------------------
'
'Function VerifyClickColor(objTestObject, strCase, strcolor, intallowablediff)
'	On Error Resume Next
'	Reporter.Filter = rfEnableAll
'    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
'	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
'	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
'	VerifyClickColor = False
'
'	'Create file object
'	Set objFSO = CreateObject("Scripting.FileSystemObject")
'	If Instr(1,Lcase(strCase),"invalid") < 1 and Instr(1,Lcase(strCase),"withoutparameter") < 1  Then
'		 'Generate a unique file name
'		strBeforeClickImage = Environment("SystemTempDir") & "\" & Replace(Replace(Replace(CStr(Now), "/", ""), " ", "_"), ":", "") &"old"& ".png"
'				
'		'Take screen shot of current screen
'		Mobidevice("micclass:=MobiDevice").CaptureBitmap strBeforeClickImage, True
''		Set ObjBeforeClick = objFSO.GetFile(strBeforeClickImage)
''	
''		ObjBeforeClick_Size = CInt(Round(ObjBeforeClick.Size / 1024 ))
'	End If
'
'	If intallowablediff = "" Then
'		intallowablediff = 0
'	End If
'
'	Select Case Lcase(strCase)
'		Case "validwithdiff"
'			objTestObject.ClickColor strcolor, intallowablediff
'			Environment("Pass") = "ClickColor method is working correctly with color " & strcolor
'			Environment("Fail") = "ClickColor method is not working correctly with color " & strcolor
'
'		Case "validwithoutdiff"
'			objTestObject.ClickColor strcolor
'			Environment("Pass") = "ClickColor method is working correctly with color " & strcolor & " and allowable difference " & intallowablediff
'			Environment("Fail") = "ClickColor method is not working correctly with color " & strcolor & " and allowable difference " & intallowablediff
'
'		Case "invalidcolor","invaliddiff"
'			Reporter.Filter = rfDisableAll
'			objTestObject.ClickColor strcolor, intallowablediff
'			If Lcase(Err.Description) = "the statement contains one or more invalid function arguments" Then
'				VerifyClickColor = True
'				Environment("Pass") = "Error message " & Err.Description & " is displayed when invalid parameter is passed"
'			Else
'				Environment("Fail") = "Error message - 'The statement contains one or more invalid function arguments' is not displayed when invalid parameter is passed on executing ClickColor method"
'			End If
'			Reporter.Filter = rfEnableAll
'
'		Case "withoutparameter"
'			Reporter.Filter = rfDisableAll
'			objTestObject.ClickColor
'			If Lcase(Err.Description) = "invalid number of parameters." Then
'				VerifyClickColor = True
'				Environment("Pass") = "Error message " & Err.Description & " is displayed when no parameter is passed"
'			Else
'				Environment("Fail") = "Error message - 'Invalid number of parameters' is not displayed when no parameter is passed on executing ClickColor method"
'			End If
'			Reporter.Filter = rfEnableAll
'
'	End Select
'
'	If Instr(1,Lcase(strCase),"invalid") < 1 and Instr(1,Lcase(strCase),"withoutparameter") <1  Then
'
'		Wait 4
'		'Generate a unique file name
'		strAfterClickImage = Environment("SystemTempDir") & "\" &  Replace(Replace(Replace(CStr(Now), "/", ""), " ", "_"), ":", "") &"new"& ".png"
'		
'		'Take screen shot  of image after swipe
'		Mobidevice("micclass:=MobiDevice").CaptureBitmap strAfterClickImage, True
'	
''		Set ObjAfterClick  = objFSO.GetFile(strAfterClickImage)
''		ObjAfterClick_Size  = CInt(Round(ObjAfterClick.Size / 1024 ))
'		blnFlag = CompareBitmap(strBeforeClickImage,strAfterClickImage)
'	
'		If VerifyClickColor = False  and blnFlag Then
'			VerifyClickColor = True
'		End If
'	End If
'
'	'Compare  two ScreenShots
'	If  VerifyClickColor Then
'		ReportStep "ClickColor" , Environment("Description"),Environment("ExpectedResult"),Environment("Pass"),"Pass"
'		Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass")
'	Else
'		ReportStep "ClickColor" , Environment("Description"),Environment("ExpectedResult"),Environment("Fail") &Space(2)&Err.Description ,"Fail"
'		Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail")
'	End If
'
'
'	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
'
'	Reporter.Filter = rfDisableAll
'    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
'			strStatus = "Not Run"
'			ReportStep "ClickColor" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
'	End If
'	Err.Clear
'	On Error GoTo 0
'End Function

'##########################################################################################################################
''@Function:		 VerifySelect
''@Description:		 Verify that Select method selects the specified item
''@Return Type:		 NA
''@Created By:		 Shweta
''@Modified by :     Saurabh , Manisha , Amit (07- june-2013), Manisha(19 June) for Mobidropdown
'@ Changes : 		 Added case for mobidropdown , MobiPicker
''@Created On:		 01-Feb-2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	 objTestObject 
''@Param Type:   	 Object
''@Param Drtn: 		 In
''@Param Desc: 		 Object for which the Select method needs to be tested
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:       strItem 
''@Param Type:       String
''@Param Drtn: 		 In
''@Param Desc: 	  	 The item that needs to be selected
'Case MobiList  : 	 Name of the element
'Case MobiDateTimePicker : String value containing date or time 
														'Date Format  str = "year,month,day, ,)
														'Time Format str = ", , ,hours,minutes)
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	strSelectCase 
''@Param Type:   	String
''@Param Drtn: 		In
''@Param Desc: 	    Case to be selected based on the scenario i.e. "selectstring"
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	objAfterSelection 
''@Param Type:   	Object
''@Param Drtn: 		In
''@Param Desc: 	    The  object that is displayed once the speciifed item gets selected
''--------------------------------------------------------------------------------------------------------------------------

''@Example: Set objTestObject =   MobiDevice("Device").MobiPage("Test").MobiList("List")
							'In case of  List
						' 	Set objImage = MobiDevice("Device").MobiPage("Test").MobiImage("ImageAfterSelection")
						' 	VerifySelect objTestObject , "selectstring","Argentina" , objImage

	'In case of MobiDatePicker
'strItem = "2014, 10 , 27, ,"
'VerifySelect objTestObject , strItem, ""

'In case of MobitimePicker

'strItem = ",,,18 ,54"
'VerifySelect objTestObject , strItem, ""

'VerifySelect objTestObject , "" , "' ( in case no selection from DateTimePicker is required)
''--------------------------------------------------------------------------------------------------------------------------

Function VerifySelect(objTestObject ,strSelectCase, strValue , objAfterSelection)
	Err.Clear
	Reporter.Filter = rfEnableAll
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	'Setting default value
	VerifySelect = False

	strItem = ""

	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	strObjectName =  Environment("MobiObjectClass")

	On Error Resume Next

	Select Case LCase(strObjectName)
		Case "mobilist" 
			Select Case LCase(strSelectCase)
				'@select any value with string or index
				case "selectstring", "selectindex"
				    Wait 1
					objTestObject.Select strValue
					Wait 3
					'@validating select
					If  objAfterSelection.Exist(7) Then
						VerifySelect = True
						Environment("Pass") = "Successfully selected  - " & strValue
					Else
						Environment("Fail") = "Unable to select  - " & strValue
						strItem = strValue
					End If 

				Case "selectnegativeindex"
					Err.Clear
					'@select with negative index value
					Reporter.Filter = rfDisableAll
					objTestObject.Select strValue
					Wait 3
					'@validating error message
					If Lcase(Err.Description) = "cannot identify the specified item of the object. confirm that the specified item is included in the object's item collection." Then
						VerifySelect = True
						Environment("Pass") = "Error message :- '" & Err.description & "' is displayed when negative index is passed " & strValue
						Err.Clear
					Else
						VerifySelect = False
						Environment("Fail") = "Actual Error message displayed is :- '" & Err.description
					End If
					Reporter.Filter = rfEnableAll

					
				Case "withoutparameter"
					'@select without any parameter
					Reporter.Filter = rfDisableAll
					objTestObject.Select
					'@validating error message
					If Lcase(Err.Description) = "invalid number of parameters." Then
						VerifySelect = True
						Environment("Pass") = "Error message :- '" & Err.description & "'  is displayed when No parameter is passed"
						Err.Clear
					Else
						VerifySelect = False
						Environment("Fail") = "Actual Error message displayed is :- '" & Err.description
					End If
					Reporter.Filter = rfEnableAll
					Err.Clear
			End Select

		Case "mobidropdown"  , "mobiwebdropdown"
			MobiDevice("micclass:=MobiDevice").Sync
			Select Case Lcase(strSelectCase)
				'@select value with index, string or by hash value
				Case "selectstring","selectindex","selecthashvalue"
					objTestObject.Select strValue
						
					If vartype(strValue) = 8  Then
						'objTestObject.WaitProperty  "text" , strValue , 35000
						If Instr(1,strValue,"#") =  0 Then
							'@validating string text selected
							wait 5
							MobiDevice("micclass:=MobiDevice").Sync
							If Lcase(objTestObject.getroproperty("text")) = Lcase(strValue) then
								VerifySelect = True
								Environment("Pass") = "Successfully selected value - " & strValue
							Else
								Environment("Fail") = "Unable to select value - " & strValue
							End if
						Else
							'@validating hash value selected
							'objTestObject.WaitProperty  "text" , strValue , 35000
							wait 4
							MobiDevice("micclass:=MobiDevice").Sync
							If Lcase(objTestObject.getroproperty("text")) = Lcase(objTestObject.getitem(Cint(Right(strValue,len(strValue)-1))))  then
								VerifySelect = True
								Environment("Pass") = "Successfully selected value for hash value - " & strValue
							Else
								Environment("Fail") = "Unable to select value for hash value - " & strValue
							End if
						End If
					Else
						If   LCase(Environment("MobiObjectClass")) = "mobiwebdropdown" Then
						wait 4
						MobiDevice("micclass:=MobiDevice").Sync
								'@validating index value is selected
								If  objTestObject.GetROProperty("selecteditemindex") = CStr(strValue) Then
									VerifySelect = True
									Environment("Pass") = "Successfully selected value for index value - " & strValue
								Else
									Environment("Fail") = "Unable to select value for index value - " & strValue
								End If
						Else		
							'@validating index value selected	
							wait 5
							MobiDevice("micclass:=MobiDevice").Sync
							If Lcase(objTestObject.getroproperty("text")) = Lcase(objTestObject.getitem(strValue)) then
								VerifySelect = True
									Environment("Pass") = "Successfully selected value for index value - " & strValue
								Else
									Environment("Fail") = "Unable to select value for index value - " & strValue
								End If
						End If
					End If 

				Case "selectnegativeindex","selectoutofindex"
					Err.Clear
					'@select for invalid input
					Reporter.Filter = rfDisableAll
					objTestObject.Select strValue
					If LCase(strSelectCase) = "selectnegativeindex" AND LCase(strObjectName) = "mobiwebdropdown" Then
						strErrorMessage = "Invalid argument passed: value cannot be negative"
					ElseIf LCase(strSelectCase) = "selectoutofindex" AND LCase(strObjectName) = "mobiwebdropdown" Then
						strErrorMessage = "Invalid argument passed: value exceeds number of items in list."
					Else
						strErrorMessage = "cannot identify the specified item of the object. confirm that the specified item is included in the object's item collection."  
					End If 

					If Instr(1 , LCase(strErrorMessage) , LCase(err.Description)) > 0 Then
						VerifySelect = True
						Environment("Pass") = "Error message - '" & strErrorMessage & " is displayed"
						Err.Clear
					Else
						Environment("Fail") = "Error message displayed -> "&err.Description &Space(2) &"expected was ->"&strErrorMessage
					End If
					Reporter.Filter = rfEnableAll

				Case "selectinvalidhashvalue"
					Err.Clear
					'@select for invalid input
					Reporter.Filter = rfDisableAll
					objTestObject.Select strValue
					'@validating error message
					If Lcase(Err.Description) = lcase("Input string was not in a correct format.") Then
						VerifySelect = True
						Environment("Pass") = "Error message - '" & Err.Description & " is displayed"
					Else
						Environment("Fail") = "Actual Error message displayed is :- '" & Err.description
					End If
					Reporter.Filter = rfEnableAll

				Case "withoutparameter"
                 Err.Clear
					'@select without parameter
					Reporter.Filter = rfDisableAll
					objTestObject.Select
					'@validating error message
					If Instr(1, Lcase(Err.Description),"invalid number of parameters" ) > 0 Then
						VerifySelect = True
						Environment("Pass") = "Error message -> invalid number of parameters"
						Err.Clear
					Else
						Environment("Fail") = "Actual Error message displayed is :- '" & Err.description
					End If
					Reporter.Filter = rfEnableAll
			End Select

		Case "mobipicker"
			Select Case LCase(strSelectCase)
				'@select with string
				Case "selectstring","selectstringwithwheel"
					If LCase(strSelectCase) <> "selectstringwithwheel" Then
						objTestObject.Select  strValue
						
					Else
						objTestObject.Select  strValue, Environment("WheelNumber")
					End If
					wait 5
					MobiDevice("micclass:=MobiDevice").Sync
					'@validating value is selected
					If  Instr( 1 ,  Lcase(objTestObject.GetROProperty("selection")) , Lcase(strValue) ) > 0 Then
						VerifySelect = True
						Environment("Pass") = "Successfully selected value - " & strValue
					Else
						Environment("Fail") = "Unable to select  value- " & strValue
					End If

				Case "selectindex","selectindexwithwheel"
					'@select value by index
					If LCase(strSelectCase) = "selectindex" Then
						objTestObject.Select  strValue
					Else
						objTestObject.Select  strValue, Environment("WheelNumber")
					End If
					wait 5
					MobiDevice("micclass:=MobiDevice").Sync
					'@validating value
					If objTestObject.GetItem(Cint(Right(strValue,len(strValue)-1) )) = objTestObject.getroproperty("selection") Then
						VerifySelect = True
						Environment("Pass") = "Successfully selected index value - " & strValue
					Else
						VerifySelect = False
						Environment("Fail") = "Unable to select index value - " & strValue
					End If
					

				Case "withoutparameter"
						Err.Clear
					'@select without parameter
					Reporter.Filter = rfDisableAll
					objTestObject.Select
					'@validating error message
					If  InStr(1 , LCase(Replace(Err.Description , " " ,"")), LCase(Replace("Invalid number of parameters." , " " ,""))) > 0  Then
						VerifySelect = True
						Environment("Pass") = "Error message - '" & Err.Description & "' is displayed"
					Else
						Environment("Fail") = "Actual Error message displayed is :- '" & Err.description
					End If
					Reporter.Filter = rfEnableAll
			End Select


		Case "mobidatetimepicker"
			Select Case LCase(strSelectCase)
				Case "stringinput" 
	                arrProp = Array() 
					strFailedFor = ""
					'Fetch values if  only date values are passed
					If Instr(1 , strValue , "-") > 0    AND Instr(1 , strValue , "t")  = 0 AND Instr(1 , strValue , ":") =  0  Then
						arrValueToSet = Split(strValue , "-")
						'Check if  first value is of year
						If Ubound(arrValueToSet)  = 2 Then
							intYear = arrValueToSet(0)
							intmonth = arrValueToSet(1)
							intDay = arrValueToSet(2)
							arrProps  = Array("year" , "month" , "day")
							arrValues = Array(intYear ,  intMonth , intDay)
								If Clng(intYear)  <= 0  OR Clng(intYear) > 9999 OR Cint(intMonth) <= 0 OR Cint(intMonth) > 12 OR Cint(intDay)  <= 0 OR  Cint(intDay) >31 Then
										strCase = "invalid"
								End If
						ElseIf 	Ubound(arrValueToSet)  = 1 Then
								If  Len(Replace(arrValueToSet (0), " " , "")) = 4 Then
									intYear = arrValueToSet(0)
									intMonth = arrValueToSet(1)
									arrProps  = Array("year" , "month")
									arrValues = Array(intYear , intMonth)
										If CInt(intYear)  <= 0  OR CInt(intYear) > 9999 OR Cint(intMonth) <= 0 OR Cint(intMonth) > 12 Then
											strCase = "invalid"
										End If
								Else
									intMonth = arrValueToSet(0)
									intDay = arrValueToSet(1)
									arrProps  = Array("month" , "day")
									arrValues = Array(intMonth , intDay)
									If  Cint(intMonth) <= 0 OR Cint(intMonth) > 12 OR Cint(intDay)  <= 0 OR  Cint(intDay) >31 Then
										strCase = "invalid"
									End If
								End If
						End If

					ElseIf Instr(1 , strValue , "-") = 0    AND Instr(1 , strValue , "t")  = 0 AND Instr(1 , strValue , ":") >  0  Then
						arrValueToSet = Split(strValue , ":")
						If Ubound(arrValueToSet)  = 2 OR Ubound(arrValueToSet)  = 1 Then
							intHour = arrValueToSet(0)
							intMinute = arrValueToSet(1)
							arrProps  = Array("hour" , "minutes")
							arrValues = Array(intHour , intMinute)
							If Len(intHour) = 1 OR  Cint(intHour) <= 0 OR Cint(intHour) > 24 OR Len(intMinute) = 1 OR Cint(intMinute) <= 0 OR Cint(intMinute) >60  Then
								strCase = "invalid"
							End If
						End If	
					Else
						arrValueToSet = Split(strValue , "-")
						intYear = arrValueToSet(0)
						intMonth = arrValueToSet(1)
						str = arrValueToSet(2)
						arrValueToSet = Split(str, "t")
						intDay = arrValueToSet(0)
						str = arrValueToSet(1)
						arrValueToSet = Split(str , ":")
						intHour = arrValueToSet(0)
						intMinute = arrValueToSet(1)
						'arrProps = Array("year" , "month" , "day" , "hour" , "minutes")
						'arrValues = Array(intYear , intMonth , intDay , intHour , intMinute)
						
						If objTestObject.GetROProperty("resourcename")="timePicker" Then
							arrProps = Array("hour" , "minutes")
							arrValues = Array(intHour , intMinute)
						Else
							arrProps = Array("year" , "month" , "day")
							arrValues = Array(intYear , intMonth , intDay)
						End If
						
					End If

					'Scenario for  non leap year and  selcting 29 days in february
					intYear = CInt(intYear)
					If TypeName(intYear) = "Integer" Then
						IsLeapYear = ((intYear Mod 4 = 0) And _
						  (intYear Mod 100 <> 0) Or (intYear Mod 400 = 0))
					End If
					If Not IsLeapYear AND Cint(intMonth) = 2  AND Cint(intDay) > 28 Then
						strCase = "invalid"
					End If
					If Instr(1, strValue , "-") = 0  AND Instr(1, strValue , ":") = 0 Then
						strCase = "invalid"
					End If
					If  Len(intHour) = 1 OR Len(intMinute) = 1  Then
							strCase = "invalid"
					End If
					'Execute function
					objTestObject.Select  strValue
					wait 2
					MobiDevice("micclass:=MobiDevice").Sync
					'Check if there is only one value or negative scenarios
					If (Instr(1, strValue , "-") = 0  AND Instr(1, strValue , ":") = 0)  OR  strCase = "invalid" Then
						strErrorMessage =  LCase("String was not recognized as a valid DateTime.")
						If Ubound(arrProps) >= 0  Then
							Environment("Pass") = "Error Message thrown on passing properties " &Space(2) & Join(arrProps , ",")& Space(2) &"with values" &Space(2) & Join(arrValues , ", ") &Space(2) & "was " &Space(2) & Err.Description
							Environment("Fail") = "Error Message thrown on passing properties " &Space(2) & Join(arrProps , ",")& Space(2) &"with values" &Space(2) & Join(arrValues , ", ") &Space(2) & "was " &Space(2) & Err.Description
						Else
							Environment("Pass") = "Error Message thrown on passing single entity -> " & strValue & Space(2) & "was " & Space(2) & Err.Description
							Environment("Fail") =  "Expected error Message  on passing single entity was  -> " & strErrorMessage  & Space(2) & "but actual message thrown was  " & Space(2) & Err.Description
						End If 
						If  Instr(1, LCase(Err.Description) ,  strErrorMessage ) > 0 Then
							VerifySelect  = True
							Err.Clear
					'		ReportStep "Select " , Environment("Description") , Environment("ExpectedResult")  , Environment("Pass") , "Pass"
					'	Else
					'		ReportStep "Select " , Environment("Description") , Environment("ExpectedResult")  , Environment("Fail") , "Fail"
						End If
					Else
						For i = 0 to Ubound(arrProps)
							If Left(Replace(arrValues(i), " " , "") , 1 ) = 0 Then	
								arrValues(i)  = Replace(arrValues(i), " " , "") 
								arrValues(i)  = Mid(arrValues(i) , 2 , 1)
							End If
							If Cint(Replace(arrValues(i), " " , ""))  <>  objTestObject.GetROProperty(arrProps(i)) Then
								strFailedFor = strFailedFor & arrProps(i) & ";"
							End If
						Next
						If strFailedFor = ""  AND Len(Err.Description) = 0 Then
							VerifySelect  = True
							Environment("Pass")  = "Successfully selected string value as ->"& strValue
						Else
							Environment("Fail") =  "Failed to select string value  ->"& strValue & Space(2) & Err.Description
					'		ReportStep "Select " , Environment("Description") , Environment("ExpectedResult")  ,"Successfully selected string value as ->"& strValue, "Pass"
					'	Else
					'		ReportStep "Select " , Environment("Description") , Environment("ExpectedResult")  ,"Failed to select string value  ->"& strValue & Space(2) & Err.Description, "Pass"
						End If
					End If


				Case "integerinput"
				
					arrParameters  = Split(Replace(strValue , " " , "") , ",")
					For i = 0 to UBound(arrParameters)
						If arrParameters(i) = "" Then
							'Assigning optional value 
							arrParameters(i) = "-1"
						End If
					Next
					'Assigning Values to parameters
					intYear = CLng(arrParameters(0))
					intMonth = CLng(arrParameters(1))
					intDay =  CLng(arrParameters(2))
					intHour = CLng(arrParameters(3))
					intMinute = CLng(arrParameters(4))

					Reporter.Filter = rfDisableAll
					'Select  Values on DateTimePicker
					objTestObject.Select intYear , intMonth , intDay , intHour , intMinute
					If  intYear =0 OR intYear > 9999 OR intMonth = 0 OR intMonth > 12  OR intDay = 0 OR intDay > 31 OR intHour = 0 OR intHour > 24 OR intMinute = 0 OR intMinute > 60 Then
						strSelectCase = "invalid"
					Else
						strSelectCase = "valid"
					End If
					arrProps = Array(intYear , intMonth , intDay , intHour , intMinute)
					For  i = 0 to Ubound(arrProps)
						If arrProps(i) < -1 Then
							strSelectCase  = "invalid"
							Exit For
						End If
					Next

					intYear = CInt(intYear)
					If TypeName(intYear) = "Integer" Then
						IsLeapYear = ((intYear Mod 4 = 0) And _
						(intYear Mod 100 <> 0) Or (intYear Mod 400 = 0))
					End If

					If   Not  IsLeapYear  AND Cint(intMonth) = 2  AND Cint(intDay) > 28 Then
						strSelectCase = "invalid"
					End If


					If LCase(strSelectCase) = "valid" Then
						'Validating selection
						arrDateTimeProp =Array ("year" , "month" , "day" , "hour" , "minutes")
						For i = 0 to UBound(arrDateTimeProp)
							wait 1
							MobiDevice("micclass:=MobiDevice").Sync
							ValueToVerify = objTestObject.GetROProperty(arrDateTimeProp(i))
							If  CLng(ValueToVerify) <>  CLng(arrParameters(i)) Then
								If   arrParameters(i)  <>  "-1" Then
									strItem = strItem & arrDateTimeProp(i)  & " ," 
								End If 
							End If					
						Next
						If strItem = "" Then
							VerifySelect = True
							Environment("Pass") = "Date is selected with year - " & arrParameters(0) & " and month - " & arrParameters(1) & " and day - " & arrParameters(2) & " and hour - " & arrParameters(3) & " and minute - " & arrParameters(4)
						Else
							Environment("Fail") = "Unable to select date from user input - " & Join(arrParameters,",")
						End If
					ElseIf LCase(strSelectCase) = "invalid" Then
						'@validating error message for invalid input
						If Instr(1,Lcase(Err.Description),"cannot identify the specified item of the object. confirm that the specified item is included in the object's item collection") > 0 Then
							VerifySelect = True
							Environment("Pass") = "Error message - '" & Err.description & "' is displayed"
							Err.Clear
						Else
							VerifySelect = False
							Environment("Fail") = "Actual Error message displayed is :- '" & Err.description
						End If
					End If
			Reporter.Filter = rfEnableAll
			End Select

		Case "mobisegment"
			Select Case Lcase(strSelectCase)
				Case "withindex"
					objTestObject.Select strValue
					objTestObject.WaitProperty  "selecteditemindex"  , strValue , 8000
					If objTestObject.getroproperty("selecteditemindex") = strValue and Err.description = "" Then
						VerifySelect = True
						Environment("Pass") = "Successfully selected value for index - " & strValue
					Else
						VerifySelect = False
						Environment("Fail") = "Unable to select value for index : " & strValue
					End If

				Case "withhashvalue"
					objTestObject.Select strValue
					objTestObject.WaitProperty  "selecteditemindex"  , strValue , 8000
					If objTestObject.getroproperty("selecteditemindex") = Cint(Right(strValue,len(strValue)-1)) and Err.description = "" Then
						VerifySelect = True
						Environment("Pass") = "Successfully selected value for index - " & strValue
					Else
						VerifySelect = False
						Environment("Fail") = "Unable to select value for index : " & strValue
					End If

				Case "withoutparameter"
Err.Clear
					Reporter.Filter = rfDisableAll
					objTestObject.Select
					strErrorMessage = "invalid number of parameters"
					If Instr(1 , LCase(strErrorMessage) , LCase(err.Description)) > 0 Then
						VerifySelect = True
						Environment("Pass") = "Error message - '" & Err.description & "' is displayed"
						Err.Clear
					Else
						VerifySelect = False
						Environment("Fail") = "Actual Error message displayed is :- '" & Err.description
					End If
					Reporter.Filter = rfEnableAll

				Case "withoutofindex"
                    Err.Clear
					Reporter.Filter = rfDisableAll
					strValue = objTestObject.GetROProperty("itemscount")
					objTestObject.Select Cint(strValue)
					strErrorMessage = "Index is zero-based and must not exceed total number of segments in the control"
					If Instr(1 , LCase(strErrorMessage) , LCase(err.Description)) > 0 Then
						VerifySelect = True
						Environment("Pass") = "Error message - '" & Err.description & "' is displayed"
						Err.Clear
					Else
						VerifySelect = False
						Environment("Fail") = "Actual Error message displayed is :- '" & Err.description
					End If
					Reporter.Filter = rfEnableAll

				Case "withnegativeindex"
                    Err.Clear
					Reporter.Filter = rfDisableAll
					objTestObject.Select -1
					strErrorMessage = "invalid parameter. must be greater or equal than zero"
					If Instr(1 , LCase(strErrorMessage) , LCase(err.Description)) > 0 Then
						VerifySelect = True
						Environment("Pass") = "Error message - '" & Err.description & "' is displayed"
						Err.Clear
					Else
						VerifySelect = False
						Environment("Fail") = "Actual Error message displayed is :- '" & Err.description
					End If
					Reporter.Filter = rfEnableAll

				Case "withindexasstring"
                    Err.Clear					
                    Reporter.Filter = rfDisableAll
					objTestObject.Select Cstr(strValue)
					strErrorMessage = "cannot identify the specified item of the object. confirm that the specified item is included in the object's item collection."
					If Instr(1 , LCase(strErrorMessage) , LCase(err.Description)) > 0 Then
						VerifySelect = True
						Environment("Pass") = "Error message - '" & Err.description & "' is displayed"
						Err.Clear
					Else
						VerifySelect = False
						Environment("Fail") = "Actual Error message displayed is :- '" & Err.description
					End If
					Reporter.Filter = rfEnableAll
			End Select

	End Select

	'Check for the existence of the image that should be displayed after selection
	If  VerifySelect AND Err.Description = "" Then
		ReportStep "Select" , Environment("Description"),Environment("ExpectedResult"),Environment("Pass") , "Pass"
		Reporter.ReportEvent micPass,Environment("Description"), Environment("Pass")
	Else
		ReportStep "Select" , Environment("Description"),Environment("ExpectedResult"),Environment("Fail")&Space(2)&Err.Description , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") &Space(2)&Err.Description
	End If
	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""

	Reporter.Filter = rfDisableAll
    	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "Select" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function

'##########################################################################################################################
''@Function:		VerifyScroll
''@Description:		Verify that Scroll method executes the Scroll gesture in the specified direction
''@Return Type:		NA
''@Created By:		Manisha
''@Created On:		03-Sep-2012
''@Modified By:		Amit Sharma (07 - june - 2013)
''@Modified By:		Shweta Bhati  (1st August 2013)
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	objTestObject 
''@Param Type:   	Object
''@Param Drtn: 		In
''@Param Desc: 		Object for which the Scroll method needs to be tested
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:     	strDirOfScroll 
''@Param Type:      String
''@Param Drtn: 		In
''@Param Desc: 	   	The direction towards the part of the control to be made visible after scroll
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	objImageAfterScroll 
''@Param Type:   	Object
''@Param Drtn: 		In
''@Param Desc: 		The image object that is displayed once the scroll gesture in the specified direction is executed
''--------------------------------------------------------------------------------------------------------------------------

''@Example: Set objTestObject = MobiDevice("Device").MobiPage("Scroll").MobiElement("ElementLR")
						' Set ImgLeft = MobiDevice("Device").MobiPage("Scroll").MobiImage("ImageL")
						' VerifyScroll objTestObject , "Left" , ImgLeft
''--------------------------------------------------------------------------------------------------------------------------
Function VerifyScroll(objTestObject , strDirOfScroll , objImageAfterScroll)
	On Error Resume Next
    
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	Reporter.Filter = rfDisableAll

	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	VerifyScroll = False
	blnFlag = False

	If  LCase(Environment("MobiObjectClass")) = "mobiwebview" Then
		intY1 = objImageAfterScroll.GetROProperty("Y")
	End If

	'Execute the scroll method  in the specified direction 
	Select Case LCase(strDirOfScroll)

		Case "left"
			objTestObject.Scroll eLEFT
		Case "right"
			objTestObject.Scroll eRIGHT
		Case "top"
			objTestObject.Scroll eTOP
			wait 4
		Case "bottom"
			objTestObject.Scroll eBOTTOM
			wait 4
		Case "topwithwheel"
			objTestObject.Scroll eTOP,0
		Case "bottomwithwheel"
			objTestObject.Scroll eBOTTOM,0
		Case "bottomwithnegativewheel", "topwithnegativewheel"
			If LCase(strDirOfScroll) = "bottomwithnegativewheel" Then
				objTestObject.Scroll eBOTTOM,-2
			Else
				objTestObject.Scroll eTOP,-2
			End If
			If Lcase(Err.Description) = "invalid picker wheel number assignment" Then
				blnFlag = true
			Else
				blnFlag = false
			End If
			strErrText = Err.Description
			Err.Clear

		Case "withoutparameter"
			objTestObject.Scroll

			If Lcase(Err.Description) =  "invalid number of parameters on objectruntimewebview" Then
				blnFlag = true
			Else
				blnFlag = false
			End If
			strErrText = Err.Description
			Err.Clear

	End Select
'#######################################################################

'Code added for MobiIImage
	If Not blnFlag Then
		If   objTestObject.GetTOProperty("micclass") = "MobiImage" Then
			strText = objTestObject.GetVisibleText
			If Instr(1, Trim(strText ), Trim(objImageAfterScroll)) > 0 Then
				blnFlag = True
			End If
			'@validate in case of Mobipicker
		ElseIf objTestObject.GetTOProperty("micclass") = "MobiPicker" Then
			arrText = split(objTestObject.GetTOProperty("all items"),",")
			If Instr(1,LCase(strDirOfScroll),"top") <> 0 and objTestObject.GetTOProperty("selection") = arrText(0) Then
				blnFlag = True
			ElseIf Instr(1,LCase(strDirOfScroll),"bottom") <> 0 and objTestObject.GetTOProperty("selection") = arrText(Ubound(arrText))Then
				blnFlag = False
			End If
		ElseIf   LCase(Environment("MobiObjectClass")) = "mobiwebview" Then
			objImageAfterScroll.WaitProperty "Visible" , False , 6000
			intY2 = objImageAfterScroll.GetROProperty("Y")
			If intY1 <>  intY2 Then
				blnFlag = True
			End If
		Else
			blnFlag = objImageAfterScroll.Exist(20)
		End If
	End If

	Environment("Pass") = "Scroll gesture is executed in the specified direction : " & strDirOfScroll
	Environment("Fail") = "Scroll gesture not executed in the specified direction : " & strDirOfScroll &Space(2) & Err.Description
'#######################################################################
	'Check for the existence of the image that should be displayed after scroll completes
	'If  objImageAfterScroll.Exist(2)  Then

	'Case added for negative scenarions
	If  Instr(1, LCase(strDirOfScroll),"negative") > 0 or  Instr(1, LCase(strDirOfScroll),"without") > 0 Then
		If strErrText <> "" Then
			Flag = true
			Environment("Pass") = "Error message:- '" & strErrText & "' is displayed successfully"
		Else
			Flag = false
			Environment("Fail") = "Scroll is not working for " & strDirOfScroll
		End If
	End If

	Reporter.Filter = rfEnableAll

	If blnFlag AND Err.Description = "" Then
		VerifyScroll = True
		ReportStep  "Scroll" , Environment("Description") , Environment("ExpectedResult") , Environment("Pass") , "Pass"
		Reporter.ReportEvent micPass,Environment("Description") , Environment("Pass") 
	Else
		ReportStep  "scroll" , Environment("Description") , Environment("ExpectedResult") , Environment("Fail") , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") &Space(2)&Err.Description
		VerifyScroll = False
	End If

    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "Scroll" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
	Err.Clear
	On Error GoTo 0
End Function

'##########################################################################################################################
''@Function:		VerifyType
''@Description:		Verify that Type method  types  the specified text 
''@Return Type:		NA
''@Created By:		Shweta
''@Created On:		08/02/13
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	objTestObject 
''@Param Type:   	Object
''@Param Drtn: 		In
''@Param Desc: 		Object for which the Type method needs to be tested
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:     	strValueToSet 
''@Param Type:      String
''@Param Drtn: 		In
''@Param Desc: 	  	The text that needs to be typed
''--------------------------------------------------------------------------------------------------------------------------
''@Example:  Set objTestObject =  MobiDevice("Device")
			'VerifyType  objTestObject , "text" 
''--------------------------------------------------------------------------------------------------------------------------

Function VerifyType(objTestObject  , strValueToSet)
	On Error Resume Next
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
    Reporter.Filter = rfEnableAll
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	
	'Set deafult return value
	VerifyType = False
  	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	Set objEdit = Description.Create
	objEdit("micclass").Value  = "MobiEdit"

	Set arrEdit  = objTestObject.ChildObjects(objEdit)

	If arrEdit.Count  <> 0 Then
		arrEdit(0).Clear
		arrEdit(0).Click
		Wait 3
		objTestObject.Type strValueToSet
		arrEdit(0).WaitProperty  "text" , strValueToSet  , 30000
		wait 2
		strSetValue = arrEdit(0).GetROProperty("text")

		If LCase(strSetValue) = LCase(strValueTOSet)  AND Len(Err.Description) = 0 Then
			VerifyType = True
			ReportStep "Type" , Environment("Description") , Environment("ExpectedResult") ,  "Type executed and Set value :" &strValueToSet &" on " &  Environment("MobiObjectClass") , "Pass"
			Reporter.ReportEvent micPass, Environment("Description"), "Type executed and Set value :" &strValueToSet &" on " &  Environment("MobiObjectClass")
		Else
			ReportStep "Type" , Environment("Description") , Environment("ExpectedResult") ,"Failed to type value : " & strValueToSet &" "&Err.Description , "Fail"
			Reporter.ReportEvent micFail, Environment("Description"), "Failed to type value : " & strValueToSet &" "&Err.Description
		End If 
	End If 
	
	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "Type" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function


'##########################################################################################################################
''@Function:			VerifyActivate
''@Description:			Tests the functionality of Activate method for the passed in MobiDevice
''@Return Type:			Boolean
''@Created By:			Naveen
''@ Modified By:       Saurabh (6/6/2013)
''@Created On:			4-Sept-2012
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	MobiDevice object 
''--------------------------------------------------------------------------------------------------------------------------
''@Example: Set objTestObjectDevice = MobiDevice("Device")
''					  blnResult = VerifyActivate(objTestObjectDevice)
''--------------------------------------------------------------------------------------------------------------------------

Function VerifyActivate(objTestObject)
   On Error Resume Next 
   Environment("TestStepCount")  = Environment("TestStepCount")  + 1
    Reporter.Filter = rfEnableAll
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	VerifyActivate = False

	Set objTrustWin = Window("regexpwndtitle:=deviceViewer")

	''Check whether window is already activated or not
	If  objTrustWin.Exist(2) and objTrustWin.GetROProperty("x") >0Then
		objTestObject.activate
		wait 2
		intX = objTrustWin.GetROProperty("x")
		Environment("Pass") = "Activate method works fine if device is already activated"
		Environment("Fail") = "Activate method failed to activate device if device is already activated"
	Else
		objTestObject.activate
		wait 2
		intX = objTrustWin.GetROProperty("x")
		Environment("Pass") = "Activate method activates the device if device is currently minimized"
		Environment("Fail") =  "Activate method failed to activate the device if device is currently minimized"
	End If

	If intx > 0 AND Len(Err.Description) = 0 AND Err.Description = "" Then
		ReportStep  "Activate" , Environment("Description") , Environment("ExpectedResult") , Environment("Pass") , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass")
		VerifyActivate = True
	Else
		ReportStep  "Activate" , Environment("Description") , Environment("ExpectedResult") , Environment("Fail") , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") &Space(2)&Err.Description
		VerifyActivate =  False
	End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "Activate" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function

'##########################################################################################################################
''@Function:			VerifyGetTextLocation
''@Description:			Tests the functionality of GetTextLocation method for the passed in object
''@Return Type:			Boolean
''@Created By:			Naveen
''@Created On:			4-Sept-2012
''@Modified By:			Shweta
''@Modified On : 		4-June-2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	Object for which the GetTextLocation method needs to be tested
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  strText 
''@Param Type:   String
''@Param Drtn: 		In
''@Param Desc: 	Text to be located
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  blnTextExists 
''@Param Type:   Boolean
''@Param Drtn: 		In
''@Param Desc: 	True if text exists and false if text is not there
''--------------------------------------------------------------------------------------------------------------------------
''@Example: Set objTestObjectDevice = MobiDevice("Device").MobiPage("NewMessages").MobiElement("Element_HomeSceen)
''					  blnResult = VerifyGetTextLocation(objTestObject, "Shop", True)
''--------------------------------------------------------------------------------------------------------------------------

Function VerifyGetTextLocation(objTestObject, strText, blnTextExists)
   On Error Resume Next
   Environment("TestStepCount")  = Environment("TestStepCount")  + 1
    Reporter.Filter = rfEnableAll
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	VerifyGetTextLocation = False

	'Execute method
	Set objRect = objTestObject.GetTextLocation(strText)
	'Case :  Blank Text 
	If strText = ""  Then
		strErrorMessage = "Invalid number of parameters."
		Environment("Pass") = "Error thrown on passing blank text :"&Err.Description
		Environment("Fail")  = "Error thrown :"&Err.Description &Space(2) &"Expected was : "& strErrorMessage
		If Instr(1 , LCase(Replace( strErrorMessage , " " , "")) , LCase(Replace(Err.Description , " " , "")))  > 0Then
				VerifyGetTextLocation = True
		End If
	Else
		'Case : When object exists
		If blnTextExists Then
			If objRect.Right > 0 AND objRect.Bottom > 0 Then
				VerifyGetTextLocation = True
			End If 
		Else
			'Case when object doesnot exists
			If objRect.Right = 0 AND objRect.Bottom = 0 Then
				VerifyGetTextLocation = True
			End If
		End If
				Environment("Pass") = "Returned  Top: "& objRect.Top&" " &"Bottom :"&objRect.Bottom&" " &"Left :"&objRect.Left &" " &"Right  :" &objRect.Right  &" " &"When object exist is : "& blnTextExists
				Environment("Fail")  = "Returned  Top: "&objRect.Top&" "  &"Bottom :"&objRect.Bottom&" " &"Left :"&objRect.Left &" " &"Right  :" &objRect.Right  &" " &"When object exist is : "& blnTextExists
	End If 

	If  VerifyGetTextLocation AND Err.Description = "" Then
			ReportStep "GetTextLocation" , Environment("Description") , Environment("ExpectedResult") ,Environment("Pass") , "Pass"
			Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass")
	Else
			ReportStep  "GetTextLocation" , Environment("Description") , Environment("ExpectedResult") ,Environment("Fail") , "Fail"
			Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") &Space(2)&Err.Description
	End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "GetTextLocation" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If

	Err.Clear
	On Error GoTo 0
End Function

'##########################################################################################################################
''@Function:		VerifyGetVisibleText
''@Description:		Verify GetVisibleText functionality for MobiButton, MobiEdit, MobiElement, MobiDropdown, MobiSwitch, MobiImage, MobiLink, MobiPage, MobiDevice
''@Return Type:		String
''@Created By:		Sushant
''@Created On:		04-Sept-2012
''@Modified By:     Shweta
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	Object for which the GetVisibleText method needs to be tested
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  blnFlag 
''@Param Type:   Boolean
''@Param Drtn: 		In
''@Param Desc: 	 Pass  True in case of fetching visibletext with co-ordinates False otherwise.
''--------------------------------------------------------------------------------------------------------------------------

''@Example: Set objTestObject = MobiDevice("Device").MobiPage("Page").MobiDropdown("AllCuisines")
''			blnResult = VerifyGetVisibleText(objTestObject, True)
''			blnResult = VerifyGetVisibleText(objTestObject, False)
''--------------------------------------------------------------------------------------------------------------------------

Function VerifyGetVisibleText(objTestObject, blnFlag)
	On Error Resume Next
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
   	Reporter.Filter = rfEnableAll
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	VerifyGetVisibleText = False

	If  blnFlag Then

		intLeft = 0
		intTop = 0
		intRight = CInt(objTestObject.GetROProperty("width"))
		intRight  = Abs(intRight -3)

		intBottom = CInt(objTestObject.GetROProperty("height"))
		intBottom = Abs(intBottom - 3)

		'Execute method with coordinates
		strStringReturned = objTestObject.GetVisibleText(intLeft, intTop, intRight, intBottom) 

		'Report results
	'	If Instr(1,Replace(strStringReturned , " " , "") ,strString) >0 Then
		If Len(strStringReturned) > 0  AND Err.Description = "" Then
			VerifyGetVisibleText = True
			ReportStep  "GetVisibleText" ,  Environment("Description") , Environment("ExpectedResult"), "GetVisibleText method with coordinates Returned text: " & strStringReturned , "Pass"
			Reporter.ReportEvent micPass, Environment("Description"), "GetVisibleText method with coordinates Returned text: " & strStringReturned
		Else
			VerifyGetVisibleText = False			
			ReportStep  "GetVisibleText" ,  Environment("Description") , Environment("ExpectedResult"), "GetVisibleText method with coordinates Returned text: " & strStringReturned , "Fail"
			Reporter.ReportEvent micFail, Environment("Description"), "GetVisibleText method with coordinates Returned text: " & strStringReturned &Space(2)&Err.Description
		End If

		Else

		'Execute method without coordinates
		strStringReturned = objTestObject.GetVisibleText()

		'Report results
		'If  Instr(1,strStringReturned,strString) >0 Then
		If  Len(strStringReturned) > 0 AND Err.Description = "" Then
			VerifyGetVisibleText = True
			ReportStep  "GetVisibleText" ,  Environment("Description") , Environment("ExpectedResult"), "GetVisibleText method without coordinates Returned text: " & strStringReturned , "Pass"
			Reporter.ReportEvent micPass, Environment("Description"), "GetVisibleText method without coordinates Returned text: " & strStringReturned
		Else
			ReportStep  "GetVisibleText" ,  Environment("Description") , Environment("ExpectedResult"), "GetVisibleText method without coordinates Returned text: " & strStringReturned , "Fail"
			Reporter.ReportEvent micFail, Environment("Description"), "GetVisibleText method without coordinates Returned text: " & strStringReturned &Space(2)&Err.Description
		End If
	
	End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "GetVisibleText" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function

'##########################################################################################################################
''@Function:    VerifyMinimize
''@Description: Verify  whether  device window  has minimized or not
''@Return Type:	boolean
''@Created By: Shweta
''@Modified by: Saurabh (6/6/2013)
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   String
''@Param Drtn: 		In
''@Param Desc: 	Objectname
''--------------------------------------------------------------------------------------------------------------------------
''@Example:  'VerifyMinimize objTestObject 

''Set objTestObject = Mobidevice("Device")
'------------------------------------------------------------------------------------------------------------------------


Function VerifyMinimize(objTestObject)
   Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	On Error Resume Next
    Reporter.Filter = rfEnableAll
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	

	Set objTrustWin = Window("regexpwndtitle:=deviceViewer")

	''Check whether window is already activated or not
	If  objTrustWin.Exist(2) and objTrustWin.GetROProperty("x") >0Then
		objTestObject.minimize
		wait 2
		intX = objTrustWin.GetROProperty("x")
		Environment("Pass") = "minimize method works fine if device is already activated"
		Environment("Fail") = "minimize method failed to Minimize device if device is already activated"
	Else
		objTestObject.minimize
		wait 5 
		intX = objTrustWin.GetROProperty("x")
		Environment("Pass") = "minimize method minimize the device if device is currently minimized"
		Environment("Fail") =  "minimize method failed to minimize the device if device is currently minimized"
	End If

	'Reporting
	If intx < 0 AND Len(Err.Description) = 0 Then
		ReportStep  "Minimize" , Environment("Description") , Environment("ExpectedResult") , Environment("Pass") , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass")
		VerifyMinimize = True
	Else
		ReportStep  "Minimize" ,  Environment("Description") , Environment("ExpectedResult") , Environment("Fail") , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") &Space(2)&Err.Description
		VerifyMinimize =  False
	End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "Minimize" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function


'##########################################################################################################################
'''@Function:  VerifyToString
'''@Description: Verify  Test Object  name
'''@Return Type:	String
'''@Created By: Shweta
'''@Created On: 
'''--------------------------------------------------------------------------------------------------------------------------
'''@Param Name:  objTestObject 
'''@Param Type:   String
'''@Param Drtn:   In
''@Param Desc: 	Objectname
''--------------------------------------------------------------------------------------------------------------------------
''@Example:  'VerifyToString objTestObject 

''Set objTestObject = Mobidevice("Device").MobiEdit("Sign In")
''--------------------------------------------------------------------------------------------------------------------------

Function VerifyToString(objTestObject)

   On Error Resume Next
	Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	Reporter.Filter = rfEnableAll
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""

		'Execute ToString method
		strValue = objTestObject.ToString

		'Set default value to false
		VerifyToString  = False
		 arr = Split(strValue , " ")

		 For i = 0 to UBound(arr)
			If LCase(arr(i))  = "object" Then
					VerifyToString = True
					Exit For
			End If
		 Next

		If VerifyToString  AND Len(Err.Description) = 0 Then
			ReportStep  "ToString" , Environment("Description"), Environment("ExpectedResult") , "Value returned"&Space(2)&strValue , "Pass"
			Reporter.ReportEvent micPass, Environment("Description"), "Value returned"&Space(2)&strValue 
		Else
			ReportStep  "ToString" , Environment("Description"), Environment("ExpectedResult") , "Value returned"&Space(2)&strValue &Space(2)&Err.Description , "Fail"
			Reporter.ReportEvent micFail, Environment("Description"), "Value returned"&Space(2)&strValue &Space(2)&Err.Description 
		End If
	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll

    	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "ToString" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If

	Err.Clear
	On Error GoTo 0
End function


'#######################################################################################################################################
''@Function:			VerifyGetScrollText
''@Description:			Tests the functionality of VerifyGetScrollText method for the passed in object
''@Created By:			Saurabh Ahuja
''@Created On:			6-Sep-2012
''@Modified By:			Shweta
''						Manisha(for reporting)
''                      Saurabh (Added negative scenerios and case for mobipicker)
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	Object for which the GetScrollText method needs to be tested
''--------------------------------------------------------------------------------------------------------------------------
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  BlnValue 
''@Param Type:   Boolean
''@Param Drtn: 		In
''@Param Desc: 	True if  element added is scrollable
''--------------------------------------------------------------------------------------------------------------------------
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  intwheelcount 
''@Param Type:   int
''@Param Drtn: 		In
''@Param Desc: 	Wheel count passed
''--------------------------------------------------------------------------------------------------------------------------

''@Example: Set objTestObject = MobiDevice("Device").MobiPage("NewMessages").MobiElement("Button_Cancel")
''					  VerifyGetScrollText(objTestObject,BlnValue)
''                    VerifyGetScrollText(objTestObject,BlnValue,-2)
''                    VerifyGetScrollText(objTestObject,BlnValue,2)
''                    VerifyGetScrollText(objTestObject,BlnValue,0)
''                    VerifyGetScrollText(objTestObject,BlnValue,0)''                    
''                    VerifyGetScrollText(objTestObject,BlnValue,"3")
						
''--------------------------------------------------------------------------------------------------------------------------
Function VerifyGetScrollText(objTestObject, strTextToMatch, BlnValue,wheelcount , strSelectCase)

    
	On Error Resume Next
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Reporter.Filter = rfEnableAll
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	VerifyGetScrollText = False
	blnFlag = false

	Select Case LCase(Environment("MobiObjectClass"))

	Case "mobipicker"
		Select Case Lcase(strSelectCase)
			Case "withvalidwheel"
				If  Instr(1 ,  LCase(objTestObject.getscrolledtext(wheelcount)), Lcase(strTextToMatch)) > 0 Then
					blnFlag =  True
					Environment("Pass") = "Getscrolled text method returned text for valid wheel count : " & wheelcount 
				 Else 
					Environment("Fail") = "Getscrolled text method failed to returned text for valid wheel count : " & wheelcount 
				End if
              				
			Case "withoutwheelcount"
			If  Instr(1 ,  LCase(objTestObject.getscrolledtext(wheelcount)), Lcase(strTextToMatch)) > 0 Then
					blnFlag =  True
					Environment("Pass") = "Getscrolled text method returned text when no wheel count is passed"
				Else
					Environment("Fail") = "Getscrolled text method failed to returned text when no wheel count is passed"	
				End if
				
			Case "withnegativewheel"
				err.clear
				StrScroll = objTestObject.GetScrolledText(wheelcount)
				
				If   err.description  = "Index was outside the bounds of the array." Then
					blnFlag =  True
					Environment("Pass") = "Getscrolled text throws an error:" & err.description & "when negative wheel number is passed"
				Else
					Environment("Fail") = "Getecrolled text trowns invalid error :" & err.description & "when negative wheel number is passed"				
				End If


			Case "outofindexwheel"
				err.clear
				StrScroll = objTestObject.GetScrolledText(wheelcount)

				If  err.description  = "The supplied wheel number is invalid as exceeds the number of wheels in device" Then
					blnFlag =  True
					Environment("Pass") = "Getscrolled text throws an error:" & err.description & "when outofindexwheel  number is passed"
				Else
					Environment("Fail") = "Getecrolled text trowns invalid error :" & err.description & "when outofindexwheel number is passed"
				End If		
				Err.Clear

			Case "stringvaluepassed"
				err.clear
				StrScroll = objTestObject.GetScrolledText(wheelcount)
				If  InStr(1 , LCase(Replace(Err.Description , " " ,"")), LCase(Replace("Type mismatch" , " " ,""))) > 0  Then
					blnFlag =  True
					Environment("Pass") = "Getscrolled text throws an error:" & err.description & "when string value is  passed"
				Else
					Environment("Fail") = "Getecrolled text trowns invalid error :" & err.description & "when string value is passed"
				End If		
				Err.Clear

		End Select
	Case "mobielement"
           		
		If BlnValue Then
		
			'Generate a unique file name
			strFileName = Replace(Replace(Replace(CStr(Now), "/", ""), " ", "_"), ":", "") &"old"& ".png"
			
			'Generate the path to save the file. Path should be System's Temp directory
			strImagePathOld = Environment("SystemTempDir") & "\" & strFileName
			
			'Delete any file in Temp that has the same name as strFileName
			Set objFSO = CreateObject("Scripting.FileSystemObject")
			
				If objFSO.FileExists(strImagePathOld) Then
				objFSO.DeleteFile strImagePathOld, True
			End If
			
			'Take screen shot of current screen
			Mobidevice("micclass:=MobiDevice").CaptureBitmap strImagePathOld, True
			
			'Execute get scrolledtext method
			StrScroll = objTestObject.GetScrolledText()
			
			Wait 4
			
			'Generate a unique file name
			strFileName = Replace(Replace(Replace(CStr(Now), "/", ""), " ", "_"), ":", "") &"new"& ".png"
			
			'Generate the path to save the file. Path should be System's Temp directory
			strImagePathNew = Environment("SystemTempDir") & "\" & strFileName
			
			If objFSO.FileExists(strImagePathNew) Then
				objFSO.DeleteFile strImagePathNew, True
			End If
			
			'Take screen shot  of image after swipe
			Mobidevice("micclass:=MobiDevice").CaptureBitmap strImagePathNew, True

			blnFlag = CompareBitmap(strImagePathOld,strImagePathNew)
'			Set objFcomapre = CreateObject("Mercury.FileCompare")
			'Compare the two screenshots
			If blnFlag =  False  and strScroll <>"" Then
				blnFlag =  True
				Environment("Pass") = "Getscrolled text method for scrollable element returned  text"
			End If
			Environment("Fail") = "Getscrolled text method for scrollable element returned null text"
			
		Else
			'Execute get scrolledtext method
			StrScroll = objTestObject.GetScrolledText()
			If strScroll <> "" Then
				blnFlag = true
				Environment("Pass") = "Getscrolled text method for  element returned  text"
			End If
				Environment("Fail") = "Getscrolled text method for  element returned null text"
		End If
		
		
	End Select 

	If blnFlag = True AND Err.Description = "" Then 
		ReportStep  "GetScrolledText" , Environment("Description")  , Environment("ExpectedResult") , Environment("Pass") , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass")
		VerifyGetScrollText = True
	Else
		ReportStep  "GetScrolledText" , Environment("Description") , Environment("ExpectedResult") , Environment("Fail") , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") &Space(2)&Err.Description
		VerifyGetScrollText = False
	End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
    	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "GetScrollText" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function


'##########################################################################################################################
''@Function:			VerifyChildObjects
''@Description:			Tests the functionality of ChildObjects method for the passed in object
''@Return Type:			Boolean
''@Created By:			Naveen
''@Created On:			25-Oct-2012
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  valValue
''@Param Type:   Object or String (object class)
''@Param Drtn:   In
''@Param Desc: 	In case of MobiDevice this value will be the class of object for which recursive child count should be returned. eg. "MobiEdit" , "MobiWebEdit" etc
''--------------------------------------------------------------------------------------------------------------------------
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  strRecursive
''@Param Type:  String 
''@Param Drtn:   In
''@Param Desc:  Value should nbe recursive or non recursive

''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  intChildCount
''@Param Type:  Integer
''@Param Drtn:   In
''@Param Desc:  Expected Child count
''@Example: Set objTestObject = MobiDevice("Device").MobiButton("Button_Cancel")
''					  blnResult = VerifyChildObjects(objTestObject , "recursive" , 4)
''--------------------------------------------------------------------------------------------------------------------------

Function VerifyChildObjects(objTestObject , strRecursive , intChildCount)
	On Error Resume Next
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Reporter.Filter = rfEnableAll
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""

	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	VerifyChildObjects = False
	
	
    Select Case Lcase(strRecursive)
		
		Case "recursive"
		  'Set description
		  Set desc = Description.Create
          desc("recursive").Value = "True"
          
'          'Verify if parameter is an object or a STring value 
'		  If  TypeName(varValue) <> "coTEAObject" Then
'		      'In case of MobiDevice set object
'		      Set objTestObject = MobiDevice("micClass:=MobiDevice")
'		      desc("micclass").Value = varValue
'		 Else
'              desc("micclass").Value = Environment("MobiObjectClass")		 
'		 End If 
'		  
          Set objCollection = objTestObject.ChildObjects(desc)
	
	  Case "nonrecursive"
     'Set collection object
	  Set objCollection = objTestObject.ChildObjects
	  
      End Select
      
 	If (objCollection.Count >= intChildCount  OR objCollection.Count = intChildCount -1) AND Len(Err.Description) = 0 Then
 	   
		VerifyChildObjects = True
		ReportStep "ChildObjects" , Environment("Description") , Environment("ExpectedResult") ,"ChildObject count returned as ->"&objCollection.Count , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), "ChildObject count returned as ->"& objCollection.Count
	Else
		ReportStep "ChildObjects" , Environment("Description") , Environment("ExpectedResult"),"ChildObject failed count returned as ->"& objCollection.Count &Space(2)&Err.Description , "Fail"
		Reporter.ReportEvent micFail,  Environment("Description"), "ChildObject count returned as ->"& objCollection.Count &Space(2)&Err.Description
	End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "ChilObjects" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function


'##########################################################################################################################
''@Function:			VerifyRestore
''@Description:			Verify Window restore for MobiDevice
''@Return Type:			Boolean
''@Created By:			Shweta
''@Created On:			5th Nov ' 12
''@Modified By:	        Saurabh    
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	 MobiDevice object  
''--------------------------------------------------------------------------------------------------------------------------
''@Example: Set objTestObject = MobiDevice("Device")
'' flag = VerfiyRestore(objTestObject)
''--------------------------------------------------------------------------------------------------------------------------

Function VerfiyRestore(objTestObject)
	On Error Resume Next
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	VerfiyRestore = False
	BlnRestore =  False
	  
	Environment("Description") =   "Restore : Verify device window get restored to its previous state for "&Space(2)&Environment("MobiObjectClass")
	Environment("ExpectedResult") = "Device window should get restored"

	Set objTrustWin = Window("regexpwndtitle:=deviceViewer")

	''Check whether window is already activated or not
	If  objTrustWin.Exist(2) and objTrustWin.GetROProperty("x") >0Then
			objTestObject.minimize
			wait 3
			objTestObject.restore
			wait 3
		   If  objTrustWin.GetROProperty("x") > 0 Then
				BlnRestore=  True
		   End If
		   Environment("Pass") = "Restore method restores the previous position :Activated when device is activated in previous state"
		   Environment("Fail") = "Restore method failed to restores the previous position :Activated when device is activated in previous state"
	Else
			objTestObject.Activate
			objTestObject.restore
			wait 2
		   If  objTrustWin.GetROProperty("x") < 0 Then
				BlnRestore=  True
		   End If
		   Environment("Pass") = "Restore method restores the previous position :minimized when device is minimized in previous state"
			Environment("Fail") = "Restore method failed to restores the previous position :minimized when device is minimized in previous state"
	End If

    If  BlnRestore   AND Len(Err.Description) = 0 Then
		VerfiyRestore = True
		ReportStep "Restore" , Environment("Description") , Environment("ExpectedResult") , Environment("Pass") , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), "Restore method works fine"
	Else
		ReportStep "Restore" , Environment("Description") , Environment("ExpectedResult") , Environment("Fail") , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") &Space(2)&Err.Description
	End If

    	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "Restore" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function


'##########################################################################################################################
''@Function:			VerifyRefreshObject
''@Description:			Verify Refresh on  MobiObject
''@Return Type:			Boolean
''@Created By:			Shweta
''@Created On:			5th Nov ' 12
''@Modified By :   		 Shweta
''@Created On: 			29/05/2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	 Any  MobiElement
''--------------------------------------------------------------------------------------------------------------------------
''@Example: Set objTestObject = MobiDevice("Device")
'' flag = VerifyRefresh(objTestObject)
''--------------------------------------------------------------------------------------------------------------------------

Function VerifyRefreshObject(objTestObject)
	On Error Resume Next
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Reporter.Filter = rfEnableAll
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""

	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	VerifyRefreshObject = False

	objTestObject.RefreshObject

 	If  Len(Err.Description)  =  0   Then
		VerifyRefreshObject  = True
		ReportStep "RefreshObject" , Environment("Description") ,Environment("ExpectedResult") , "RefreshObject working correctly" , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), "RefreshObject working correctly"
	Else
		ReportStep  "RefreshObject" , Environment("Description") ,Environment("ExpectedResult") , "RefreshObject is not  working correctly"&Space(2)&Err.Description , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"),"RefreshObject is not  working correctly"&Space(2)&Err.Description
	End If
	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll

    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "RefreshObject" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function


'##########################################################################################################################
''@Function:			VerifySwipe
''@Description:			Verify Swipe on  MobiObject
''@Return Type:			Boolean
''@Created By:			Shweta
''@Created On:			5th Nov ' 12
''@Modified By :   		 Shweta
''@Created On: 			29/05/2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	 Any  MobiElement
''--------------------------------------------------------------------------------------------------------------------------

''--------------------------------------------------------------------------------------------------------------------------
Function VerifySwipe(objTestObject , strDirection ,  strVelocity ,  intStartPercentage  ,  intEndPercentage , objAfterSwipe)

	On Error Resume Next
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
    Reporter.Filter = rfEnableAll
	VerifySwipe = False
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")

	If LCase(Environment("MobiObjectClass") )  = "mobiwebview"  Then
		intY1 = objAfterSwipe.GetROProperty("y")
	End If

	Reporter.Filter = rfDisableAll
	'Check if all parameters are blank
	If  VarType(strDirection)  = 10 AND VarType(strVelocity) = 10  AND VarType(intStartPercentage)  = 10 AND VarType( intEndPercentage ) = 10 Then
		'Case  - Execute method  without parameters
		objTestObject.Swipe
	Else

		'Assign default values to Start and End percentage if no value is assigned to them
		If VarType(intStartPercentage) = 10 Then
			intStartPercentage = 20
		End If
		
		If VarType(intEndPercentage) = 10 Then
			intEndPercentage = 80
		End If
		
		If LCase(objTestObject.GetTOProperty("micclass")) = "mobipicker" Then
			If  Environment("WheelNumber")  = "" Then
				Environment("WheelNumber") = 0
			End If
		End If 

		If  intStartPercentage = 0  AND Environment("MobiObjectClass") = "MobiDevice"  AND strDirection = 1  Then
			strScreenBeforeSwipe = Environment("SystemTempDir") & "\" & Replace(Replace(Replace(CStr(Now), "/", ""), " ", "_"), ":", "")   &".bmp"	
			MobiDevice("micclass:=MobiDevice").Activate
			objTestObject.CaptureBitmap  strScreenBeforeSwipe , True
		End If 

		If LCase(objTestObject.GetTOProperty("micclass")) = "mobipicker" Then
			err.clear
			objTestObject.Swipe strDirection ,strVelocity , intStartPercentage , intEndPercentage , Environment("WheelNumber")
			objTestObject.WaitProperty  "visible" , False , 10000
		Else
			'Case - Execute method with parameters
			err.clear
			objTestObject.Swipe strDirection ,strVelocity , intStartPercentage , intEndPercentage
			wait 1
			objAfterSwipe.WaitProperty "visible" , False , 5000
			
		End If 
				
	End If 
	
	Reporter.Filter = rfEnableAll

'	If LCase(Environment("MobiObjectClass")) = "mobidevice" AND strDirection =  "eUP"  AND  intStartPercentage = 0 Then
'		MobiDevice("micclass:=MobiDevice").ButtonPress eBACK
'		wait 2
'	End If

	'Verify  if  no parameter is passed
	If  VarType(strDirection)  = 10 AND VarType(strVelocity) = 10  AND VarType(intStartPercentage)  = 10 AND VarType( intEndPercentage ) = 10 Then
		If  InStr(1 , LCase(Replace(Err.Description , " " ,"")), LCase(Replace("Invalid number of parameters." , " " ,""))) > 0  Then
			ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult")  , "Error message thrown as ->" & Err.Description , "Pass"
            Reporter.ReportEvent micPass , Environment("Description")  , "Error message thrown as ->" & Err.Description
			Exit Function
		Else
			ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult")  , "Expected error -> Invalid number of parameters." &Space(2) & "Error thrown  ->"&Err.Description
            Reporter.ReportEvent micFail , Environment("Description")  , "Expected error -> Type mismatch" &Space(2) & "Error thrown  ->"&Err.Description
		End If
	
	'Verfiy if any of  the parameters Direction , Velocity , StartPercentage , EndPercentage have invalid values
	 ElseIf CLng(intStartPercentage) <> intStartPercentage OR CLng(intEndPercentage) <>  intEndPercentage OR IsEmpty(strDirection) OR IsEmpty(strVelocity) Then
			If  InStr(1 , LCase(Replace("Type Mismatch." , " " ,"")) , LCase(Replace(Err.Description , " " ,""))) > 0  Then
				VerifySwipe = True
				ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult")  , "Error message thrown as ->Type Mismatch " , "Pass"
				Reporter.ReportEvent micPass , Environment("Description")  ,  "Error message thrown as ->Type Mismatch "
				Exit Function
			Else
				ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult")  , "Expected error -> Type mismatch" &Space(2) & "Error thrown  ->"&Err.Description
				Reporter.ReportEvent micFail , Environment("Description")  , "Expected error -> Type mismatch" &Space(2) & "Error thrown  ->"&Err.Description
			End If
	
	'Verify if  Start Percentage or End Percentage have negative values
	ElseIf   intStartPercentage < 0 OR intEndPercentage < 0 Then
			If  InStr(1 , LCase(Replace("Invalid percent specified. Value must be within 0-100 range" , " " ,"")) , LCase(Replace(Err.Description , " " ,""))) > 0  Then
				VerifySwipe = True
				ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult")  , "Error message thrown as ->Invalid percent specified. Value must be within 0-100 range" , "Pass"
				Reporter.ReportEvent micPass , Environment("Description")  ,"Error message thrown as ->Invalid percent specified. Value must be within 0-100 range"
				Exit Function
			Else
				ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult")  , "Expected error -> Type mismatch" &Space(2) & "Error thrown  ->"&Err.Description
				Reporter.ReportEvent micFail , Environment("Description")  , "Expected error -> Type mismatch" &Space(2) & "Error thrown  ->"&Err.Description
				Exit Function
			End If

	ElseIf  LCase(objTestObject.GetTOProperty("micclass")) = "mobipicker"  Then
			If Environment("WheelNumber") <  0  Then
				If  InStr(1 , LCase(Replace("Invalid picker wheel number assignment" , " " ,"")) , LCase(Replace(Err.Description , " " ,""))) > 0  Then
					VerifySwipe = True
					ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult")  , "Error message thrown as ->Invalid picker wheel number assignment" , "Pass"
					Reporter.ReportEvent micPass , Environment("Description")  ,"Error message thrown as ->Invalid picker wheel number assignment"
					Exit Function
				Else
					ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult")  , "Expected error -> Invalid picker wheel number assignment" &Space(2) & "Error thrown  ->"&Err.Description
					Reporter.ReportEvent micFail , Environment("Description")  , "Expected error -> Invalid picker wheel number assignment " &Space(2) & "Error thrown  ->"&Err.Description
					Exit Function
				End If
			End If 
	End If 
	
	If VarType(strDirection) = 10 Then
		strDirection = "Blank"
	ElseIf strDirection = 1 Then
        strDirection = "eUP"
    ElseIf strDirection = 2 Then
        strDirection = "eDOWN"
    ElseIf strDirection  = 3 Then
        strDirection = "eLEFT"
    ElseIf  strDirection  = 4 Then
        strDirection  = "eRIGHT"
    End If
				                            
	If VarType(strVelocity) = 10 Then
		strVelocity = "Blank"
	ElseIf strVelocity  = 0 Then
		strVelocity = "eSLOW"
	ElseIf strVelocity = 1 Then
		strVelocity  = "eMEDIUM"
	ElseIf strVelocity = 2 Then
		strVelocity = "eFAST"					
	End If 

	If  intStartPercentage = 0  AND Environment("MobiObjectClass") = "MobiDevice"  AND  strDirection =  "eUP"  Then
		strScreenAfterSwipe = Environment("SystemTempDir") & "\" & Replace(Replace(Replace(CStr(Now), "/", ""), " ", "_"), ":", "")   &".bmp"	
		MobiDevice("micclass:=MobiDevice").Activate
		objTestObject.CaptureBitmap  strScreenAfterSwipe , True
		Wait 2
		If  CompareBitmap(strScreenBeforeSwipe , strScreenAfterSwipe)   AND Len(Err.Description) = 0 Then
			MobiDevice("micclass:=MobiDevice").ButtonPress eBACK
			wait 2
			VerifySwipe = True
			ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult") ,  "Working correctly with Direction  : "& strDirection & " , "&"Velocity  :"& strVelocity &",  " &"Start Percentage  : "&  intStartPercentage &", " &  "End Percentage  :" & intEndPercentage , "Pass"
			Reporter.ReportEvent micPass , Environment("Description")  , "Working correctly with Direction  : " & strDirection & " , "&"Velocity  :"& strVelocity &",  " &"Start Percentage  : "&  intStartPercentage &", " &  "End Percentage  :" & intEndPercentage
		Else
			ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult") ,  "Failed  with Direction  : " & strDirection & " , "&"Velocity  :"& strVelocity &",  " &"Start Percentage  : "&  intStartPercentage &", " &  "End Percentage  :" & intEndPercentage & " " & err.Description , "Fail"
			Reporter.ReportEvent micFail , Environment("Description")  ,  "Failed  with Direction  : " & strDirection & " , "&"Velocity  :"& strVelocity &",  " &"Start Percentage  : "&  intStartPercentage &", " &  "End Percentage  :" & intEndPercentage
		End If 

	ElseIf LCase(Environment("MobiObjectClass")) = "mobiwebview"  Then
		objAfterSwipe.WaitProperty "Visible" , False , 6000
		intY2 = objAfterSwipe.GetROProperty("Y")
		If intY1 <> intY2 AND Err.Description = "" Then
			VerifySwipe = True
			ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult") ,  "Working correctly with Direction  : "& strDirection & " , "&"Velocity  :"& strVelocity &",  " &"Start Percentage  : "&  intStartPercentage &", " &  "End Percentage  :" & intEndPercentage , "Pass"
			Reporter.ReportEvent micPass , Environment("Description")  , "Working correctly with Direction  : " & strDirection & " , "&"Velocity  :"& strVelocity &",  " &"Start Percentage  : "&  intStartPercentage &", " &  "End Percentage  :" & intEndPercentage
		Else
			ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult") ,  "Failed  with Direction  : " & strDirection & " , "&"Velocity  :"& strVelocity &",  " &"Start Percentage  : "&  intStartPercentage &", " &  "End Percentage  :" & intEndPercentage & " " & err.Description , "Fail"
			Reporter.ReportEvent micFail , Environment("Description")  ,  "Failed  with Direction  : " & strDirection & " , "&"Velocity  :"& strVelocity &",  " &"Start Percentage  : "&  intStartPercentage &", " &  "End Percentage  :" & intEndPercentage
		End If
	Else
		If strDirection= "eLEFT" OR strDirection= "eRIGHT" Then
			If (objAfterSwipe.Exist(2) AND Len(Err.Description) = 0)Then
				VerifySwipe = True
				ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult") ,  "Working correctly with Direction  : "& strDirection & " , "&"Velocity  :"& strVelocity &",  " &"Start Percentage  : "&  intStartPercentage &", " &  "End Percentage  :" & intEndPercentage , "Pass"
				Reporter.ReportEvent micPass , Environment("Description")  , "Working correctly with Direction  : " & strDirection & " , "&"Velocity  :"& strVelocity &",  " &"Start Percentage  : "&  intStartPercentage &", " &  "End Percentage  :" & intEndPercentage
			Else
				ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult") ,  "Failed  with Direction  : " & strDirection & " , "&"Velocity  :"& strVelocity &",  " &"Start Percentage  : "&  intStartPercentage &", " &  "End Percentage  :" & intEndPercentage & " " & err.Description , "Fail"
				Reporter.ReportEvent micFail , Environment("Description")  ,  "Failed  with Direction  : " & strDirection & " , "&"Velocity  :"& strVelocity &",  " &"Start Percentage  : "&  intStartPercentage &", " &  "End Percentage  :" & intEndPercentage &Space(2)&Err.Description
			End If
		Else 			
			If (objAfterSwipe.Exist(2) AND Len(Err.Description) = 0 AND objAfterSwipe.GetROProperty("visibletouser")=True)  Then
				VerifySwipe = True
				ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult") ,  "Working correctly with Direction  : "& strDirection & " , "&"Velocity  :"& strVelocity &",  " &"Start Percentage  : "&  intStartPercentage &", " &  "End Percentage  :" & intEndPercentage , "Pass"
				Reporter.ReportEvent micPass , Environment("Description")  , "Working correctly with Direction  : " & strDirection & " , "&"Velocity  :"& strVelocity &",  " &"Start Percentage  : "&  intStartPercentage &", " &  "End Percentage  :" & intEndPercentage
			Else
				ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult") ,  "Failed  with Direction  : " & strDirection & " , "&"Velocity  :"& strVelocity &",  " &"Start Percentage  : "&  intStartPercentage &", " &  "End Percentage  :" & intEndPercentage & " " & err.Description , "Fail"
				Reporter.ReportEvent micFail , Environment("Description")  ,  "Failed  with Direction  : " & strDirection & " , "&"Velocity  :"& strVelocity &",  " &"Start Percentage  : "&  intStartPercentage &", " &  "End Percentage  :" & intEndPercentage &Space(2)&Err.Description
			End If 
		End If

	End If 
	
	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
		strStatus = "Not Run"
		ReportStep "Swipe" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If

Err.Clear
On Error GoTo 0
End Function



'##########################################################################################################################
''@Function:  VerifyButtonPress
''@Description:  Verifies ButtonPress eMENU , eBACK options
''@Return Type:	Boolean
''@Created By: Shweta
''@Created On: 02/06/2012
''@Modified By : Shweta
''@Modified On: 29/05/2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	Object  (MobiDevice)
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  strOption 
''@Param Type:   String
''@Param Drtn: 		In
''@Param Desc: 	"back" in case of eBACK or "menu" in case os eMENU
''--------------------------------------------------------------------------------------------------------------------------
''@Example: Set  objTestObject = MobiDevice("PhoneLookup")
'' 							blnFlag = VerifyButtonPress(objTestObject , "menu")
'--------------------------------------------------------------------------------------------------------------------------

Function VerifyButtonPress( objTestObject ,strOption)

	On Error Resume Next
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	VerifyButtonPress = False

	strErrorMessage = "Invalid number of parameters."
	Environment("Pass") = "Error thrown on passing blank text :"& Err.Description
	Environment("Fail")  = "Error thrown :"&Err.Description &Space(2) &"Expected was : "& strErrorMessage

	'Case : Execute method with blank parameters
	If  strOption = " " Then
		'Execute method with blank parameters
		objTestObject.ButtonPress
		If Instr(1 , LCase(Replace(strErrorMessage)) , LCase(Replace(Err.Description , " " , ""))) > 0  Then
				strErrorMessage = "Invalid number of parameters."
				Environment("Pass") = "Error thrown on passing blank text :"& Err.Description
				Environment("Fail")  = "Error thrown :"&Err.Description &Space(2) &"Expected was : "& strErrorMessage
				VerifyButtonPress = True
				Err.Clear
		End If
	Else
		Select Case LCase(strOption)
		'Case : eBACK
			Case  "back"
				strHeaderBefore  = FetchHeaderElement
				wait 2
'				Set objFSO = CreateObject("Scripting.FileSystemObject")
'				'Generate a unique file name
'				strBeforeImage = Environment("SystemTempDir") & "\" & Replace(Replace(Replace(CStr(Now), "/", ""), " ", "_"), ":", "") &"old"& ".png"
'					
'				'Take screen shot of current screen
'				Mobidevice("micclass:=MobiDevice").CaptureBitmap strBeforeImage, True
''			
''					Set ObjBeforeClick = objFSO.GetFile(strBeforeImage)
''					ObjBeforeClick_Size = CInt(Round(ObjBeforeClick.Size / 1024 ))
'		
				Mobidevice("micclass:=MobiDevice").ButtonPress eBACK
				Wait 2
				strHeaderAfter  = FetchHeaderElement 
				
'				'Generate a unique file name
'				strAfterImage = Environment("SystemTempDir") & "\" &  Replace(Replace(Replace(CStr(Now), "/", ""), " ", "_"), ":", "") &"new"& ".png"
'				
'				'Take screen shot of image after swipe
'				Mobidevice("micclass:=MobiDevice").CaptureBitmap strAfterImage, True
''			
''					Set ObjAfterClick  = objFSO.GetFile(strAfterImage)
''					ObjAfterClick_Size  = CInt(Round(ObjAfterClick.Size / 1024 ))

				'blnFlag = CompareBitmap(strBeforeImage,strAfterImage)
				Environment("Pass")  = "eBack executed successfully"
				Environment("Fail")  = "eBack failed"
		
					'Compare two files
				If   LCase(strHeaderBefore)  <>  LCase( strHeaderAfter )  Then
						VerifyButtonPress = True
				End If 
			'Case : eMENU
		    Case  "menu"
				strMenuNotFound = ""
			
				Mobidevice("micclass:=MobiDevice").ButtonPress eMENU
				Wait 2
				'Array with all four menu options
				arrMenu = Array("Search" , "Log Out" , "Controls" , "Settings")
			
				For i = 0 to ubound(arrMenu)
						'Check if any of the menu option does not exist
						If  Not Mobidevice("micclass:=MobiDevice").MobiElement("text:="&arrMenu(i) ,  "index:=1").Exist Then
								strMenuNotFound = strMenuNotFound  &arrMenu(i) & " , "
						End If 	
				Next
				
				'Close menu
				Mobidevice("micclass:=MobiDevice").ButtonPress eMENU	
		
				Environment("Pass")  =   "eMenu opened successfully with items :"&Join(arrMenu , " , ")
				Environment("Fail")  =  "eMENU of ButtoPress failed for : " &strMenuNotFound &Space(2) &Err.Description
				If  strMenuNotFound = ""  AND Len(Err.Description) = 0 Then
						VerifyButtonPress = True
				End If
		End Select
	End If 

	If  VerifyButtonPress  AND Err.Description = "" Then
		ReportStep "ButtonPress" , Environment("Description") , Environment("ExpectedResult") ,Environment("Pass") , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"),Environment("Pass")  
	Else
		ReportStep "ButtonPress" , Environment("Description") , Environment("ExpectedResult") ,	Environment("Fail")  , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"),Environment("Fail") &Space(2)&Err.Description  
	End If 

    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "ButtonPress" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If

	Err.Clear
	On Error GoTo 0
End Function

'##########################################################################################################################
''@Function:        VerifyClear
''@Description: 	Verifying Clear Method Clears text in Edit Field eg MobiEdit , MobiWebEdit
''@Created By: 		Shweta Bhati
''@Created On: 		12/02/13
''@Modified  By:	 Shweta
''@Modified  on : 	29th  May 2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	objTestObjectEdit 
''@Param Type:   	Object
''@Param Drtn: 			In
''@Param Desc: 		Mobiobject
''--------------------------------------------------------------------------------------------------------------------------
''  Set  objTestObject  = MobiDevice("Device name").MobiEdit("objEdit")
'' Example     VerifyClear  objTestObject
''--------------------------------------------------------------------------------------------------------------------------
Function VerifyClear(objTestObject, strText)

	On Error Resume Next
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Reporter.Filter = rfEnableAll
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""

	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	VerifyClear = False
	objTestObject.Set strText
    objTestObject.RefreshObject
    Wait 3
    If Len(objTestObject.GetROProperty("text")) = 0 Then
       ReportStep "Clear" ,  Environment("Description") , Environment("ExpectedResult") , "No text was set in edit box before calling Clear" &Err.Description ,"Fail"
	   Reporter.ReportEvent micFail , Environment("Description") , "Clear removed complete text" &Space(2)&Err.Description
    Else 
	   'Clear text
	    objTestObject.Clear
	    wait 3
		Mobidevice("micclass:=MobiDevice").Sync
		If Len(objTestObject.GetROProperty("text")) = 0 OR objTestObject.GetROProperty("text") = "Enter Username" AND Len(Err.Description ) = 0 Then
			VerifyClear = True
			ReportStep "Clear" , Environment("Description") , Environment("ExpectedResult") , "Clear removed complete text" , "Pass"
			Reporter.ReportEvent micPass , Environment("Description") , "Clear removed complete text"
        Else
			ReportStep "Clear" ,  Environment("Description") , Environment("ExpectedResult") , "Clear didn't removed complete text. The displayed text after executing Clear is: " &_
			objTestObject.GetROProperty("text")&Space(2) &Err.Description , "Fail"
			Reporter.ReportEvent micFail , Environment("Description") , "Clear didn't removed complete text" &Space(2)&Err.Description
        End If	
	End If
	
	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "Clear" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
    On Error GoTo 0
End Function
	
	
'##########################################################################################################################
''@Function:		VerifyLongClick
''@Description:		Verify Long Click functionality on "MobiElement", "MobiEdit", "MobiDevice"  , "MobiLink" and  "MobiImage"
''@Return Type:		Boolean
''@Created By :     Shweta
''@ Created  On:   12th Feb 2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	Object 
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  strCoordsOption 
''@Param Type:   String
''@Param Drtn: 		In
''@Param Desc:  Option for Longclick eg "withcoordinates" , "withoutcoordinates" , "withrandomvalues" , "withzerovalues"
''--------------------------------------------------------------------------------------------------------------------------
''@Example: 	Set objTestObject = MobiDevice("Device").MobiElement("Element")
''							blnResult =  VerifyLongClick(objTestObject, ,"withoutcoordinates")
''---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Function VerifyLongClick(objTestObject , strCoordsOption)

   	On Error Resume Next
    Reporter.Filter = rfEnableAll
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	VerifyLongClick = False

	'Assign Lapse time value
	If LCase(strCoordsOption) = "withinvalidlapsetime"Then
		intLapsetime = -2000
	Else
		intLapsetime = 3000
	End If

	If Window("regexpwndtitle:=deviceViewer").Exist(2) Then
		Window("regexpwndtitle:=deviceViewer").Activate
	End If

	Select Case LCase(strCoordsOption)

		Case "validlapsewithoutcoords"  

		Case   "withinvalidlapsetime"

			strErrorMessage = "Lapse time should not be negative. Please enter valid lapse time."
			Reporter.Filter = rfDisableAll

		Case "validlapseboundarycoords"
			intX = objTestObject.GetROProperty("width")-2
			intY = objTestObject.GetROProperty("height")-2

		Case "validlapserandomcoords"	
			intX = CInt(Int(objTestObject.GetROProperty("width"))*Rnd)
			intY = CInt(Int(objTestObject.GetROProperty("height"))*Rnd)
					
		Case "validlapsezerocoords"
			intX = 1
			intY = 1	

		Case "validlapsenegativecoords"
			intX = -40
			intY = -40			
			strErrorMessage = "The statement contains one or more invalid function arguments"	
			Reporter.Filter = rfDisableAll

		Case "withvalidlapsevalidvalue"
	intX = CInt(objTestObject.GetROProperty("width") / 2)
	intY = CInt(objTestObject.GetROProperty("height") / 2)

		Case "validlapsexcoords"
			intX = CInt(objTestObject.GetROProperty("width") / 2)

		Case "validlapseycoords"
		intY = CInt(objTestObject.GetROProperty("height") /2)				
		
	End Select
	If  Not LCase(strCoordsOption)  =  "validlapsenegativecoords"   Then	
				If  NOT LCase(Environment("MobiObjectClass") ) = "mobiedit"  Then
					strHeaderBeforeClick = FetchHeaderElement				
				Else
				strImagePathBefore = Environment("SystemTempDir") & "\" & Replace(Replace(Replace(CStr(Now), "/", ""), " ", "_"), ":", "")   &".bmp"	
				'objTestObject.CaptureBitmap  strImagePathBefore , True
				MobiDevice("micclass:=MobiDevice").CaptureBitmap  strImagePathBefore , True
				wait 2
				End If
	End If

	If LCase(strCoordsOption) = "validlapsexcoords" Then
		objTestObject.LongClick intLapsetime , intX
		Wait 5
		Environment("Pass")   =   "Longclick  with Lapse Time :"&intLapsetime &Space(2)&" X :"& intX & Space(2) & "blank  Y working correctly"
		Environment("Fail")    =    "Longclick  with Lapse Time :"&intLapsetime &Space(2)&" X :"& intX & Space(2) & "blank  Y not  working correctly"

	ElseIf  LCase(strCoordsOption) = "validlapseycoords" Then
		err.clear
		objTestObject.LongClick intLapsetime ,  , intY
		Wait 5
		Environment("Pass")   =   "Longclick  with Lapse Time :"&intLapsetime &Space(2)&" X blank and Y :"& intY &Space(2) & "working correctly"
		Environment("Fail")    =  "Longclick with Lapse Time :"&intLapsetime &Space(2)&" X blank and Y :"& intY &Space(2) & "not working"

	ElseIf   LCase(strCoordsOption) = "validlapsewithoutcoords"  OR     LCase(strCoordsOption) = "withinvalidlapsetime" Then
err.clear
		objTestObject.LongClick intLapsetime
		Wait 5
		Environment("Pass") = "LongClick without co-ordinates and with lapse time :"& intLapsetime &Space(2) &"is working correctly"
		Environment("Fail") = "LongClick without co-ordinates and with lapse time :"& intLapsetime &Space(2) &"is not working correctly"

	Else
err.clear
		objTestObject.LongClick intLapsetime ,intX , intY
		Wait 2
		Environment("Pass")   =   "Longclick  with Lapse Time :"& intLapsetime &Space(2) &"and X :" & intX &Space(2) &"Y :"&intY &Space(2) &"is working correctly "
		Environment("Fail")    =    "Longclick  with Lapse Time :"& intLapsetime &Space(2) &"and X :" & intX &Space(2) &"Y :"&intY &Space(2) &"is not working correctly "	
		'Enable reporting if  disabled
		If  Reporter.Filter = rfDisableAll Then
			Reporter.Filter  = rfEnableAll
		End If

	End If

	
	'Verify in case of negative co-ordinates or invalid lapse time
	If LCase(strCoordsOption) = "validlapsenegativecoords" OR LCase(strCoordsOption) = "withinvalidlapsetime"Then
		If  Instr(1 , LCase(Replace(Err.Description , " " , "")) , LCase(Replace(strErrorMessage , " " , ""))) > 0 Then
			VerifyLongClick = True
			ReportStep "LongClick" , Environment("Description") , Environment("ExpectedResult") ,	"Thrown error :"&strErrorMessage  , "Pass"
			Reporter.ReportEvent micPass, Environment("Description"),"Thrown error :"&Err.Description 
			Exit Function
		Else
			ReportStep "LongClick" , Environment("Description") , Environment("ExpectedResult") ,	"Thrown error :"&Err.Description &" "&"Expected Error was :"& strErrorMessage , "Fail"
			Reporter.ReportEvent micFail, Environment("Description"), "Thrown error :"&Err.Description &" "&"Expected Error was :"& strErrorMessage 
			Exit Function
		End If
'	ElseIf blnFlag Then
'		'Verify in case of  all  valid  values  
'		If  VerifyScreenChange AND Len(Err.Description) = 0  Then
'			VerifyLongClick = True
'			ReportStep "LongClick" , Environment("Description") , Environment("ExpectedResult") ,Environment("Pass") , "Pass"
'			Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass") 
'		Else
'			ReportStep "LongClick" , Environment("Description") , Environment("ExpectedResult") ,Environment("Fail") , "Fail"
'			Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") & " " &Err.Description
'		End If
'
	ElseIf   LCase(Environment("MobiObjectClass") ) = "mobiedit"   Then

		wait 1
	    strImagePathAfter = Environment("SystemTempDir") & "\" & Replace(Replace(Replace(CStr(Now), "/", ""), " ", "_"), ":", "")   &".bmp"	
		MobiDevice("micclass:=MobiDevice").Activate
		MobiDevice("micclass:=MobiDevice").CaptureBitmap  strImagePathAfter , True
		'objTestObject.CaptureBitmap  strImagePathAfter , True

		If CompareBitmap( strImagePathBefore , strImagePathAfter)  AND  Len(Err.Description)  = 0 Then
			VerifyLongClick = True
			ReportStep "LongClick" , Environment("Description") , Environment("ExpectedResult") ,Environment("Pass") , "Pass"
			Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass") 
			Exit Function
		Else
			ReportStep "LongClick" , Environment("Description") , Environment("ExpectedResult") ,Environment("Fail")  & Space(2) & Err.Description, "Fail"
			Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") & " " &Err.Description
			Exit Function
		End If	

		If  LCase(Environment("MobiObjectClass")) = "mobiedit"  AND  Instr(1, Lcase(objTestObject.GetTOProperty("devicetype")),"iphone") > 0 Then
				Window("regexpwndtitle:=deviceViewer").Type micReturn
			End If 
	Else	
		If  (LCase(Environment("MobiObjectClass")) = "mobidevice"  AND LCase(strCoordsOption) = "withboundarycoords" )  OR (LCase(Environment("MobiObjectClass")) = "mobidevice"  AND LCase(strCoordsOption) = "withzerovalues" ) Then
				If  Len(Err.Description) = 0  Then
					VerifyLongClick = True
				End If
		Else
					objTestObject.WaitProperty "visible" , False  , 30000
					strHeaderAfterClick = FetchHeaderElement
	
					If  StrComp(Lcase(Replace(strHeaderBeforeClick , " " , ""))  , Lcase(Replace(strHeaderAfterClick , " " , "")) , 1)  <>  0  AND Len(Err.Description) = 0 Then
						VerifyLongClick = True
						ReportStep "LongClick" , Environment("Description") , Environment("ExpectedResult") ,Environment("Pass") , "Pass"
						Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass") 
						Exit Function
					Else
						ReportStep "LongClick" , Environment("Description") , Environment("ExpectedResult") ,Environment("Fail") & Space(2)  & Err.Description , "Fail"
						Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") & " " &Err.Description
						Exit Function
					End If		
	End If	
End If 

	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "LongClick" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll   
	Err.Clear
	On Error GoTo 0
End Function

'##########################################################################################################################
''@Function:		VerifyScreenChange
''@Description:		Compare files in Folder under Temp Directory , return true if  files did not match and False in case file matches.
''@Return Type:		Boolean
''@Created By :     Shweta
''@ Created  On:   12th Feb 2013
''--------------------------------------------------------------------------------------------------------------------------
''@Example: 	
''							blnResult =  VerifyScreenChange

Function VerifyScreenChange 
	On error resume next
   	Set objFSO = CreateObject("Scripting.FileSystemObject")
	Set objMercuryFilecompare = CreateObject("Mercury.FileCompare")

	Set objFolder = objFSO.GetFolder(Environment("SystemTempDir") & "\MobileLabsAutomation\Screenshots")
	strFilePath = objFolder.Path & "\"
	VerifyScreenChange = False

	For iCount = 0 to objFolder.Files.Count - 1
		If iCount = objFolder.Files.Count - 1 Then
			Exit For
		End If

'		Set objFile1 = objFSO.GetFile(strFilePath & iCount & ".bmp")
'        objFile1_Size   = CInt(Round(objFile1.Size / 1024 ))
'
'		Set objFile2 = objFSO.GetFile(strFilePath & iCount + 1 & ".bmp")
'        objFile2_Size = CInt(Round(objFile2.Size / 1024))

		blnFlag = CompareBitmap(strFilePath & iCount & ".bmp", strFilePath & iCount + 1 & ".bmp")

		Wait 2
		If   blnFlag Then
	'	If   objMercuryFilecompare.IsEqualBin( objFile1, objFile2, 0,1)  AND  objFile1_Size  =  objFile2_Size Then

			'if files are same
			VerifyScreenChange = True
			Exit For
		Else
			'if files are not same
			VerifyScreenChange = False
		End If
	Next

	Set objMercuryFilecompare = nothing
	Set objFolder = nothing
	Set objFSO = nothing
	Err.Clear
	On Error GoTo 0
End Function

'Function VerifyScreenChange
'
'   	Set objFSO = CreateObject("Scripting.FileSystemObject")
'	'Set objMercuryFilecompare = CreateObject("Mercury.FileCompare")
'
'	Set objFolder = objFSO.GetFolder(Environment("SystemTempDir") & "\MobileLabsAutomation\Screenshots")
'	strFilePath = objFolder.Path & "\"
'	VerifyScreenChange = False
'
'	For iCount = 0 to objFolder.Files.Count - 1
'		If iCount = objFolder.Files.Count - 1 Then
'			Exit For
'		End If
'
''		Set objFile1 = objFSO.GetFile(strFilePath & iCount & ".bmp")
''        objFile1_Size   = CInt(Round(objFile1.Size / 1024 ))
''
''		Set objFile2 = objFSO.GetFile(strFilePath & iCount + 1 & ".bmp")
''        objFile2_Size = CInt(Round(objFile2.Size / 1024))
'
'		blnFlag = CompareBitmap(strFilePath & iCount & ".bmp", strFilePath & iCount + 1 & ".bmp")
'	'	If   objMercuryFilecompare.IsEqualBin( objFile1, objFile2, 0,1)  AND  objFile1_Size  =  objFile2_Size Then
'
'		If  blnFlag Then
'			'if files are same
'			VerifyScreenChange = True
'			Exit For
'		End If
'	Next
'
''	Set objMercuryFilecompare = nothing
'	Set objFolder = nothing
'	Set objFSO = nothing
''	Err.Clear
'
'End Function


'##########################################################################################################################
''@Function:		Click
''@Description:   This sub is used  to perform click with differenent co-ordinates
''@Return Type:	  none
''@Created By:		Shweta
''@Created On:		26 -May-2013
''@Example :  Click objTestObject , "withoutcoords"
'###########################################################################################################################


Sub   Click( objTestObject , CoordsOption)
	On Error Resume Next
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	Select Case LCase(CoordsOption)
	
		Case "withoutcoords"
			objTestObject.Click
			Wait 3
			Environment("Pass")  = "Click without co-ordinates is working correctly"
			Environment("Fail") = "Click method without co-ordinates failed" & " "  & Err.Description
			
		Case "withboundarycoordstopleft"
			Select Case LCase(Environment("MobiObjectClass"))
				'Assign Boundary values 
				Case "mobidatetimepicker","mobisegment","mobiedit","mobiwebedit","mobidropdown","mobiwebdropdown","mobicheckbox","mobiwebcheckbox","mobibutton","mobiwebbutton","mobiradio","mobiwebradiobutton","mobiwebtable","mobislider","mobielement","mobiwebelement","mobiwebimage","mobiweblink","mobiswitch"
					intX = 2
					intY = 2
					objTestObject.Click  intX, intY 
					Wait 3
					Environment("Pass") = "Click passed for Boundary values " &Space(2)&intX &"," &intY  
					Environment("Fail")= " Click failed  for Boundary values "&Space(2) &intX &"," &intY  &  " "  & Err.Description
				Case "mobidevice","mobiwebview","mobilist"
					intX = 10
					intY = 70
					objTestObject.Click  intX, intY 
					Wait 3
					Environment("Pass") = "Click passed for Boundary values " &Space(2)&intX &"," &intY  
					Environment("Fail")= " Click failed  for Boundary values "&Space(2) &intX &"," &intY  &  " "  & Err.Description
			End Select	
			
		Case "withboundarycoordstopright"
			Select Case LCase(Environment("MobiObjectClass"))
				'Assign Boundary values 
				Case "mobidatetimepicker","mobisegment","mobiedit","mobiwebedit","mobidropdown","mobiwebdropdown","mobicheckbox","mobiwebcheckbox","mobibutton","mobiwebbutton","mobiradio","mobiwebradiobutton","mobiwebtable","mobislider","mobielement","mobiwebelement","mobiwebimage","mobiweblink","mobiswitch"
					intX = CInt(objTestObject.GetROProperty("width") )
					intY = 2
					objTestObject.Click  intX-2, intY 
					Wait 3
					Environment("Pass") = "Click passed for Boundary values " &Space(2)&intX &"," &intY  
					Environment("Fail")= " Click failed  for Boundary values "&Space(2) &intX &"," &intY  &  " "  & Err.Description
				Case "mobidevice","mobiwebview","mobilist"
					intX = CInt(objTestObject.GetROProperty("width") )
					intY = 70
					objTestObject.Click  intX-5, intY 
					Wait 3
					Environment("Pass") = "Click passed for Boundary values " &Space(2)&intX-5 &"," &intY  
					Environment("Fail")= " Click failed  for Boundary values "&Space(2) &intX-5 &"," &intY  &  " "  & Err.Description
			End Select	
					
		Case "withboundarycoordsbottomleft"
			Select Case LCase(Environment("MobiObjectClass"))
				'Assign Boundary values 
				Case "mobidatetimepicker","mobisegment","mobiedit","mobiwebedit","mobidropdown","mobiwebdropdown","mobicheckbox","mobiwebcheckbox","mobibutton","mobiwebbutton","mobiradio","mobiwebradiobutton","mobiwebtable","mobislider","mobielement","mobiwebelement","mobiwebimage","mobiweblink","mobiswitch"
					intX = 2
					intY = CInt(objTestObject.GetROProperty("height"))
					objTestObject.Click  intX, intY-2 
					Wait 3
					Environment("Pass") = "Click passed for Boundary values " &Space(2)&intX &"," &intY  
					Environment("Fail")= " Click failed  for Boundary values "&Space(2) &intX &"," &intY  &  " "  & Err.Description
				Case "mobidevice","mobiwebview","mobilist"
					intX = 10
					intY = CInt(objTestObject.GetROProperty("height"))
					objTestObject.Click  intX, intY-60 
					Wait 3
					Environment("Pass") = "Click passed for Boundary values " &Space(2)&intX &"," &intY-5 
					Environment("Fail")= " Click failed  for Boundary values "&Space(2) &intX &"," &intY-5  &  " "  & Err.Description
			End Select	
				
		Case "withboundarycoordsbottomright"
			Select Case LCase(Environment("MobiObjectClass"))
				'Assign Boundary values 
				Case "mobidatetimepicker","mobisegment","mobiedit","mobiwebedit","mobidropdown","mobiwebdropdown","mobicheckbox","mobiwebcheckbox","mobibutton","mobiwebbutton","mobiradio","mobiwebradiobutton","mobiwebtable","mobislider","mobielement","mobiwebelement","mobiwebimage","mobiweblink","mobiswitch"
					intX = CInt(objTestObject.GetROProperty("width"))
					intY = CInt(objTestObject.GetROProperty("height"))
					objTestObject.Click  intX-2, intY-2 
					Wait 3
					Environment("Pass") = "Click passed for Boundary values " &Space(2)&intX &"," &intY  
					Environment("Fail")= " Click failed  for Boundary values "&Space(2) &intX &"," &intY  &  " "  & Err.Description
				Case "mobidevice","mobiwebview","mobilist"
					intX = CInt(objTestObject.GetROProperty("width"))
					intY = CInt(objTestObject.GetROProperty("height"))
					objTestObject.Click  intX-10, intY-60
					Wait 3
					Environment("Pass") = "Click passed for Boundary values " &Space(2)& intX-5 &"," & intX-5
					Environment("Fail")= " Click failed  for Boundary values "&Space(2) & intX-5 &"," & intX-5 &  " "  & Err.Description
			End Select
		
		Case "withrandomcoords"
			'Assign Random Values
			intX = CInt(Int(objTestObject.GetROProperty("width"))*Rnd)
			intY = CInt(Int(objTestObject.GetROProperty("height"))*Rnd)
			objTestObject.Click intX , intY
			Wait 3
			Environment("Pass") = "Click passed for Random values " &Space(2)&intX &"," &intY  &Space(1) 
			Environment("Fail")  = " Click failed  for Random values "&Space(2) &intX &"," &intY  &Space(1)  & Err.Description
		
		Case "withzerovalues"
			'Assign Values
			intX = 1
			intY = 1
			objTestObject.Click  intX , intY 
			Wait 3
			Environment("Pass") = "Click passed for  values " &Space(2)&intX &"," &intY  &Space(1) 
			Environment("Fail")  = " Click failed  for  values " &Space(2)&intX &"," &intY  &Space(1)  & Err.Description
	
		Case "withnegativecoords"
			
		Case "withxvalue"
			'Assign Values
			intX = CInt(objTestObject.GetROProperty("width") / 2)
			objTestObject.Click  intX
			Wait 3
			Environment("Pass") = "Click passed for only X value " &Space(2)&intX &Space(1) 
			Environment("Fail")  = " Click failed  for  only X value " &Space(2)&intX  &Space(1)   & Err.Description

		Case "withyvalue"
			'Assign Values
			intY = CInt(objTestObject.GetROProperty("height") /2)
			objTestObject.Click ,intY
			Wait 3
			Environment("Pass") = "Click passed for only Y value " &Space(2)& intY &Space(1) 
			Environment("Fail")  = " Click failed  for  only Y value " &Space(2)& intY  &Space(1)   & Err.Description

		Case "withvalidvalue"
			'Assign Values	
			intX = CInt(objTestObject.GetROProperty("width") / 2)
			intY = CInt(objTestObject.GetROProperty("height") / 2)
			objTestObject.Click intX,intY
			Wait 3
			Environment("Pass") = "Click passed for  values " &Space(2)&intX &"," &intY  &Space(1) 
			Environment("Fail")  = " Click failed  for  values " &Space(2)&intX &"," &intY  &Space(1)   & Err.Description

	End Select
	On Error GoTo 0
End Sub


'##########################################################################################################################
''@Function:		CreateReportTemplate
''@Description:   This function can be used to generate an html report template
''@Return Type:	  none
''@Created By:		Amit & Shweta
''@Created On:		26 -May-2013
''@Example :  CreateReportTemplate
'###########################################################################################################################
Function CreateReportTemplate()

	Dim myFile
	Dim arrExecutionResults()
	On Error Resume Next

	'##############################################################
'create local data sheet for storing step results 
    DataTable.AddSheet("Report Step Values")
	DataTable.GetSheet("Report Step Values").AddParameter "strStepDescription" , ""
	DataTable.GetSheet("Report Step Values").AddParameter "strExpectedResult" , ""
	DataTable.GetSheet("Report Step Values").AddParameter "strActualResult" , ""
	DataTable.GetSheet("Report Step Values").AddParameter "strStatus" , ""
	DataTable.GetSheet("Report Step Values").AddParameter "strTestExecutionTime" , ""
	DataTable.GetSheet("Report Step Values").AddParameter "strMethodname" , ""
	DataTable.GetSheet("Report Step Values").AddParameter "strCaseID" , ""
	DataTable.GetSheet("Report Step Values").AddParameter "strScenarioID" , ""

'####################################################

	'Creating folders in temp
	Set objFSO = CreateObject("Scripting.FileSystemObject")
	Environment("ScreenshotPath") = Environment("SystemTempDir") &"\TrustTestResult\ErrorScreenShots"

	If NOT objFSO.FolderExists( Environment("SystemTempDir") &"\TrustTestResult") Then
		Set objFolder = objFSO.CreateFolder(Environment("SystemTempDir") &"\TrustTestResult")
	End If
	
	If NOT objFSO.FolderExists( Environment("ScreenshotPath")) Then
		Set objErrorFolder = objFSO.CreateFolder(Environment("ScreenshotPath"))
	End If
	Err.clear
	Set objDevice = Mobidevice("micclass:=MobiDevice")
	'Fetching device values
	Set iDict = CreateObject("Scripting.Dictionary")
	Set dicMethod = CreateObject("Scripting.Dictionary")
	Set dicTestCaseStatus  = CreateObject("Scripting.Dictionary")
	
	strPropValue = "os"
	If Environment("platform") = 1 Then
		strPropValue = "androidos"
	ElseIf Environment("platform") = 0 Then
		strPropValue = "iphone os"
	End If
	objDevice.WaitProperty "platform", strPropValue, 20000
		
	iDict.Add "AppName" , objDevice.GetROProperty("name")
	iDict.Add "DeviceType" , objDevice.GetROProperty("devicetype")
	iDict.Add "DeviceOS" , objDevice.GetROProperty("osversion")


	strReportPath = Environment("SystemTempDir") &"\TrustTestResult\" & iDict("AppName") & "_" & Environment("devicemodel") & "_" & iDict("DeviceOS") & "_" & "NativeAutomation" & "_" & Environment("nativeautomation") & ".html"
	Environment("ReportPath") = strReportPath
	Environment("strConfig") = Environment("SystemTempDir") & "\Config" & "_"  & "result.ini"
	Environment("strSummary")  = Environment("SystemTempDir") & "\result" & "_"  & " summary.ini"


	If Not objFSO.FileExists(strReportPath) Then
		
		iDict.Add "Platform" , objDevice.GetROProperty("platform")
		iDict.Add "WindowsOS" , Replace(Environment("OS") , "Workstation" , "")
	    'iDict.Add "Start Time" , Now()
		Set MyFile = objFSO.CreateTextFile(strReportPath, false)

		''@Initiating HTMLformat coding
		MyFile.write("<html>")
		
		''@Setting up styling classes
		MyFile.write("<style>")
		MyFile.write(".subheading { BORDER-RIGHT:#000000 1px solid;PADDING-RIGHT: 4px;BORDER-TOP: #000000 1px solid;PADDING-LEFT: 4px;FONT-WEIGHT: bold;FONT-SIZE: 9pt;PADDING-BOTTOM: 0px;BORDER-LEFT: #000000 1px solid;COLOR: #000000;PADDING-TOP: 0px;BORDER-BOTTOM: #000000 1px solid;FONT-FAMILY: Arial, helvetica, sans-serif;HEIGHT: 20px;BACKGROUND-COLOR: #F78427}")
		MyFile.write(".subheading1{BORDER-RIGHT: #000000 1px solid;PADDING-RIGHT: 4px;BORDER-TOP: #000000 1px solid;PADDING-LEFT: 4px;FONT-WEIGHT: bold;FONT-SIZE: 9pt;PADDING-BOTTOM: 0px;BORDER-LEFT: #000000 1px solid;COLOR: #000000;PADDING-TOP: 0px;BORDER-BOTTOM: #000000 1px solid;FONT-FAMILY: Arial, helvetica, sans-serif;HEIGHT: 10px;}")
		MyFile.Write(".subheading2{BORDER-RIGHT: #000000 1px solid;PADDING-RIGHT: 2px;BORDER-TOP: #000000 1px solid;PADDING-LEFT: 2px;FONT-WEIGHT: bold;FONT-SIZE: 9pt;PADDING-BOTTOM: 0px;BORDER-LEFT: #000000 1px solid;COLOR: #000000;PADDING-TOP: 0px;BORDER-BOTTOM: #000000 1px solid;FONT-FAMILY: Arial, helvetica, sans-serif;HEIGHT: 10px;}")
		MyFile.Write(".tdborder_1{BORDER-RIGHT: #000000 1px solid;PADDING-RIGHT: 4px;BORDER-TOP: #000000 1px solid;PADDING-LEFT: 4px;FONT-SIZE: 9pt;PADDING-BOTTOM: 0px;BORDER-LEFT: #000000 1px solid;COLOR: #000000;PADDING-TOP: 0px;BORDER-BOTTOM: #000000 1px solid;FONT-FAMILY: Arial, helvetica, sans-serif;HEIGHT: 20px}")
		MyFile.Write(".tdborder_1_Pass{BORDER-RIGHT: #000000 1px solid;PADDING-RIGHT: 4px;BORDER-TOP: #000000 1px solid;PADDING-LEFT: 4px;FONT-SIZE: 9pt;PADDING-BOTTOM: 0px;BORDER-LEFT: #000000 1px solid;COLOR: #00ff00;PADDING-TOP: 0px;BORDER-BOTTOM: #000000 1px solid;FONT-FAMILY: Arial, helvetica, sans-serif;HEIGHT: 20px}")
		MyFile.Write(".SnapShotLink_style{PADDING-RIGHT: 4px;PADDING-LEFT: 4px;FONT-SIZE: 9pt;PADDING-BOTTOM: 0px;COLOR: #0000EE;PADDING-TOP: 0px;FONT-FAMILY: Arial, helvetica, sans-serif;HEIGHT: 20px}")
		MyFile.Write(".tdborder_1_Fail{BORDER-RIGHT: #000000 1px solid;PADDING-RIGHT: 4px;BORDER-TOP: #000000 1px solid;PADDING-LEFT: 4px;FONT-SIZE: 9pt;PADDING-BOTTOM: 0px;BORDER-LEFT: #000000 1px solid;COLOR: #ff0000;PADDING-TOP: 0px;BORDER-BOTTOM: #000000 1px solid;FONT-FAMILY: Arial, helvetica, sans-serif;HEIGHT: 20px}")
		MyFile.Write(".tdborder_1_NotExecuted{BORDER-RIGHT: #000000 1px solid;PADDING-RIGHT: 4px;BORDER-TOP: #000000 1px solid;PADDING-LEFT: 4px;FONT-SIZE: 9pt;PADDING-BOTTOM: 0px;BORDER-LEFT: #000000 1px solid;COLOR: #0000FF;PADDING-TOP: 0px;BORDER-BOTTOM: #000000 1px solid;FONT-FAMILY: Arial, helvetica, sans-serif;HEIGHT: 20px}")
		MyFile.Write(".tdborder_1_Done{BORDER-RIGHT: #000000 1px solid;PADDING-RIGHT: 4px;BORDER-TOP: #000000 1px solid;PADDING-LEFT: 4px;FONT-SIZE: 9pt;PADDING-BOTTOM: 0px;BORDER-LEFT: #000000 1px solid;COLOR: #ffcc00;PADDING-TOP: 0px;BORDER-BOTTOM: #000000 1px solid;FONT-FAMILY: Arial, helvetica, sans-serif;HEIGHT: 20px}")
		MyFile.Write(".tdborder_1_Skipped{BORDER-RIGHT: #000000 1px solid;PADDING-RIGHT: 4px;BORDER-TOP: #000000 1px solid;PADDING-LEFT: 4px;FONT-SIZE: 9pt;PADDING-BOTTOM: 0px;BORDER-LEFT: #000000 1px solid;COLOR: #00ccff;PADDING-TOP: 0px;BORDER-BOTTOM: #000000 1px solid;FONT-FAMILY: Arial, helvetica, sans-serif;HEIGHT: 20px}")
		MyFile.Write(".heading {FONT-WEIGHT: bold; FONT-SIZE: 17px; COLOR: #005484;FONT-FAMILY: Arial, Verdana, Tahoma, Arial;}")
		MyFile.Write(".style1 { border: 1px solid #8eb3d8;padding: 0px 4px;FONT-WEIGHT: bold;FONT-SIZE: 9pt;COLOR: #000000;FONT-FAMILY: Arial, helvetica, sans-serif;HEIGHT: 20px;width: 180px;}")
		MyFile.Write(".style3 { border: 1px solid #8eb3d8;padding: 0px 4px;FONT-WEIGHT: bold;FONT-SIZE: 9pt;COLOR: #000000;FONT-FAMILY: Arial, helvetica, sans-serif;HEIGHT: 20px;width: 2px;}")
		MyFile.Write("</style>")
		
		''@Setting up body (content) of the HTML file
		MyFile.Write("<body>")
		
		'MyFile.Write ("<table cellSpacing='0' cellPadding='0' border='0' align='center' style='width:96%; margin-left:20px;'><td class='subheading1' colspan=5 align=center><p style='font-size:1.8em'><body link='#00ff00'>" & strTestCaseName &" Test Case Report </body></td><tr></tr></table>")
		MyFile.Write("</table>")
		MyFile.Write ("<table cellSpacing='0' cellPadding='0' border='0' align='center' style='width:96%; margin-left:20px;'>")
		''@Test Step Status
		MyFile.Write("<TR></TR>")
		MyFile.Write("<TR>")
		MyFile.Write("<TD class='subheading' align='center'>Application Name</TD>")
		MyFile.Write("<TD class='subheading' align='center'>Platform</TD>")
		MyFile.Write("<TD class='subheading' align='center'>Device Version</TD>")
		MyFile.Write("<TD class='subheading' align='center'>Device Model</TD>")
		MyFile.Write("<TD class='subheading' align='center'>Build Version</TD>")
		MyFile.Write("<TD class='subheading' align='center'>Agent </TD>")
		MyFile.Write("<TD class='subheading' align='center'>Protocol </TD>")
		MyFile.Write("<TD class='subheading' align='center'>nativeAutomation </TD>")
		MyFile.Write("</TR>")
		MyFile.Write("<TR>")
		MyFile.Write("<TD class='tdborder_1' align='center'>" & iDict("AppName")&"</TD>")
		MyFile.Write("<TD class='tdborder_1' align='center'>" & iDict("Platform")&"</TD>")
		MyFile.Write("<TD class='tdborder_1' align='center'>" & iDict("DeviceOS")&"</TD>")
		MyFile.Write("<TD class='tdborder_1' align='center'>" & Environment("devicemodel") &"</TD>")
		MyFile.Write("<TD class='tdborder_1' align='center'>" & Environment("buildnumber") &"</TD>")
		MyFile.Write("<TD class='tdborder_1' align='center'>" & Environment("agentversion") &"</TD>")
		MyFile.Write("<TD class='tdborder_1' align='center'>" & Environment("protocolversion") &"</TD>")
		MyFile.Write("<TD class='tdborder_1' align='center'>" & Environment("nativeautomation") &"</TD>")
		MyFile.Write("</TR>")
        Environment("strStartExecutionTime") = Now()
        If objFSO.FileExists (Environment("strConfig")) Then
        	objFSO.DeleteFile Environment("strConfig") , True
        End If
        If objFSO.FileExists (Environment("strSummary")) Then
        	objFSO.DeleteFile Environment("strSummary"), True
        End If
Else
        Set MyFile = objFSO.OpenTextFile(strReportPath,1, false)
		strText = MyFile.ReadAll()
		MyFile.Close
        'strText = Left(strText,len(strText)-14)
		strText = RTrim(strText)
		Set MyFile = objFSO.OpenTextFile(strReportPath,2,false)
		MyFile.Write(strText)
		MyFile.Close
		'Code to remove existing test results in case the test is being executed again
		intPosition = InStr(1, strText, Environment("TestName"), 1)
		
		Do While intPosition > 0	
			intPosition = InStr(1, strText, Environment("TestName"), 1)
		
			If InStr(intPosition-20, strText, "class='heading'>", 1) > 0 Then	
				If InStr(1, strText, Environment("TestName"), 1) > 0 Then
					strTableStart = Mid(strText, 1, intPosition)
					intStartPosition = InStrRev(strTableStart, "<table cellSpacing='0'", Len(strTableStart), 1)
					
					strTableEnd1 = Mid(strText, intPosition)
					intFirstOccurrence = InStr(1, strTableEnd1, "<table cellSpacing='0'", 1)
					intEndPosition = (intPosition + intFirstOccurrence) - 1
					strTableEnd2 = Mid(strText, intEndPosition)
					intSecondOccurrence = InStr(23, strTableEnd2, "<table cellSpacing='0'", 1)
					intEndPosition = (intEndPosition + intSecondOccurrence) - 1
					
					strText = Replace(strText, Mid(strText, intStartPosition, intEndPosition-intStartPosition), "")
				End If
			Else
				'Exit if no more Test result tables are found for Environment("TestName")
				Exit Do
			End If
		Loop
		MyFile.Write(strText)

	End If
'
	Set MyFile = objFSO.OpenTextFile(Environment("ReportPath")  ,8,false)

	MyFile.Write("<table cellSpacing='0' cellPadding='0' width='96%' border='0' align='center' style='height: 40px'><tr><td align=center><span class='heading'>" & Environment("TestName") &" </span><br /></td></tr></table>")
'	MyFile.Write("<table>")
'	MyFile.Write("<TR>")
'	MyFile.Write("TD class ='heading' align = 'center'>" & strTestCaseName & " Execution Result</TD>")
'	MyFile.Write("</TR>")
'	MyFile.Write("</table>")

	MyFile.Write("<table cellSpacing='0' cellPadding='0' border='0' align='center' style='width:96%; margin-left:20px;'>")
	MyFile.Write("<TR></TR>")
	MyFile.Write("<TR>")
	MyFile.Write("<TD class='subheading' align='center'>Case No.</TD>")
	MyFile.Write("<TD class='subheading' align='center'>Method Name</TD>")
	MyFile.Write("<TD class='subheading' align='center'>Test Case Description</TD>")
	MyFile.Write("<TD class='subheading' align='center'>Expected Result</TD>")
	MyFile.Write("<TD class='subheading' align='center'>Actual Result</TD>")
	MyFile.Write("<TD class='subheading' align='center'>Status</TD>")
	MyFile.Write("</TR>")

	MyFile.Close

	If Not objFSO.FileExists(Environment("strConfig")) Then
		Set MyFile = objFSO.CreateTextFile(Environment("strConfig"),false)
		MyFile.WriteLine("intPassCount=0")
		MyFile.WriteLine("intFailCount=0")
		MyFile.WriteLine("intNotRun=0")
		MyFile.WriteLine("ReportPath=" & strReportPath)
		MyFile.WriteLine("StartingTime=" & Now())
		MyFile.Close
	End If

	If Not  objFSO.FileExists(Environment("strSummary") ) Then
		MySummaryFile = objFSO.CreateTextFile(Environment("strSummary"),false)
		MySummaryFile.close
	End If

	Environment("ReportPath") = strReportPath
	Environment("intPassCount") = 0
	Environment("intFailCount") = 0
	Environment("intNotRun") =  0
	Environment("intStepNo") = 0
	Environment("strStartTime") = Now()
	Environment("Status") = ""
	Environment("MethodName") = ""
	iDict("TotalTestCaseExecuted") =  0

	Set objFSO = nothing
	Err.Clear
	On Error GoTo 0
End Function

'###############################################################################################################################################################################

'##############################################################################################'##########################################################################################################################
''@Function:		EndTestIteration
''@Description:   This function can be used to end test  report and  genearte  result summary  in html report file.
''@Return Type:	  none
''@Created By:		Shweta & Amit
''@Created On:		27-May-2013
''@Example :  EndTestIteration
''--------------------------------------------------------------------------------------------------------------------------
Function EndTestIteration()
	On Error Resume Next

	strReportLink = ""
	End_Time  = Now()
	
'############################## Added on 24th September #####################################
	'Code to calculate time
    TotalTime_Secs  = Datediff("s",Environment("strStartTime") ,End_Time)

	Total_Execution_Time = FormatDateTime(Int(TotalTime_Secs/3600) & ":" & Int((TotalTime_Secs Mod 3600)/60),4) & ":" & Int(TotalTime_Secs Mod 60)

'##########################################################################################
    'Code to read  config.ini file for pass , fail , total and reportpath
	Set iDict = CreateObject("Scripting.Dictionary")
	Set objFSO = CreateObject("Scripting.FileSystemObject")
	
	Set objFile = objFSO.OpenTextFile (Environment("strConfig"),1,false)
	'Set objFile = objFSO.OpenTextFile ( "C:\Users\shwetab\Desktop\config.ini")
	i = 0
	Do Until objFile.AtEndOfStream
		strNextLine = objFile.Readline
		If strNextLine <> "" Then
			arrValue = Split(Replace(strNextLine , " " , "") , "=")
			iDict.Add arrValue(0) , arrValue(1)
		'msgbox iDict(arrValue(0))
		End If
	Loop
	objFile.Close

	arrMethods = dicMethod.Keys

	iDict("intPassCount") = iDict("intPassCount") + Environment("intPassCount") 
	iDict("intFailCount") = iDict("intFailCount") + Environment("intFailCount") 
	iDict("intNotRun")=  iDict("intNotRun")  + Environment("intNotRun")

	Set objFile = objFSO.OpenTextFile(Environment("strConfig"),2,false)
	objFile.WriteLine("intPassCount=" & iDict("intPassCount"))
	objFile.WriteLine("intFailCount=" & iDict("intFailCount"))
	objFile.WriteLine("ReportPath=" & iDict("ReportPath"))
	objFile.WriteLine("intNotRun=" & iDict("intNotRun"))
	objFile.WriteLine("StartingTime=" &iDict("startingTime"))
'	objFile.WriteLine("intCurrentRun=" & iDict("intCurrentRun"))
	objFile.Close

	On Error Resume Next
	Set objFSO = CreateObject("Scripting.FileSystemObject")

	'@open report file in append mode
	strTextFile = Environment("ReportPath")
	Set MyFile = objFSO.OpenTextFile( strTextFile , 8, true)

	intTotalRun =   iDict("intPassCount") +   iDict("intFailCount") 

	MyFile.Write("<TR></TR>")
	MyFile.Write("<TR>")
	MyFile.Write("<TD class='subheading' align='center'>Total TestCase Run</TD>")
	MyFile.Write("<TD class='subheading' align='center'>Test Case Pass</TD>")
	MyFile.Write("<TD class='subheading' align='center'>Test Case Fail</TD>")
	MyFile.Write("<TD class='subheading' align='center'>Not Run</TD>")
	MyFile.Write("<TD class='subheading' align='center'>Execution Machine OS </TD>")
	MyFile.Write("<TD class='subheading' align='center'>Test Run Duration </TD>")
	MyFile.Write("</TR>")

	
	MyFile.Write("<TR>")
	MyFile.Write("<TD class='tdborder_1' align='center'>" & Cint( Environment("intPassCount")) + Cint( Environment("intFailCount"))  &"</TD>")
	MyFile.Write("<TD class='tdborder_1' align='center'>" & Cint(Environment("intPassCount") ) &"</TD>")
	MyFile.Write("<TD class='tdborder_1' align='center'>" & Cint(Environment("intFailCount") )&"</TD>")
	MyFile.Write("<TD class='tdborder_1' align='center'>" & Environment("intNotRun") &"</TD>") 
	MyFile.Write("<TD class='tdborder_1' align='center'>" & Replace(Environment("OS") , "Workstation" , "") &"</TD>")
	MyFile.Write("<TD class='tdborder_1' align='center'>" & Total_Execution_Time  &"</TD>")
	'MyFile.Write("<TD class='tdborder_1' align='center'>" & strReportLink &"</TD>")
	MyFile.Write("</TR>")
	MyFile.Write("</table>")
	MyFile.Write("</table>")


	dicTestCaseStatus.Add  Environment("TestName") ,  Environment("intPassCount") & ", "  & Environment("intFailCount") &"," & Environment("intNotRun") 
	Set objFile = objFSO.OpenTextFile(Environment("strSummary"),8 , True)
	arrKeys = dicTestCaseStatus.Keys
	arrValues =  dicTestCaseStatus.Items
	objFile.WriteLine(arrKeys(0) &"," &arrValues(0))
	'objFile.WriteLine  Environment("TestName") ,  Environment("intPassCount") & ", "  & Environment("intFailCount") &"," & Environment("intNotRun")
	objFile.Close


'Set MyFile = objFSO.OpenTextFile(Environment("ReportPath")  , 1 , false)
'strText = MyFile.ReadAll()
'MyFile.Close
'strToFind = "<table cellSpacing='0' cellPadding='0' width='96%' border='0' align='center' style='height: 40px'><tr><td align=center><span class='heading'>Result Summary </span>"
'If Instr(1 , Replace(strText , " " ,"") , Replace(strToFind , " " , "")) >0  Then
'	arrTextToRemove = Split(strText, strToFind)
'	'arr = Split(arrTextToRemove(1) . "<table cellSpacing='0' cellPadding='0' width='96%' border='0' ")
'	strText = Replace(strText , strToFind & arrTextToRemove(0) , "")
'	Set MyFile = objFSO.OpenTextFile(Environment("ReportPath")  ,2,false)
'	MyFile.Write(strText)
'	MyFile.Close
'End If

Set objFSO = CreateObject("Scripting.FileSystemObject")
Set MyFile = objFSO.OpenTextFile(Environment("ReportPath")  , 1 , false)
strText = MyFile.ReadAll()
MyFile.Close
strToFind = "<table cellSpacing='0' cellPadding='0' width='96%' border='0' align='center' style='height: 40px'><tr><td align=center><span class='heading'>Result Summary </span>"
If Instr(1 , Replace(strText , " " ,"") , Replace(strToFind , " " , "")) >0  Then
	arrTextToRemove = Split(strText, strToFind)
	arr = Split(arrTextToRemove(1)  , "</html>")
	strText = Replace(strText , strToFind & arr(0) &"</html>" , "")
	Set MyFile = objFSO.OpenTextFile(Environment("ReportPath")  ,2,false)
	MyFile.Write(strText)
	MyFile.Close
End If

'###########################################################
'Code to calculate total time taken in execution
   
	End_Time = Now()
	'###### original #######
    TotalTime_Secs  = Datediff("s",iDict("startingTime") ,End_Time)
    Total_Execution_Time = FormatDateTime(Int(TotalTime_Secs/3600) & ":" & Int((TotalTime_Secs Mod 3600)/60),4) & ":" & Int(TotalTime_Secs Mod 60)
 
    '#########original ###########
    
    TotalTime_Secs  = Datediff("s",Environment("strStartExecutionTime") ,End_Time)
	Total_Execution_Time = FormatDateTime(Int(TotalTime_Secs/3600) & ":" & Int((TotalTime_Secs Mod 3600)/60),4) & ":" & Int(TotalTime_Secs Mod 60)
	
	'###################
	Set MyFile = objFSO.OpenTextFile(Environment("ReportPath")  ,8,false)

        MyFile.Write("<table cellSpacing='0' cellPadding='0' width='96%' border='0' align='center' style='height: 40px'><tr><td align=center><span class='heading'>Result Summary </span><br /></td></tr></table>")
		MyFile.Write ("<table cellSpacing='0' cellPadding='0' border='0' align='center' style='width:96%; margin-left:20px;'>")
		MyFile.Write("<TR></TR>")
		MyFile.Write("<TR>")
		'MyFile.Write("<TD class='subheading' align='center'>Windows OS</TD>")
		MyFile.Write("<TD class='subheading' align='center'>Total TestCase Executed</TD>")
		MyFile.Write("<TD class='subheading' align='center'>Total TestCase Passed</TD>")
		MyFile.Write("<TD class='subheading' align='center'>Total TestCase Failed</TD>")
		MyFile.Write("<TD class='subheading' align='center'>Total Not Run </TD>")
		MyFile.Write("<TD class='subheading' align='center'>Run Duration</TD>")		
		MyFile.Write("</TR>")
		MyFile.Write("<TR>")
		'commented this line
		MyFile.Write("<TD class='tdborder_1' align='center'>" & Cint( iDict("intPassCount")) + Cint( iDict("intFailCount")) &"</TD>")

		'##################  added this line ##########################################################
		'MyFile.Write("<TD class='tdborder_1' align='center'>" & Cint( iDict("TotalTestCaseExecuted")) &"</TD>")
		'#########################################################################################
		MyFile.Write("<TD class='tdborder_1' align='center'>" & iDict("intPassCount")  &"</TD>")
		MyFile.Write("<TD class='tdborder_1' align='center'>"& iDict("intFailCount") &"</TD>")
		MyFile.Write("<TD class='tdborder_1' align='center'>"& iDict("intNotRun")&"</TD>")
		MyFile.Write("<TD class='tdborder_1' align='center'>" &  Total_Execution_Time  &"</TD>")
		MyFile.Write("</TR>")

		'########################################################################################

		MyFile.Write("<table cellSpacing='0' cellPadding='0' width='96%' border='0' align='center' style='height: 40px'><tr><td align=center><span class='heading'>Result Summary by Object </span><br /></td></tr></table>")

		MyFile.Write ("<table cellSpacing='0' cellPadding='0' border='0' align='center' style='width:96%; margin-left:20px;'>")
		MyFile.Write("<TR></TR>")
		MyFile.Write("<TR>")
		'MyFile.Write("<TD class='subheading' align='center'>Windows OS</TD>")
		MyFile.Write("<TD class='subheading' align='center'>Object Name</TD>")
		MyFile.Write("<TD class='subheading' align='center'>Test Case Passed</TD>")
		MyFile.Write("<TD class='subheading' align='center'>Test Case Failed</TD>")
		MyFile.Write("<TD class='subheading' align='center'>Not Run</TD>")
		MyFile.Write("<TD class='subheading' align='center'>Total Test Case Executed</TD>")
		
		MyFile.Write("</TR>")

	Set objFile = objFSO.OpenTextFile (Environment("strSummary"),1,false)
	'Set objFile = objFSO.OpenTextFile ( "C:\Users\shwetab\Desktop\config.ini")
	i = 0
	Do Until objFile.AtEndOfStream
		strNextLine = objFile.Readline
		If strNextLine <> "" Then
			arrValue = Split(Replace(strNextLine , " " , "") , ",")
			strTestCaseName = arrValue(0)
			intPassCount  = arrValue(1)
			intFailCount  = arrValue(2)
			intNoRun  = arrValue(3)
			intTotal   =  Cint(intPassCount ) + Cint( intFailCount ) 
		    MyFile.Write("<TR>")

		'commented this line
		MyFile.Write("<TD class='tdborder_1' align='center'>" & strTestCaseName &"</TD>")
		MyFile.Write("<TD class='tdborder_1' align='center'>" & intPassCount  &"</TD>")
		MyFile.Write("<TD class='tdborder_1' align='center'>"& intFailCount  &"</TD>")
		MyFile.Write("<TD class='tdborder_1' align='center'>"& intNoRun &"</TD>")
		MyFile.Write("<TD class='tdborder_1' align='center'>" & intTotal &"</TD>")
		MyFile.Write("</TR>")
			
		End If
	Loop
	objFile.Close

	'########################################################################################
	'Close the viewer
	'Window("regexpwndtitle:=deviceViewer").Close


	MyFile.Write("</body></html>")
	MyFile.Close
	Set objFSO = nothing

Dim dbexample
Dim sqlQuery
' Create the conection object.
Set dbexample = CreateObject("ADODB.Connection")
'connecting to the database the details already provided with windows
dbexample.Open("DSN=CACHE")

Dim intRecordCount
'Get datatable record count and perform all action in loop
intRecordCount = DataTable.GetSheet("Report Step Values").GetRowCount
For i = 1 to intRecordCount
strDesc=DataTable.Value("strStepDescription" , "Report Step Values" )
strExpectedResult=DataTable.Value("strExpectedResult" , "Report Step Values" )
strActualResult=DataTable.Value("strActualResult" , "Report Step Values" )
strStatus=DataTable.Value("strStatus" , "Report Step Values" )
strTestExecutionTime=DataTable.Value("strTestExecutionTime" , "Report Step Values" )
strMethodName=DataTable.Value("strMethodname" , "Report Step Values" )
strCaseID=DataTable.Value("strCaseID" , "Report Step Values" )
strScenarioID=DataTable.Value("strScenarioID" , "Report Step Values" )
'dbexample.Execute "INSERT INTO flat_table(Product, ProductVersion, BuildType, BuildVersion, AgentVersion, ProtocolVersion, AUTName, Platform, DeviceVersion, DeviceModel, ExecutionMachineOS, ExecutionTime, Object, ScenarioID, CaseID, MethodName, TestCaseDesc, ExpectedResult, ActualResult, Status, ExecutedByUser, ExecutedOnMachine, ReasonForFailure) values('" &Parameter(0)& "' , '" & Parameter(1) &"' ,' "  &Parameter(2) &"' , '"& Parameter(3)& "',' "& Parameter(4) &"',' "& Parameter(5) &"',' "& Parameter(6) &"',' "& Environment("platform") &"',' "& Parameter(8) &"',' "& Parameter(9) &"',' "&Parameter(10)  &"',' "& Parameter(11)&"' ,'"& Parameter(12) &"',' "&Parameter(13) &"',' "& Parameter(14) &"',' "& Parameter(15) &"',' "& Parameter(16) &"',' "& Parameter(17) &"',' "& Parameter(18) &"',' "& Parameter(19) &"',' "& Parameter(20) &"',' "& Parameter(21) &"',' "& Parameter(22) &"');"
dbexample.Execute "INSERT INTO flat_table(Product, ProductVersion, BuildType, BuildVersion, AgentVersion, ProtocolVersion, AUTName, Platform, DeviceVersion, DeviceModel, ExecutionMachineOS, ExecutionTime, Object, ScenarioID, CaseID, MethodName, TestCaseDesc, ExpectedResult, ActualResult, Status, ExecutedByUser, ExecutedOnMachine, ReasonForFailure) values ('" & Environment("strProduct") & "' , '" & Environment("strProductVersion")  &"' ,' "  &  Environment("strBuildType")  &"' , '"& Environment("buildnumber") & "',' "&Environment("agentversion")&"',' "&Environment("protocolversion") &"',' "& UCase( iDict ( "AppName"))  &"',' "& Environment("platform")  &"' ,' "& Environment("osversion") &"',  ' "& Environment("devicemodel") &" ' ,     ' " &Environment("OS") &"',' "&  strTestExecutionTime  &"' ,'"& Environment("TestName") &"',' "&Environment("intStepNo")  &"',' "&intStep  &"',' "& strMethodName  &"',' "&   strDesc &"',' "& strExpectedResult &"',' "& strActualResult  &"',' "& strStatus &"',' "& Environment("dcuser") &"',' "& Environment("strIP") &"',' "& "N/A"&"');"
'dbexample.Execute "INSERT INTO flat_table(Product, ProductVersion, BuildType, BuildVersion, AgentVersion, ProtocolVersion, AUTName, Platform, DeviceVersion, DeviceModel, ExecutionMachineOS, ExecutionTime, Object, ScenarioID, CaseID, MethodName, TestCaseDesc, ExpectedResult, ActualResult, Status, ExecutedByUser, ExecutedOnMachine, ReasonForFailure) values('" & "Trust "& "' , '" & strProductVersion &"' ,' " & strBuildType &"' , '"& Environment("buildnumber") & "',' "&Environment("agentversion")&"',' "&Environment("protocolversion") &"',' "& UCase( iDict("AppName")) &"',' "& Environment("platform") &"',' "& Environment("osversion") &"',' "& Environment("devicemodel") &"',' "&Environment("OS") &"',' "& arrExecutionResults(Environment(intRow) , 4) &"' ,'"& Parameter(12) &"',' "&Parameter(13) &"',' "&intStep &"',' "& arrExecutionResults(Environment(intRow) , 5) &"',' "& arrExecutionResults(Environment(intRow) , 0) &"',' "& arrExecutionResults(Environment(intRow) , 1) &"',' "& arrExecutionResults(Environment(intRow) , 2) &"',' "& arrExecutionResults(Environment(intRow) , 3) &"',' "& Environment("dcuser") &"',' "& strIP &"',' "& "N/A"&"');"
'dbexample.Execute "INSERT INTO flat_table(Product, ProductVersion, BuildType, BuildVersion, AgentVersion, ProtocolVersion, AUTName, Platform, DeviceVersion, DeviceModel, ExecutionMachineOS, ExecutionTime, Object, ScenarioID, CaseID, MethodName, TestCaseDesc, ExpectedResult, ActualResult, Status, ExecutedByUser, ExecutedOnMachine, ReasonForFailure) values('" & Environment("strProduct") & "' , '"& Environment("strProductVersion")"' ,' "  &  Environment("strBuildType")  &"' , '"& Environment("buildnumber") & "',' "&Environment("agentversion")&"',' "&Environment("protocolversion") &"',' "& UCase( iDict("AppName")) &"',' "& Environment("platform") &"',' "& Environment("osversion") &"',' "& Environment("devicemodel") &"',' "&Environment("OS") &"',' "&   DataTable.Value("strTestExecutionTime" , "Report Step Values") &"' ,'"& Environment("TestName") &"',' "&Environment("intStepNo")  &"',' "&intStep &"',' "& DataTable.Value("strMethodname" , "Report Step Values")  &"',' "&   DataTable.Value("strStepDescription" , "Report Step Values" &"',' "& DataTable.Value("strExpectedResult" , "Report Step Values") &"',' "& DataTable.Value("strActualResult" , "Report Step Values")  &"',' "& DataTable.Value("strStatus" , "Report Step Values") &"',' "& Environment("dcuser") &"',' "& strIP &"',' "& "N/A"&"');"
 DataTable.Value"strTestExecutionTime" , "Report Step Values" 
DataTable.GetSheet("Report Step Values").SetNextRow
'dbexample.Execute "INSERT INTO flat_table(Product, ProductVersion, BuildType, BuildVersion, AgentVersion, ProtocolVersion, AUTName, Platform, DeviceVersion, DeviceModel, ExecutionMachineOS, ExecutionTime, Object, ScenarioID, CaseID, MethodName, TestCaseDesc, ExpectedResult, ActualResult, Status, ExecutedByUser, ExecutedOnMachine, ReasonForFailure) values ('" & Environment("strProduct") & "' , '" & Environment("strProductVersion")  &"' ,' "  &  Environment("strBuildType")  &"', '"& Environment("buildnumber") & "',' "&Environment("agentversion")&"',' "&Environment("protocolversion") &"',' "& UCase( iDict ( "AppName"))  &"');"

Next

dbexample.Close
Set dbexample = Nothing
		'Code to attach file with QC
	
	Set nowTest = QCUtil.CurrentTestSet
	
	Set attachmentPath = nowTest.Attachments
	
	Set nowAttachment = attachmentPath.AddItem(Null)
		
	nowAttachment.FileName = Environment("ReportPath") 
	
	nowAttachment.Type = 1
	
	nowAttachment.Post()
	On Error GoTo 0
End Function



'##########################################################################################################################




'##########################################################################################################################
''@Function:		ReportStep
''@Description:   This function can be used to report  step description in html file
''@Return Type:	  none
''@Created By:		Shweta
''@Created On:		28-May-2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	strMethodName 
''@Param Type:   	String
''@Param Drtn: 		In
''@Param Desc: 		Name of the method
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	strStepDesc 
''@Param Type:   	String
''@Param Drtn: 		In
''@Param Desc: 		Step Description
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	strExpectedResult 
''@Param Type:   	String
''@Param Drtn: 		In
''@Param Desc: 		Step's expected result
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	strActualResult 
''@Param Type:   	String
''@Param Drtn: 		In
''@Param Desc: 		Step's Actual result
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	strStatus 
''@Param Type:   	String
''@Param Drtn: 		In
''@Param Desc: 	 Step's status ( It can be Pass , Fail or Not Run status)

''@ Example : ReportStep  "Swipe"  , "Verify Swipe with direction eUP" , "Swipe gesture should be performed in direction eUP", "Swipe passed" , "Pass"
''--------------------------------------------------------------------------------------------------------------------------
Function ReportStep( strMethodName, strStepDesc, strExpectedResult, strActualResult, strStatus)

	On Error Resume Next
	strStartTime = Now()
	Set objFSO = CreateObject("Scripting.FileSystemObject")
	Environment("ReportStepCount") = Environment("ReportStepCount") + 1
	'Environment("Status")  = strStatus
	'@open report file in append mode
	strTextFile = Environment("ReportPath")
	Set objFile = objFSO.OpenTextFile( strTextFile , 8, true)

	'@write test result on report file
	If  Not dicMethod.Exists(strMethodName) Then
		    Environment("intSubStep") =   1
			intStepCount   = Environment("intStepNo") + 1
			intStep  =  intStepCount  &".0" & Environment("intSubStep")
			Environment("intStepNo") = intStepCount
			Environment("intSubStep")   = Environment("intSubStep")  + 1
	Else
			intStep =  Environment("intStepNo")  &".0" & Environment("intSubStep")
			Environment("intSubStep") = Environment("intSubStep")  + 1
	End If

	objFile.WriteLine("<TR>")
	objFile.WriteLine("<td class='tdborder_1'  align='center'>" &  intStep   & "</td>")
	objFile.WriteLine("<td class='tdborder_1'  align='center'>" &  strMethodName   & "</td>")
	objFile.WriteLine("<td class ='tdborder_1'>"  &  strStepDesc  &  "</td>")
	objFile.WriteLine("<td class ='tdborder_1'>"  &  strExpectedResult  & "</td>")


'###################################################################################################
	If Not dicMethod.Exists(strMethodName) Then
		dicMethod.Add strMethodName, strStatus
	Else
		If LCase(strStatus) = "fail" Then
			dicMethod(strMethodName) = "Fail"
		End If
	End If


'##################################################################################################
	If  Not MobiDevice("micclass:=MobiDevice").Exist(4) Then
		strActualResult = "VIEWER CRASHED OR STOPPED RESPONDING HENCE EXITING TEST -->"&Environment("TestName")
     	sSscreenshotFile = Environment("ScreenshotPath") & "\" & Environment("TestName") + "_"  & Replace(Date,"/","_") & "_" & Hour(Now) & "_" & Minute(Now) & "_" & Second(Now) & ".bmp"
       Window("regexpwndtitle:=deviceViewer").CaptureBitmap sSscreenshotFile ,True
		sSscreenshotFile = Replace(sSscreenshotFile , Environment("ScreenshotPath")  , "ErrorScreenShots")
    	strStatus  = "Not Run"
		objFile.WriteLine("<td class ='tdborder_1'>" &  strActualResult   & "<br><a href = " & sSscreenshotFile & "> Click here for screenshot</a></td> ")
		objFile.WriteLine("<td  class ='tdborder_1_Fail' width ='20%' align='center'>"  &  strStatus  & " </td>")
		Environment("intNotRun") = Environment("intNotRun") + 1
		EndTestIteration
    	'ExitTest
	End If
'################################################################################################
      
	If Instr(1 , Lcase(strStatus)  , "fail") > 0 Then
		sSscreenshotFile = Environment("ScreenshotPath") & "\" & Environment("TestName") + "_"  & Replace(Date,"/","_") & "_" & Hour(Now) & "_" & Minute(Now) & "_" & Second(Now) & ".bmp"
		Mobidevice("micclass:=MobiDevice").CaptureBitmap sSscreenshotFile,True
		sSscreenshotFile = Replace(sSscreenshotFile , Environment("ScreenshotPath")  , "ErrorScreenShots")
		objFile.WriteLine("<td class ='tdborder_1'>" &  strActualResult   & "<br><a href = " & sSscreenshotFile & "> Click here for screenshot</a></td> ")
		objFile.WriteLine("<td  class ='tdborder_1_Fail' width ='20%' align='center'>"  &  strStatus  & " </td>")
	ElseIf  Instr(1 , Lcase(strStatus)  , "pass") > 0 Then
		objFile.WriteLine("<td class ='tdborder_1'>" &  strActualResult  &  "</td> ")
		objFile.WriteLine("<td  class ='tdborder_1_Pass' width ='20%' align='center'>"  &  strStatus  &  "</td>")
	Else 
	    objFile.WriteLine("<td class ='tdborder_1'>" &  strActualResult  &  "</td> ")
		objFile.WriteLine("<td  class ='tdborder_1_Pass' width ='20%' align='center'>"  &  strStatus  &  "</td>")
	End If
	'End If
	objFile.WriteLine("</TR>")

	If  LCase(strStatus)  = "pass"  Then
			Environment("intPassCount") =  Environment("intPassCount")  + 1
	ElseIf   LCase(strStatus) = "fail"  Then
			Environment("intFailCount")  = Environment("intFailCount")   + 1
	Else 
			Environment("intNotRun")  =  Environment("intNotRun")+ 1
	End If

	objFile.Close
	Set objFSO = nothing

		'Execution time of a testcase

	TotalTime_Secs  = Datediff("s", strStartTime  ,Now ())

	intStepTime  = FormatDateTime(Int(TotalTime_Secs/3600) & ":" & Int((TotalTime_Secs Mod 3600)/60),4) & ":" & Int(TotalTime_Secs Mod 60)
	
DataTable.Value("strStepDescription" , "Report Step Values" )= strStepDesc
DataTable.Value("strExpectedResult" , "Report Step Values" )= strExpectedResult
DataTable.Value("strActualResult" , "Report Step Values" )= strActualResult 
DataTable.Value("strStatus" , "Report Step Values" )= strStatus
DataTable.Value("strTestExecutionTime" , "Report Step Values" )= intStepTime
DataTable.Value("strMethodname" , "Report Step Values" ) = strMethodName
DataTable.Value("strCaseID" , "Report Step Values" ) =  Environment("intSubStep")
DataTable.Value("strScenarioID" , "Report Step Values" )=  Environment("intStepNo") 


	'Set myCurentRun = nothing
	Err.Clear
	On Error GoTo 0
End Function



'##########################################################################################################################
''@Function:		VerifyRowCount
''@Description:		Function returns row count  for passed object eg . MobiWebTable , MobiPicker , MobiList , MobiDropdown
''@Return Type:		Boolean
''@Created By:		Shweta
''@Created On:		28-May-2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	objTestObject 
''@Param Type:   	Object
''@Param Drtn: 		In
''@Param Desc: 		Object  on which RowCount method needs to be executed
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	intRowCount 
''@Param Type:   	Integer
''@Param Drtn: 		In
''@Param Desc: 		Total number of rows in the object
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	intWheelCount 
''@Param Type:  	Integer
''@Param Drtn: 		In
''@Param Desc: 		WheelCount (It can be negative , In range and Out of range integer value)
''--------------------------------------------------------------------------------------------------------------------------
''@Example: Set objTestObject = MobiDevice("Device").MobiDropdown("")
''					  blnResult = VerifyRowCount(objTestObject  , intRowCount)
''--------------------------------------------------------------------------------------------------------------------------

Function VerifyRowCount(objTestObject , intRowCount , intWheelCount)

	On Error Resume Next
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
     Reporter.Filter = rfDisableAll
	
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	'Fetch object type
	strObjectType =  objTestObject.GetTOProperty("micclass")
	VerifyRowCount = False

	'Case :  Execute method  without  parameters
	If  intWheelCount = ""  Then
		intRowReturned = objTestObject.RowCount
		If   intRowReturned   =   intRowCount  AND Len(Err.description) = 0 Then
			VerifyRowCount = True
			Environment("Pass") = "RowCount returned value :"& intRowReturned &Space(2)&"Expected was :"&intRowCount
		Else
			Environment("Fail") = "RowCount returned value :"& intRowReturned &Space(2)&"Expected was :"&intRowCount
		End If 
	'Case : Execute method  with parameters except MobiPicker
	ElseIf Not LCase(strObjectType) = "mobipicker" Then
		strInvalidParam = "Invalid number of parameters."
		intRowReturned  = objTestObject.RowCount (intWheelCount )
		If Instr(1 , LCase(Replace(strInvalidParam , " " , "")) ,   LCase(Replace(Err.Description , " " , ""))) > 0 Then
			VerifyRowCount = True
			Environment("Pass") = "Error thrown on passing invalid parameters :"&strInvalidParam
		Else
			Environment("Fail") = "Error thrown :"&Err.Description&Space(2)&"when expected error message was :"&strInvalidParam
		End If
	Else
		'Case : MobiPicker
		intRowReturned  = objTestObject.RowCount (intWheelCount )

		'Case : Verify method  when wheelcount is negative or Out of range
		If  intWheelCount < 0  OR  CStr(intWheelCount)  > objTestObject.GetROProperty("wheelcount")   Then
			strInvalidWheel = "Invalid picker wheel number assignment"
			If Instr(1 , LCase(Replace(strInvalidWheel , " " , "")) ,   LCase(Replace(Err.Description , " " , ""))) > 0 Then
					VerifyRowCount = True
					Environment("Pass") =  "Error thrown on passing invalid parameters :" & strInvalidWheel
			Else
					Environment("Fail") = "Error thrown :"&Err.Description&Space(2)&"when expected error message was :"& strInvalidWheel
			End If
		Else 
			'Case : Verify method when wheelcount is valid
			If   intRowReturned   =   intRowCount  AND Len(Err.description) = 0 Then
				VerifyRowCount = True
				Environment("Pass") = "RowCount returned value :"& intRowReturned &Space(2)&"Expected was :"&intRowCount
			Else
				Environment("Fail") = "RowCount returned value :"& intRowReturned &Space(2)&"Expected was :"&intRowCount
			End If 				
		End If			
	End If
	
	If   VerifyRowCount AND Err.Description = "" Then
		ReportStep   "RowCount" , Environment("Description"),Environment("ExpectedResult") , Environment("Pass")   , "Pass"
		Reporter.ReportEvent "micPass" ,  Environment("Description")  ,Environment("Pass")
	Else
		ReportStep "RowCount" , Environment("Description"),Environment("ExpectedResult")  , Environment("Fail") & Space(2) & Err.Description , "Fail"
		Reporter.ReportEvent "micFail" ,  Environment("Description")  ,Environment("Fail") &Space(2)&Err.Description
	End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfEnableAll

    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "RowCount" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function

'##########################################################################################################################
''@Function:		VerifyColumnCount
''@Description:		Function returns column count  for passed object eg . MobiWebTable 
''@Return Type:		 Boolean
''@Created By:		  Shweta
''@Created On:		 28-May-2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	Object  on which ColumnCount method needs to be executed
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  intColumnCount 
''@Param Type:   Integer
''@Param Drtn: 		In
''@Param Desc: 	Total number of columns
''--------------------------------------------------------------------------------------------------------------------------

''@Example: Set objTestObject = MobiDevice("Device").MobiWebView("").MobiWebTable("")
''					  blnResult = VerifyColumnCount(objTestObject  , 4)
''--------------------------------------------------------------------------------------------------------------------------
Function VerifyColumnCount (objTestObject , intColumnCount)

	On Error Resume Next
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	VerifyColumnCount = False

	'Fetch column count 
	intColCount = objTestObject.ColumnCount

	If intColumnCount  = intColCount  AND Len(Err.Description) = 0 Then
		VerifyColumnCount = True
		ReportStep "ColumnCount"  , Environment("Description")  , Environment("ExpectedResult") , "Returned" &Space(2) & intColCount & Space(2) & "columns and expected was" &Space(2) &intColumnCount, "Pass"
	Else
		ReportStep "ColumnCount" ,Environment("Description")  , Environment("ExpectedResult") , "Returned "&Space(2) & intColCount &_
		" When ExpectedResult was  "&Space(2) & intColumnCount &Space(2) & Err.Description , "Fail"
	End If

    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "ColumnCount" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If

	Err.Clear
	On Error GoTo 0
End Function

'##########################################################################################################################
''@Function:			VerifyGetCellData
''@Description:		  Function verify text value for the passed cell  with the actual value eg . MobiWebTable 
''@Return Type:		 Boolean
''@Created By:		  Shweta
''@Created On:		 28-May-2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	Object  on which RowCount method needs to be executed
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  strValue 
''@Param Type:   String
''@Param Drtn: 		In
''@Param Desc: 	String value containing  the actual values as stored in the WebTable.
									''Pass string  value stored in WebTable"  :-  validvalues
									''Pass invalid  introw index :- invalidrowindex
									''Pass invalid column index :- invalidcolumnindex
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  strOption 
''@Param Type:   String
''@Param Drtn: 		In
''@Param Desc: 	String value for the following scenarios  validvalues , invalidrowindex , invalidcolumnindex

								
''--------------------------------------------------------------------------------------------------------------------------
''@Example: Set objTestObject = MobiDevice("Device").MobiWebView("").MobiWebTable("")
''					  blnResult = VerifyGetCellData(objTestObject  , 
''--------------------------------------------------------------------------------------------------------------------------
Function VerifyGetCellData(objTestObject , strValue , strOption)

	On Error Resume Next
   Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
   VerifyGetCellData = False
	On Error Resume Next
	Select Case  Lcase(strOption)

	Case "validvalues"
	'Retrieve value for each cell in table and  verify it with the values passed in Input
	arrValues = Split(strValue , ",")
	'Fetch number of rows
	intRows  =  objTestObject.RowCount
	'Fetch number of columns
	intColumns = objTestObject.ColumnCount
	strFailedFor = ""
	arrIndex = 0
	For i = 0 to intRows - 1
		For j = 0 to intColumns - 1
			strData = objTestObject.GetCellData(i , j)
			'Verify  passed value with the returned cell value
			If   LCase(strData)  <>  LCase(arrValues(arrIndex)) Then
				strFailedFor = strFailedFor & "Location" &Space(2) & i &"," &j &VBNewline
			End If
			arrIndex = arrIndex + 1
		Next
	Next

	If strFailedFor = "" Then
		VerifyGetCellData = True
	End If 

		Environment("Pass") = "GetCellData is working correctly"
		Environment("Fail") =  "GetCellData is not working correctly for  " & Space(2) & strFailedFor &Space(2) & Err.Description

	Case "invalidrowindex"
	Err.Clear
	objTestObject.GetCellData strValue , 0
	strErrorMessage =Replace( "Row index is out of range Parameter name: rowIndex" , " " , "")
	'Verify error message for invalid rowindex
	If  Instr( 1 , LCase(Replace (LCase(Replace(Err.Description , " " , ""),Chr(13),""))), LCase(strErrorMessage) )> 0 Then     
		VerifyGetCellData = True
	End If

		Environment("Pass") = "Error message displayed is - '" & Err.Description
		Environment("Fail") = "Error message displayed was - "  & Err.Description & Space(2)  & "Expected was -" & strErrorMessage
	
	Case "invalidcolumnindex"
	Err.Clear
	objTestObject.GetCellData 0 , strValue 
	strErrorMessage =Replace( "Column index is out of range Parameter name: columnIndex", " " , "")
	'Verify error message for invalid column index
	If  Instr( 1 , LCase(Replace (LCase(Replace(Err.Description , " " , ""),Chr(13),""))), LCase(strErrorMessage) )> 0 Then     
		VerifyGetCellData = True
	End If
		Environment("Pass") = "Error message displayed is - '" & Err.Description
		Environment("Fail") = "Error message displayed was - "  & Err.Description & Space(2)  & "Expected was -" & strErrorMessage

	Case "withoutparameter"
	Err.Clear
	objTestObject.GetCellData
	strErrorMessage = LCase("Invalid number of parameters.")
	If  Instr( 1 , LCase(Err.Description), LCase(strErrorMessage) )> 0 Then     
		VerifyGetCellData = True
	End If

		Environment("Pass") = "Error message displayed is - '" & Err.Description
		Environment("Fail") = "Error message displayed was - "  & Err.Description & Space(2)  & "Expected was -" & strErrorMessage
	End Select


	If  VerifyGetCellData AND Err.Description = "" Then
		ReportStep "GetCellData" , Environment("Description") , Environment("ExpectedResult")  ,Environment("Pass") , "Pass"
	Else
		ReportStep "GetCellData" , Environment("Description") , Environment("ExpectedResult")  , Environment("Fail") , "Fail" &Space(2)&Err.Description
	End If

	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "GetCellData" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function

'##########################################################################################################################
''@Function:			VerifyScrollIntoView
''@Description:		  Function  verify  whether passed object is in view or not .
''@Return Type:		 Boolean
''@Created By:		  Shweta
''@Created On:		 28-May-2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	Object  on which ScrollIntoView  method needs to be executed
''--------------------------------------------------------------------------------------------------------------------------
''@Example: Set objTestObject = MobiDevice("Device").MobiWebView("").MobiWebTable("")
''					  blnResult = VerifyScrollIntoView(objTestObject  )
''--------------------------------------------------------------------------------------------------------------------------
Function VerifyScrollIntoView(objTestObject)
   On Error Resume Next
   Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
   Environment("TestStepCount")  = Environment("TestStepCount")  + 1
   VerifyScrollIntoView = False

   Reporter.Filter = rfEnableAll
   Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	wait 5
	Mobidevice("micclass:=MobiDevice").Sync
   'Fetch device height
   intDeviceHeight = Mobidevice("micclass:=MobiDevice").GetROProperty("height")

   'Execute method
   objTestObject.ScrollIntoView
   wait 5
   Mobidevice("micclass:=MobiDevice").Sync

   'Runtime Y value of the object
   intY = objTestObject.GetROProperty("y")

   If  intDeviceHeight > intY AND intY <> 0 AND Err.Description = "" Then
		VerifyScrollIntoView = True
		ReportStep "ScrollIntoView" , Environment("Description") , Environment("ExpectedResult") , "ScrollIntoView working correctly" , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), "ScrollIntoView working correctly"
	Else
		ReportStep "ScrollIntoView" , Environment("Description") , Environment("ExpectedResult")  , "ScrollIntoView is not working correctly"  & Space(2) & Err.Description, "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), "ScrollIntoView is not working correctly" &Space(2)&Err.Description
   End If
   Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
   Reporter.Filter = rfDisableAll
   	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "ScrollIntoView" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
   Err.Clear
   On Error GoTo 0
End Function 




'##########################################################################################################################
''@Function:			OpenURL
''@Description:		  Function  verify  whether passed object is in view or not .
''@Return Type:		 Boolean
''@Created By:		  Shweta
''@Created On:		 28-May-2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	Object  on which ScrollIntoView  method needs to be executed
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  strURL 
''@Param Type:   String
''@Param Drtn: 		In
''@Param Desc: 	URL of the Application
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  intCounter 
''@Param Type:   Integer
''@Param Drtn: 		In
''@Param Desc: 	number of attempts to open the page
''--------------------------------------------------------------------------------------------------------------------------
''@Example: Set objTestObject = MobiDevice("Device").MobiWebView("").MobiWebTable("")
''					  blnResult = OpenURL("www.google.com" , objTestObject , 3  )
''--------------------------------------------------------------------------------------------------------------------------
Sub  OpenURL(strURL, objTestObject , intCounter)

	On Error Resume Next 
   Reporter.Filter = rfEnableAll
	'Prefix  http:// before URL (if not present)
    If Not Left(strURL , 4) = "http" Then
	   strURL = "http://"&strURL
    End If
   
	Set objEdit = Description.Create
	objEdit("micclass").Value = "MobiEdit"
		
		Set objEditChild = MobiDevice("micclass:=MobiDevice").ChildObjects(objEdit)
		objEditChild(0).Click
		wait 1
		objEditChild(0).Send strURL
		Wait 4
		'Hit enter in case of  iOS device
		If Replace(Lcase(MobiDevice("Web Browser").GetROProperty("platform"))  , " " , "") = "androidos" Then
			If MobiDevice("micClass:=MobiDevice").MobiButton("text:=Decline").Exist(8) Then
				MobiDevice("micClass:=MobiDevice").MobiButton("text:=Decline").Click
				wait 4
			End If 
				'MobiDevice("micClass:=MobiDevice").ButtonPress eBACK
		End If

'Check for object existence (Exit  loop if  object exists)
If  objTestObject.Exist(4)  Then
		Exit Sub
Else
		'Recursively call  function 
		While Not (intCounter = 0)
				intCounter = intCounter  - 1
				OpenURL strURL , objTestObject , intCounter
		Wend
 End If

MobiDevice("micclass:=MobiDevice").RefreshObject
On Error GoTo 0 
End Sub


'##########################################################################################################################
''@Function:		VerifyGetItems
''@Description:		Function verify array of items returned
''@Return Type:		 Boolean
''@Created By:		 Shweta
''@Created On:		 5-June-2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	objTestObject 
''@Param Type:   	Object
''@Param Drtn: 		In
''@Param Desc: 		Object  on which GetItems method needs to be executed
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	arrItems 
''@Param Type:   	Array
''@Param Drtn: 		In
''@Param Desc: 		Array of expected items
''--------------------------------------------------------------------------------------------------------------------------
''Set objTestObject = MobiDevice("Device").MobiWebDropdown("Dropdown")
''arrExpectedItems = Array("One" , "Two" , "Three")
''Flag = VerifyGetItems(objTestObject , arrExpectedItems)	
''--------------------------------------------------------------------------------------------------------------------------
Function VerifyGetItems(objTestObject , arrItems)

	On Error Resume Next
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Reporter.Filter = rfEnableAll
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""

	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	
	VerifyGetItems = False
	'Setting default values to 0 
	intItemFound = 0
     strNotFound = ""
	''Assign returned arrary to another array
	arrItemsReturned = objTestObject.GetItems

	
	For i = 0 to UBound(arrItems) 
		For j = 0 to UBound(arrItemsReturned)
					'Compare returned array value with the passed value
					If arrItems(i) = arrItemsReturned(j)   Then
						intItemFound = intItemFound + 1
						Exit For
					End If
               strNotFound = strNotFound & arrItems(i) &","
		Next
	Next
	
	'If  strNotFound = ""  AND  Len(Err.Description) = 0 Then
        If  intItemFound = UBound(arrItems)  + 1 AND  Len(Err.Description) = 0 Then
		VerifyGetItems = True
		ReportStep "GetItems" , Environment("Description") , Environment("ExpectedResult") ,"Item Array returned as ->"&Space(2) & Join( arrItems , ",") , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass")
	Else
		ReportStep "GetItems" , Environment("Description") , Environment("ExpectedResult") , "Fail to map following  items "&Space(2)  & strNotFound & Space(2) & Err.Description , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") &Space(2)& Err.Description 
	End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "GetItems" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If

	Err.Clear
	On Error GoTo 0
End Function


'##########################################################################################################################
''@Function:        CompareBitmap
''@Description: 	Compare two bitmap images and return true if both are not eqaul else return false
''@Return Type:		Boolean
''@Created By:  	Amit
''@Created On:   	17 june 2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  strFirstFilePath 
''@Param Type:   String
''@Param Drtn: 		In
''@Param Desc: 	Path of first image
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  strSecondFilePath 
''@Param Type:   string
''@Param Drtn: 		In
''@Param Desc: Path of second image
''--------------------------------------------------------------------------------------------------------------------------
''@Example: blnFlag = CompareBitmap("C:\image1.bmp","C:\image2.bmp")

''--------------------------------------------------------------------------------------------------------------------------

Function CompareBitmap(strFirstFilePath, strSecondFilePath)
	On Error Resume Next
	Err.Clear
	CompareBitmap = False
	'@create instance of dll file
	Set obj = DotNetFactory.CreateInstance("Compare.Images", Environment.Value("SystemTempDir") & "\MobileLabsAutomation\Compare.dll")

	'@compare bitmaps
	blnFlag = obj.ImageCompare(strFirstFilePath,strSecondFilePath)
	wait 4
	If Len(Err.Description)= 0  AND blnFlag  Then
		CompareBitmap = True
	End If 
	Set obj = Nothing
	Err.Clear
	On Error GoTo 0
End Function


'##########################################################################################################################
''@Function:        VerifyGetRowWithCellText
''@Description: 	Function verifies the GetRowWithCellText method for MobiWebTable
''@Return Type:		Boolean
''@Created By:  	Shweta
''@Created On:   	03 july 2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	Object on which action to be performed
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  strCase 
''@Param Type:   string
''@Param Drtn: 		In
''@Param Desc:  case  i.e. "valid", "validwithonlytext"
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  strText 
''@Param Type:   string
''@Param Drtn: 		In
''@Param Desc:  Text corrosponding to the row 
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  intColumIndex 
''@Param Type:   Int
''@Param Drtn: 		In
''@Param Desc:  Column index
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  intStartRow 
''@Param Type:   Int
''@Param Drtn: 		In
''@Param Desc:  Start row index
''--------------------------------------------------------------------------------------------------------------------------
''			Set objTestObject = MobiDevice("PhoneLookup").MobiWebView("WebView").MobiWebTable("table-id")
''@Example: blnFlag = VerifyGetRowWithCellText(objTestObject, "valid", "Sum", 1, 0)

''--------------------------------------------------------------------------------------------------------------------------

Function VerifyGetRowWithCellText(objTestObject, strCase, strText, intColumIndex, intStartRow)

	On Error Resume Next
    Reporter.Filter = rfEnableAll
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	VerifyGetRowWithCellText = False
	Dim strRow
	
	Select Case Lcase(strCase)

		Case "valid"
			strRow = objTestObject.GetRowWithCellText(strText, intColumIndex, intStartRow)

		Case "validwithonlytext"
			strRow = objTestObject.GetRowWithCellText(strText)

		Case "validwithtextandcolumn"
			strRow = objTestObject.GetRowWithCellText(strText, intColumIndex)

		Case "withoutparameter"
			Reporter.Filter = rfDisableAll
			strRow = objTestObject.GetRowWithCellText()
			Reporter.Filter = rfEnableAll

		Case "withcolumnoutofindex"
			Reporter.Filter = rfDisableAll
			intIndex = objTestObject.GetROProperty("columns")
			strRow = objTestObject.GetRowWithCellText(strText, Cint(intIndex) +1)
			Reporter.Filter = rfEnableAll

		Case "withrowoutofindex"
			intIndex = objTestObject.GetROProperty("rows")
			strRow = objTestObject.GetRowWithCellText(strText, intColumIndex, CInt(intIndex)+1)

	End Select

	If Lcase(strCase) = "withoutparameter" Then
        If Lcase(Err.Description) = "invalid number of parameters." Then
			VerifyGetRowWithCellText = True
		End If
		Environment("Pass") = "Error message displayed is - '" & Err.Description
		Environment("Fail") = "Error message displayed is - '" & Err.Description & "' but expected error message was - Invalid number of parameters."

	ElseIf Lcase(strCase) = "withcolumnoutofindex" Then
		If Lcase(Err.Description) =  "column index is out of range" & VbCrLf & "parameter name: columnindex" Then
			VerifyGetRowWithCellText = True
		End If
		Environment("Pass") = "Error message displayed is - '" & Err.Description
		Environment("Fail") = "Error message displayed is - '" & Err.Description & "' but expected error message was - Column index is out of range Parameter name: columnIndex"

	ElseIf Lcase(strCase) = "withrowoutofindex" Then
		'Check for error message in case of out of  index row
		If strRow = -1 Then
			VerifyGetRowWithCellText = True
		End If
		Environment("Pass") = "Row returned is '-1'"
		Environment("Fail") = "Row returned is - '" & strRow
	Else
		If strRow  > -1 Then
			VerifyGetRowWithCellText = True
		End If
		Environment("Pass") = "Row returned is - " & chr(34) & strRow & chr(34)
		Environment("Fail") = "Row returned is - '" & strRow
	End If

	If VerifyGetRowWithCellText AND Err.Description = "" Then
		ReportStep "GetRowWithCellText" , Environment("Description") , Environment("ExpectedResult") , Environment("Pass")  , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass")
	Else
		ReportStep "GetRowWithCellText" , Environment("Description") , Environment("ExpectedResult") , Environment("Fail")  , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") &Space(2)&Err.Description
	End If

    	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "GetRowWithCellText" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll   
	Err.Clear
	On Error GoTo 0
End Function



'##########################################################################################################################
''@Function:            HideObjectFromView
''@Description: 	 Hides an object from view
''@Created By: 		Manisha Miglani
''@Created On: 		07/22/2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objToHide 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	 Test object to be hidden from view
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name: objParentToScroll 
''@Param Type:   Object
''@Param Drtn: 		In
''@Param Desc: 	 Parent object to be scrolled / swiped
''--------------------------------------------------------------------------------------------------------------------------
''@Example:  set objToHide = MobiDevice("Web Browser").MobiWebView("WebView").MobiWebElement("HTML").MobiWebElement("BODY").MobiWebRadioButton("dinos-id")
'							Set objPar = MobiDevice("Web Browser").MobiWebView("WebView")
'							HideFromView objToHide , objPar
''--------------------------------------------------------------------------------------------------------------------------
Function HideObjectFromView(objToHide , objParentToScroll)

		On Error Resume Next
		'Scroll the web page towards bottom
		objParentToScroll.scroll eBOTTOM
		 'Fetch device height
		 intDeviceHeight = MobiDevice("micclass:=MobiDevice").GetROProperty("height")
		'Runtime Y value of the object
		intY = objToHide.GetROProperty("y")
		'Check for test object;s existence 
		If  intDeviceHeight > intY Then
			'Scroll in opposite direction if the object under test is still in view
			objParentToScroll.Scroll eTOP
		End If 
		On Error GoTo 0
End Function


'##########################################################################################################################
''@Function:            FetchHeaderElement
''@Description: 	 Fetch  text of  Header Element
''@Created By: 		Shweta Bhati
''@Created On: 		06/15/2013
''--------------------------------------------------------------------------------------------------------------------------
''  @ Call 
'  strHeaderText =  FetchHeaderElement
''--------------------------------------------------------------------------------------------------------------------------

Function FetchHeaderElement

	On Error Resume Next
	'Set Default  return value as blank
   FetchHeaderElement = ""
   strNativeAutomation = MobiDevice("micclass:=MobiDevice").GetROProperty("nativeautomation")
	Dim arrObjNum()
	'Set object  for Android device
	If Instr(LCase(MobiDevice("micclass:=MobiDevice").GetROProperty("Platform"))  , "android" ) > 0  Then
		If strNativeAutomation Then
			Set objDesc = Description.Create
				objDesc("micclass").Value = "MobiElement"
				objDesc("nativeclass").Value = "android.widget.TextView"
				objDesc("recursive").Value = "True"
			Set objCol = MobiDevice("name:=PhoneLookup").ChildObjects(objDesc)
			
			For i = 0 To objCol.Count-1
				y = objCol(i).GetROProperty("y")
				ReDim Preserve arrObjNum(i)
				arrObjNum(i) = y
			Next
			
			intmin = MobiDevice("name:=PhoneLookup").GetROProperty("height")
			strmin = 0
			For i = 0 To UBound(arrObjNum) Step 1
				If intmin>arrObjNum(i) and arrObjNum(i)<>0 and arrObjNum(i)<>1 Then
					intmin=arrObjNum(i)
					strmin = i
				End If
			Next
			FetchHeaderElement = objCol(strmin).GetROProperty("text")
		Else
			Set objHeaderElement =  MobiDevice("micclass:=MobiDevice").MobiElement("index:=0" , "visible:=True")
			'Fetch run time value for header element
        	 FetchHeaderElement = objHeaderElement.GetROProperty("text")
		End If
		
	Else
		If strNativeAutomation Then
			Set objDesc = Description.Create
			objDesc("micclass").Value = "MobiElement"
			objDesc("nativeclass").Value = "StaticText"
			objDesc("recursive").Value = "True"
		Else
			Set objDesc = Description.Create
			objDesc("micclass").Value = "MobiElement"
			objDesc("nativeclass").Value = "UILabel"
			objDesc("recursive").Value = "True"
		End If
		Set objCol = MobiDevice("name:=PhoneLookup").ChildObjects(objDesc)
		'msgbox objCol.Count
		For i = 0 To objCol.Count-1
			y = objCol(i).GetROProperty("y")
			ReDim Preserve arrObjNum(i)
			arrObjNum(i) = y
		Next
			
		intMin = LBound(arrObjNum)
		strMin = intMin
		
		For j = 0 To UBound(arrObjNum)
			If j < UBound(arrObjNum) Then
				'Ignore y values that are 0
				If (arrObjNum(j+1) < arrObjNum(intMin)) AND (arrObjNum(j+1) > 10 AND arrObjNum(intMin) > 10)  Then
					intMin = j+1
					strMin = intMin
				ElseIf (arrObjNum(j+1) > arrObjNum(intMin)) AND (arrObjNum(j+1) > 10 AND arrObjNum(intMin) > 10) Then
					strMin = intMin
				ElseIf (arrObjNum(j+1) = arrObjNum(intMin)) AND (arrObjNum(j+1) > 10 AND arrObjNum(intMin) > 10) Then
					strMin = strMin & "," & j+1
				End If
			End If
		Next
			
		If Instr(1,strMin,",")=0 Then
			Dim arrSmallestY()
			ReDim Preserve arrSmallestY(0)
			arrSmallestY(0) = strMin
		Else
			arrSmallestY = Split(strMin, ",")
		End If
			
		For l = 0 To UBound(arrSmallestY)
			intMidX = CInt((objCol(arrSmallestY(l)).GetROProperty("x") + (objCol(arrSmallestY(l)).GetROProperty("x") + objCol(arrSmallestY(l)).GetROProperty("width")))/2)
			intDeviceMidX = CInt(MobiDevice("name:=Device").GetROProperty("width")/2)
			intDiff = Abs(intMidX-intDeviceMidX)
		
			If intDiff < 50 Then
				'objCol(arrSmallestY(l)).highlight
				FetchHeaderElement = objCol(arrSmallestY(l)).GetROProperty("text")
			End If
		Next
		'Set object for iOS device
		'Set objDesc = Description.Create
		'objDesc("micclass").Value = "MobiElement"
		'Set objElementChild =  MobiDevice("micclass:=MobiDevice").ChildObjects(objDesc)
		'Set objHeaderElement =  objElementChild(objElementChild.Count - 1)
		'Fetch run time value for header element
        'FetchHeaderElement = objHeaderElement.GetROProperty("text")
        'End If 
	End If
	On Error GoTo 0 
End Function

'##########################################################################################################################
''@Function:			VerifySetGlobalOffset
''@Description:			Tests the functionality of SetGlobalOffset method for the passed in object
''@Return Type:			Boolean
''@Created By:			Naveen
''@Created On:			8-Oct-2015
''@Modified  by :  		
''@Modified  On : 		
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  		objTestObject 
''@Param Type:   		Object
''@Param Drtn: 			In
''@Param Desc: 			Object for which the SetGlobalOffset method needs to be tested
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  		intXOffset 
''@Param Type:   		Integer
''@Param Drtn: 			In
''@Param Desc: 			Value for x axis offset
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  		intYOffset 
''@Param Type:   		integer
''@Param Drtn: 			In
''@Param Desc: 			Value for y axis offset
''--------------------------------------------------------------------------------------------------------------------------
''@Example: Set objTestObject = MobiDevice("Device").MobiButton("Button_Cancel")
''					  blnResult = VerifySetGlobalOffset(objTestObject, 100, 150)
''--------------------------------------------------------------------------------------------------------------------------   

Function VerifySetGlobalOffset(ByVal objTestObject, ByVal intXOffset, ByVal intYOffset)   
	On Error Resume Next
	Reporter.Filter = rfEnableAll
	Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", "" 
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")

	'Capture initial values
	intX1 = objTestObject.GetROProperty("x")
	intY1 = objTestObject.GetROProperty("y")
	
	'Execute method
	MobiDevice("name:=Trust Browser").SetGlobalOffset intXOffset, intYOffset
	Wait 5
	MobiDevice("name:=Trust Browser").Sync
	
	'Capture final values
	intX2 = objTestObject.GetROProperty("x")
	intY2 = objTestObject.GetROProperty("y")
	
	'Identify diff
	intXOffset1 = intX2 - intX1
	intYOffset1 = intY2 - intY1
	
	'Reset values to default
	MobiDevice("name:=Trust").SetGlobalOffset 0,0
	wait 3
	'Compare the run-time diff with expected offset values
	If intXOffset = intXOffset1 AND intYOffset = intYOffset1 AND Err.Description = "" Then
		VerifySetGlobalOffset = True
		Environment("Pass") = "SetGlobalOffset executed successfully. Expected x offset was: " & intXOffset _
		& ", actual x offset was: " & intXOffset1 & " and expected y offset was: " & intYOffset & _
		", actual y offset was: " & intYOffset1
	Else		
		VerifySetGlobalOffset = False
		Environment("Fail") = "SetGlobalOffset failed. Expected x offset was: " & intXOffset _
		& ", actual x offset was: " & intXOffset & " and expected y offset was: " & intYOffset & _
		", actual y offset was: " & intYOffset &Space(2)&Err.Description
	End If 

	If  VerifySetGlobalOffset AND Err.Description = "" Then
		ReportStep "SetGlobalOffset" , Environment("Description") , Environment("ExpectedResult") , Environment("Pass")  , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass")
	Else
		ReportStep  "SetGlobalOffset" ,  Environment("Description") , Environment("ExpectedResult") , Environment("Fail") &Space(2)& Err.Description , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") &Space(2)& Err.Description 
	End If

	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "SetGlobalOffset" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
	On Error GoTo 0
End Function


'##########################################################################################################################
''@Function:			VerifyEvaluateScript
''@Description:			Tests the functionality of EvaluateScript method for the passed in object
''@Return Type:			Boolean
''@Created By:			Naveen
''@Created On:			13-Oct-2015
''@Modified  by :  		
''@Modified  On : 		
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  		objTestObject 
''@Param Type:   		Object
''@Param Drtn: 			In
''@Param Desc: 			Object for which the EvaluateScript method needs to be tested
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  		strScript 
''@Param Type:   		String
''@Param Drtn: 			In
''@Param Desc: 			Script to be executed for the object
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  		blnOutputExpected
''@Param Type:   		Boolean
''@Param Drtn: 			In
''@Param Desc: 			If the passed in script generates an output then set this Param to True
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  		strExpectedOutput 
''@Param Type:   		String
''@Param Drtn: 			Out
''@Param Desc: 			If the passed in script generates an output then it'll be returned into this param
''--------------------------------------------------------------------------------------------------------------------------
''@Example: Set objTestObject = MobiDevice("Device").MobiWebButton("WebButton_Submit")
''					  blnResult = VerifyEvaluateScript(objTestObject, "this.click()", False, strExpectedOutput)
''					  blnResult1 = VerifyEvaluateScript(objTestObject, "alert('hello world!')", False, strExpectedOutput)
''					  blnResult = VerifyEvaluateScript(objTestObject, "window.getComputedStyle(this,null).getPropertyValue('text-rendering');", True, strExpectedOutput)
''--------------------------------------------------------------------------------------------------------------------------   

Function VerifyEvaluateScript(ByVal objTestObject, ByVal strScript, ByVal blnOutputExpected, ByRef strExpectedOutput)   
	On Error Resume Next
	Reporter.Filter = rfEnableAll
	Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", "" 
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	
	'Execute method
	If blnOutputExpected Then	'Return the value if it is expected 
		strExpectedOutput = objTestObject.EvaluateScript(strScript)
	Else
		objTestObject.EvaluateScript strScript
	End If
	
	'If error occurs then capture and report it otherwise report passed step
	If Err.Number <> 0 Then
		Environment("Fail") = "EvaluateScript failed. Executed script was: " & Chr(34) _
		& strScript & Chr(34)
		VerifyEvaluateScript = False
	Else
		Environment("Pass") = "EvaluateScript passed. Executed script was: " & Chr(34) _
		& strScript & Chr(34)
		VerifyEvaluateScript = True
	End If 

	If  VerifyEvaluateScript AND Err.Description = "" Then
		ReportStep "EvaluateScript", Environment("Description"), Environment("ExpectedResult"), Environment("Pass"), "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass")
	Else
		ReportStep  "EvaluateScript",  Environment("Description"), Environment("ExpectedResult"), Environment("Fail") &Space(2)& Err.Description, "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") & Space(2) & Err.Description 
	End If

	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "EvaluateScript", Environment("Description"), Environment("ExpectedResult"), "Not Executed", strStatus
	End If
	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
	On Error GoTo 0
End Function



'##########################################################################################################################
''@Function:		VerifyScale
''@Description:		Verify that scale method changes device scale w.r.t the percentage passed
''@Return Type:		NA
''@Created By:		Shweta
''@Created On:		12/10/2015
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	objTestObject 
''@Param Type:   	Object
''@Param Drtn: 		In
''@Param Desc: 		Object for which the 
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:     	intPercentage 
''@Param Type:      Integer
''@Param Drtn: 		In
''@Param Desc: 	    Percentage to be set on device
''--------------------------------------------------------------------------------------------------------------------------
''@Example:  VerifyScale 25
			'
''--------------------------------------------------------------------------------------------------------------------------

Function VerifyScale(intPercentage)
	On Error Resume Next
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
    Reporter.Filter = rfEnableAll
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	
	'Set deafult return value
	VerifyScale = False
  	Set objDevice = MobiDevice("micClass:=MobiDevice")
  	
  	intScale = objDevice.GetROProperty("viewerscale")
  	intDeviceHeight = objDevice.GetROProperty("height")
  	intDeviceWidth = objDevice.GetROProperty("width")
  	
  	objDevice.Scale intPercentage	
  	
  If intPercentage < 25 Then
       If Lcase(Err.description) = LCase("Invalid 'percent' argument for Scale. Value must be between 25 and 100.") Then
			VerifyScale = True
			Environment("Pass") = "Error message thrown on passing value :" & Space(1) & intPercentage & Space(1)_
			& "is correct :" & Space(1) & Err.Description
		Else
			Environment("Fail") = "Error thrown is :"&Space(1) & Err.Description & Space(1) & "Expected message was :"&_
			"Invalid 'percent' argument for Scale. Value must be between 25 and 100."
		End If
  ElseIf TypeName(intPercentage) = "Double" Then
       If Lcase(Err.description) = LCase("Type mismatch on ObjectRuntimeDevice") Then
			VerifyScale = True
			Environment("Pass") = "Error message thrown on passing value :" &Space(1) & intPercentage & Space(1)&_
			 "is correct :" & Space(1) & Err.Description
		Else
			Environment("Fail") = "Error thrown is :"& Space(1) & Err.Description & Space(1) & "Expected message was :"&_
			"Type mismatch on ObjectRuntimeDevice"
		End If
   Else
      intCurrentWidth = objDevice.GetROProperty("width")
      intCurrentHeight = objDevice.GetROProperty("height")
      intCurrentScale = objDevice.GetROProperty("viewerscale")
      Environment("Pass") = "Device scale after execution is :" &Space(1) & intPercentage
      Environment("Fail") = "Expected scale after execution :"&Space(1) & intPercentage & "but scale after execution is:" & Space(1) & intCurrentScale
      If intScale > intCurrentScale Then
         If intCurrentScale = intPercentage AND intCurrentWidth > intDeviceWidth AND intCurrentHeight > intDeviceHeight Then
      	  	VerifyScale = True
      	 End If 
      ElseIf intScale < intCurrentScale Then
          If intCurrentScale = intPercentage AND intCurrentWidth < intDeviceWidth AND intCurrentHeight < intDeviceHeight  Then
      	    VerifyScale = True
      	   End If 
      Else
          If intScale = intCurrentScale AND intCurrentScale = intPercentage AND intCurrentWidth = intDeviceWidth AND intCurrentHeight = intDeviceHeight Then
          	 VerifyScale = True
          End If
      End If
      	
   End If   
	
   If VerifyScale AND Err.Description = "" Then
			VerifyScale = True
			ReportStep "Scale" , Environment("Description") , Environment("ExpectedResult") ,  Environment("Pass") , "Pass"
			Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass")
		Else
			ReportStep "Type" , Environment("Description") , Environment("ExpectedResult") ,Environment("Fail") , "Fail"
			Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") &Space(2)&Err.Description
	End If 
	
	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "Type" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function


'##########################################################################################################################
''@Function:            VerifyIsOccluded
''@Description:            Tests the functionality of IsOccluded method for the passed in object
''@Return Type:            Boolean
''@Created By:            Jaishree
''@Created On:            09-10-2015
''@Modified  by :          Jaishree
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  objTestObject 
''@Param Type:   Object
''@Param Drtn:         In
''@Param Desc:     Object for which the IsOccluded method needs to be tested
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  strOccludedOption  
''@Param Type:   String
''@Param Drtn:         In
''@Param Desc:     Options for IsOccluded method i.e For executing for occluded object "occluded" or for not occluded object "notoccluded"
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  strCoordsOption  
''@Param Type:   String
''@Param Drtn:         In
''@Param Desc:     Option for Cooroinates eg "withcoordinates" , "withoutcoordinates" , "withzerovalues" etc
''--------------------------------------------------------------------------------------------------------------------------

''@Example: Set objMobiButton = MobiDevice("Trust Browser").MobiWebView("WebView").MobiWebButton("BUTTON.lsb")
'            blnStepRC = VerifyIsOccluded(objMobiButton, "withboundarycoords", "notoccluded")
'            blnStepRC = VerifyIsOccluded(objMobiButton, "withoutcoords", "occluded")
''--------------------------------------------------------------------------------------------------------------------------   

Function VerifyIsOccluded(objTestObject ,strCoordsOption, strOccludedOption)   
    On Error Resume Next
    Reporter.Filter = rfEnableAll
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
    Reporter.ReportEvent micDone, Environment("StepName") & " starts", "" 
    Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")


  
    'Based on strOccludedOption value determining the pass and fail statements to be logged in the html file.
    Select Case LCase(strOccludedOption)

        Case "notoccluded"
            Environment("Pass") = "isOccluded method returns False when an object is not occluded."
            Environment("Fail") =  "isOccluded method does not return False when an object is not occluded."

        Case "occluded"
            Environment("Pass")  = "isOccluded method returns True when an object is occluded."
            Environment("Fail") =  "isOccluded method returns does not returns True when an object is occluded."
    End Select
    
    'Based on the strCoordsOption value determining the parameters to be passed in the IsOccluded method.
    Select Case LCase(strCoordsOption)

            Case "withoutcoords"
                retVal=objTestObject.IsOccluded()
            
            Case "withboundarycoords"
                Err.Description= ""
                intX = objTestObject.GetROProperty("width") - 10
                intY = objTestObject.GetROProperty("height") - 10
                retVal=objTestObject.IsOccluded(intX,intY)
    
              
           Case "withonlyxcoord"       
                intX = CInt(objTestObject.GetROProperty("width") / 2)
                retVal=objTestObject.IsOccluded(intX)

'            Case "withonlyycoord"   'Commenting this block as getting syntax error in the UFT editor
'                intY = CInt(objTestObject.GetROProperty("height") /2)
'                retVal=objTestObject.IsOccluded("",intY)    'This Line of code is giving syntax error in editor but running as expected on running.

            Case  "withcentervalues"
                intX = CInt(objTestObject.GetROProperty("width") / 2)
                intY = CInt(objTestObject.GetROProperty("height") / 2)
                retVal=objTestObject.IsOccluded(intX,intY)
               ' msgbox retVal

    End Select
    
    If  (LCase(strOccludedOption) = "occluded"  AND retVal = True AND Err.Description = "") OR (LCase(strOccludedOption) = "notoccluded"  AND retVal = False AND Err.Description = "") Then        
                VerifyIsOccluded = True
    Else        
            If   Instr(1 , Replace(LCase(Err.Description) , " " , "") ,  Replace(LCase(strOverrideMessage) , " " , "") ) > 0  Then
                VerifyIsOccluded = True
            End If
    End If 

    If  VerifyIsOccluded AND Err.Description = "" Then
        ReportStep "IsOccluded" , Environment("Description") , Environment("ExpectedResult") , Environment("Pass")  , "Pass"
        Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass")
        
    Else
        ReportStep  "IsOccluded" ,  Environment("Description") , Environment("ExpectedResult") , Environment("Fail") &Space(2)& Err.Description , "Fail"
        Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") &Space(2)& Err.Description 
    End If

    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
            strStatus = "Not Run"
            ReportStep "IsOccluded" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus        
    End If
    Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
    Reporter.Filter = rfDisableAll
    On Error GoTo 0
End Function


'##########################################################################################################################
''@Function:		VerifyRowCountNative
''@Description:		Function returns row count  for passed object eg . MobiWebTable , MobiPicker , MobiList , MobiDropdown
''@Return Type:		Boolean
''@Created By:		Ananya
''@Created On:		28-May-2013
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	objTestObject 
''@Param Type:   	Object
''@Param Drtn: 		In
''@Param Desc: 		Object  on which RowCount method needs to be executed
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	strValToBeVerified
''@Param Type:   	String
''@Param Drtn: 		In
''@Param Desc: 		The last item in the list to ensure that every element is counted in the list
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	objSelectFrom 
''@Param Type:  	Object
''@Param Drtn: 		In
''@Param Desc: 		Object list from which we count the number of items present in the list
''--------------------------------------------------------------------------------------------------------------------------
''@Example: Set objTestObject = MobiDevice("Device").MobiDropdown("")
''					  blnResult = VerifyRowCount(objTestObject  , intRowCount)
''--------------------------------------------------------------------------------------------------------------------------

Function VerifyRowCountNative(objTestObject , strValToBeVerified , intItems , objSelectFrom)

	On Error Resume Next
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
     Reporter.Filter = rfDisableAll
	
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	'Fetch object type
	strObjectType =  objTestObject.GetTOProperty("micclass")
	VerifyRowCountNative = False

	Flag = true
	Set desc = description.Create
	desc("recursive").value = "true"
	strRows = ""
	
	If Lcase(strObjectType) <> "mobilist" Then
		objTestObject.Click
	End If
		
	wait 2

	Do
  
 	 Set listchild = objSelectFrom.ChildObjects(desc) 
 	 'msgbox listchild.Count
  	 For i = 0 to listchild.Count -1  
  
  'If Instr(1,strRows ,listchild(i).getroproperty("text"), vbTextCompare) = 0 Then
  		strRows = strRows & listchild(i).getroproperty("text") &Space(1)
  'End If
  	Next
 	strLastvisibleItem = listchild(listchild.Count -1).getroproperty("text")
 	objTestObject.Swipe eDOWN
 	Wait 3
	Loop While Lcase(strLastvisibleItem) <> Lcase(strValToBeVerified)
	intRows = Split(strRows , " ")

	Set objDict = CreateObject("Scripting.Dictionary")
	objDict.CompareMode = vbTextCompare
	For each val in intRows
	objDict(val) = val
	Next

	RowArray = objDict.Items
	intRows = Ubound(RowArray)
'msgbox "No. of rows in the list :" & intRows
	If   intRows   =   intitems  AND Len(Err.description) = 0 Then
				VerifyRowCountNative = True
				Environment("Pass") = "RowCount returned value :"& intRows &Space(2)&"Expected was :"&intitems
			Else
				Environment("Fail") = "RowCount returned value :"& intRows &Space(2)&"Expected was :"&intitems
	End If 				
	 
	If   VerifyRowCountNative AND Err.Description = "" Then
		ReportStep   "RowCount" , Environment("Description"),Environment("ExpectedResult") , Environment("Pass")   , "Pass"
		Reporter.ReportEvent "micPass" ,  Environment("Description")  ,Environment("Pass")
	Else
		ReportStep "RowCount" , Environment("Description"),Environment("ExpectedResult")  , Environment("Fail") & Space(2) & Err.Description , "Fail"
		Reporter.ReportEvent "micFail" ,  Environment("Description")  ,Environment("Fail") &Space(2)&Err.Description
	End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfEnableAll

    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "RowCount" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function


'##########################################################################################################################
''@Function:		 VerifySelectNative
''@Description:		 Verify that Select method selects the specified item
''@Return Type:		 NA
''@Created By:		 Ananya
'''@Created On:		 25/01/2017
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	 objTestObject 
''@Param Type:   	 Object
''@Param Drtn: 		 In
''@Param Desc: 		 Object for which the Select method needs to be tested
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:       strItem 
''@Param Type:       String
''@Param Drtn: 		 In
''@Param Desc: 	  	 The item that needs to be selected
'Case MobiList  : 	 Name of the element
'Case MobiDateTimePicker : String value containing date or time 
														'Date Format  str = "year,month,day, ,)
														'Time Format str = ", , ,hours,minutes)
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	strSelectCase 
''@Param Type:   	String
''@Param Drtn: 		In
''@Param Desc: 	    Case to be selected based on the scenario i.e. "selectstring"
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	objAfterSelection 
''@Param Type:   	Object
''@Param Drtn: 		In
''@Param Desc: 	    The  object that is displayed once the speciifed item gets selected
''--------------------------------------------------------------------------------------------------------------------------
'--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	objSelectFrom 
''@Param Type:   	Object
''@Param Drtn: 		In
''@Param Desc: 	    The List from which the item needs to be selected 
''--------------------------------------------------------------------------------------------------------------------------
'--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	objTestObjectPassed 
''@Param Type:   	Object
''@Param Drtn: 		In
''@Param Desc: 	    The  object that is displayed once the speciifed item gets selected
''--------------------------------------------------------------------------------------------------------------------------
''--------------------------------------------------------------------------------------------------------------------------

Function VerifySelectNative(objTestObject , strSelectCase , strValue , objAfterSelection , objSelectFrom , objTestObjectPassed)
	Err.Clear
	Reporter.Filter = rfEnableAll
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	'Setting default value
	VerifySelectNative= False

	strItem = ""

	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	strObjectName =  Environment("MobiObjectClass")

	On Error Resume Next

	Select Case LCase(strObjectName)
		Case "mobilist" 
			Select Case LCase(strSelectCase)
				'@select any value with string or index
				case "selectstring", "selectindex"
				    Wait 2
					objTestObject.Select strValue
					Wait  5
					'@validating select
					If  objAfterSelection.Exist(7) Then
						VerifySelectNative = True
						Environment("Pass") = "Successfully selected  - " & strValue
					Else
						Environment("Fail") = "Unable to select  - " & strValue
						strItem = strValue
					End If 

				Case "selectnegativeindex"
					Err.Clear
					'@select with negative index value
					Reporter.Filter = rfDisableAll
					objTestObject.Select strValue
					Wait  5 
					'@validating error message
					If Lcase(Err.Description) = "cannot identify the specified item of the object. confirm that the specified item is included in the object's item collection." Then
						VerifySelectNative = True
						Environment("Pass") = "Error message :- '" & Err.description & "' is displayed when negative index is passed " & strValue
					Else
						VerifySelectNative = False
						Environment("Fail") = "Actual Error message displayed is :- '" & Err.description
					End If
					Reporter.Filter = rfEnableAll

					Err.Clear

				Case "withoutparameter"
					Err.Clear
					'@select without any parameter
					Reporter.Filter = rfDisableAll
					objTestObject.Select
					'@validating error message
					If Lcase(Err.Description) = "invalid number of parameters." Then
						VerifySelectNative = True
						Environment("Pass") = "Error message :- '" & Err.description & "'  is displayed when No parameter is passed"
					Else
						VerifySelectNative = False
						Environment("Fail") = "Actual Error message displayed is :- '" & Err.description
					End If
					Reporter.Filter = rfEnableAll
					Err.Clear
			End Select

		Case "mobidropdown"  , "mobiwebdropdown"
			MobiDevice("micclass:=MobiDevice").Sync
			Select Case Lcase(strSelectCase)
				'@select value with index, string or by hash value
				Case "selectstring","selectindex","selecthashvalue"
					objTestObject.Click
					wait 2
					objSelectFrom.Select strValue
					wait 2
						
					If vartype(strValue) = 8  Then
						'objTestObject.WaitProperty  "text" , strValue , 35000
						If Instr(1,strValue,"#") =  0 Then
							'@validating string text selected
							wait 5
							MobiDevice("micclass:=MobiDevice").Sync
							If objTestObjectPassed.Exist(5) then
								VerifySelectNative = True
								Environment("Pass") = "Successfully selected value - " & strValue
							Else
								Environment("Fail") = "Unable to select value - " & strValue
							End if
						Else
							'@validating hash value selected
							'objTestObject.WaitProperty  "text" , strValue , 35000
							wait  8
							MobiDevice("micclass:=MobiDevice").Sync
							If objTestObjectPassed.Exist(5) then
								VerifySelectNative = True
								Environment("Pass") = "Successfully selected value for hash value - " & strValue
							Else
								Environment("Fail") = "Unable to select value for hash value - " & strValue
							End if
						End If
					Else
						If   LCase(Environment("MobiObjectClass")) = "mobiwebdropdown" Then
						wait  8
						MobiDevice("micclass:=MobiDevice").Sync
								'@validating index value is selected
								If  objTestObject.GetROProperty("selecteditemindex") = CStr(strValue) Then
									VerifySelectNative = True
									Environment("Pass") = "Successfully selected value for index value - " & strValue
								Else
									Environment("Fail") = "Unable to select value for index value - " & strValue
								End If
						Else		
							'@validating index value selected	
							wait 5
							MobiDevice("micclass:=MobiDevice").Sync
							If objTestObjectPassed.Exist(5) then
								VerifySelectNative = True
									Environment("Pass") = "Successfully selected value for index value - " & strValue
								Else
									Environment("Fail") = "Unable to select value for index value - " & strValue
								End If
						End If
					End If 

				Case "selectnegativeindex","selectoutofindex"
					Err.Clear
					'@select for invalid input
					Reporter.Filter = rfDisableAll
					objTestObject.Select strValue
					If LCase(strSelectCase) = "selectnegativeindex" AND LCase(strObjectName) = "mobiwebdropdown" Then
						strErrorMessage = "Invalid argument passed: value cannot be negative"
					ElseIf LCase(strSelectCase) = "selectoutofindex" AND LCase(strObjectName) = "mobiwebdropdown" Then
						strErrorMessage = "Invalid argument passed: value exceeds number of items in list."
					Else
							strErrorMessage = "cannot identify the specified item of the object. confirm that the specified item is included in the object's item collection."  
					End If 

					If Instr(1 , LCase(strErrorMessage) , LCase(err.Description)) > 0 Then
					VerifySelectNative = True
						Environment("Pass") = "Error message - '" & strErrorMessage & " is displayed"
					Else
						Environment("Fail") = "Error message displayed -> "&err.Description &Space(2) &"expected was ->"&strErrorMessage
					End If
					Reporter.Filter = rfEnableAll

				Case "selectinvalidhashvalue"
					Err.Clear
					'@select for invalid input
					Reporter.Filter = rfDisableAll
					objTestObject.Select strValue
					'@validating error message
					If Lcase(Err.Description) = lcase("Input string was not in a correct format.") Then
						VerifySelectNative = True
						Environment("Pass") = "Error message - '" & Err.Description & " is displayed"
					Else
						Environment("Fail") = "Actual Error message displayed is :- '" & Err.description
					End If
					Reporter.Filter = rfEnableAll

				Case "withoutparameter"
                 Err.Clear
					'@select without parameter
					Reporter.Filter = rfDisableAll
					objTestObject.Select
					'@validating error message
					If Instr(1, Lcase(Err.Description),"invalid number of parameters" ) > 0 Then
						VerifySelectNative = True
						Environment("Pass") = "Error message -> invalid number of parameters is displayed"
					Else
						Environment("Fail") = "Actual Error message displayed is :- '" & Err.description
					End If
					Reporter.Filter = rfEnableAll
			End Select

		Case "mobipicker"
			Select Case LCase(strSelectCase)
				'@select with string
				Case "selectstring","selectstringwithwheel"
					If LCase(strSelectCase) <> "selectstringwithwheel" Then
						objTestObject.Select  strValue
						
					Else
						objTestObject.Select  strValue, Environment("WheelNumber")
					End If
					wait 5
					MobiDevice("micclass:=MobiDevice").Sync
					'@validating value is selected
					If  Instr( 1 ,  Lcase(objTestObject.GetROProperty("selection")) , Lcase(strValue) ) > 0 Then
						VerifySelectNative = True
						Environment("Pass") = "Successfully selected value - " & strValue
					Else
						Environment("Fail") = "Unable to select  value- " & strValue
					End If

				Case "selectindex","selectindexwithwheel"
					'@select value by index
					If LCase(strSelectCase) = "selectindex" Then
						objTestObject.Select  strValue
					Else
						objTestObject.Select  strValue, Environment("WheelNumber")
					End If
					wait 5
					MobiDevice("micclass:=MobiDevice").Sync
					'@validating value
					If objTestObject.GetItem(Cint(Right(strValue,len(strValue)-1) )) = objTestObject.getroproperty("selection") Then
						VerifySelectNative = True
						Environment("Pass") = "Successfully selected index value - " & strValue
					Else
						VerifySelectNative = False
						Environment("Fail") = "Unable to select index value - " & strValue
					End If
					

				Case "withoutparameter"
						Err.Clear
					'@select without parameter
					Reporter.Filter = rfDisableAll
					objTestObject.Select
					'@validating error message
					If Lcase(Err.Description) = "invalid number of parameters." Then
						VerifySelectNative = True
						Environment("Pass") = "Error message - '" & Err.Description & "' is displayed"
					Else
						Environment("Fail") = "Actual Error message displayed is :- '" & Err.description
					End If
					Reporter.Filter = rfEnableAll
			End Select


		Case "mobidatetimepicker"
		

			Select Case LCase(strSelectCase)

			Case  "stringinput" 

                arrProp = Array() 
				strFailedFor = ""

	'Fetch values if  only date values are passed
	If Instr(1 , strValue , "-") > 0    AND Instr(1 , strValue , "t")  = 0 AND Instr(1 , strValue , ":") =  0  Then
	arrValueToSet = Split(strValue , "-")
	'Check if  first value is of year
	If Ubound(arrValueToSet)  = 2 Then
		intYear = arrValueToSet(0)
		intMonth = arrValueToSet(1)
		intDay = arrValueToSet(2)
		arrProps  = Array("year" , "month" , "day")
		arrValues = Array(intYear ,  intMonth , intDay)
		If Clng(intYear)  <= 0  OR Clng(intYear) > 9999 OR Cint(intMonth) <= 0 OR Cint(intMonth) > 12 OR Cint(intDay)  <= 0 OR  Cint(intDay) >31 Then
				strCase = "invalid"
		End If
	ElseIf 	Ubound(arrValueToSet)  = 1 Then
			If  Len(Replace(arrValueToSet (0), " " , "")) = 4 Then
				intYear = arrValueToSet(0)
				intMonth = arrValueToSet(1)
				arrProps  = Array("year" , "month")
				arrValues = Array(intYear , intMonth)
				If CInt(intYear)  <= 0  OR CInt(intYear) > 9999 OR Cint(intMonth) <= 0 OR Cint(intMonth) > 12 Then
					strCase = "invalid"
				End If
			Else
				intMonth = arrValueToSet(0)
				intDay = arrValueToSet(1)
				arrProps  = Array("month" , "day")
				arrValues = Array(intMonth , intDay)
				If  Cint(intMonth) <= 0 OR Cint(intMonth) > 12 OR Cint(intDay)  <= 0 OR  Cint(intDay) >31 Then
					strCase = "invalid"
				End If
			End If
	End If

ElseIf Instr(1 , strValue , "-") = 0    AND Instr(1 , strValue , "t")  = 0 AND Instr(1 , strValue , ":") >  0  Then
		arrValueToSet = Split(strValue , ":")
		If Ubound(arrValueToSet)  = 2 OR Ubound(arrValueToSet)  = 1 Then
				intHour = arrValueToSet(0)
				intMinute = arrValueToSet(1)
				arrProps  = Array("hour" , "minutes")
				arrValues = Array(intHour , intMinute)
				If Len(intHour) = 1 OR  Cint(intHour) <= 0 OR Cint(intHour) > 24 OR Len(intMinute) = 1 OR Cint(intMinute) <= 0 OR Cint(intMinute) >60  Then
					strCase = "invalid"
				End If
	   End If	
Else
				arrValueToSet = Split(strValue , "-")
				intYear = arrValueToSet(0)
				intMonth = arrValueToSet(1)
				str = arrValueToSet(2)
				arrValueToSet = Split(str, "t")
				intDay = arrValueToSet(0)
				str = arrValueToSet(1)
				arrValueToSet = Split(str , ":")
				intHour = arrValueToSet(0)
				intMinute = arrValueToSet(1)		
				arrProps = Array("year" , "month" , "day" , "hour" , "minutes")
				arrValues = Array(intYear , intMonth , intDay , intHour , intMinute)
End If

'Scenario for  non leap year and  selcting 29 days in february
intYear = CInt(intYear)
If TypeName(intYear) = "Integer" Then
        IsLeapYear = ((intYear Mod 4 = 0) And _
          (intYear Mod 100 <> 0) Or (intYear Mod 400 = 0))
 End If

If   Not  IsLeapYear  AND Cint(intMonth) = 2  AND Cint(intDay) > 28 Then
	strCase = "invalid"
End If

If Instr(1, strValue , "-") = 0  AND Instr(1, strValue , ":") = 0 Then
	strCase = "invalid"
End If

If  Len(intHour) = 1 OR Len(intMinute) = 1  Then
		strCase = "invalid"
End If

'Execute function
objTestObject.Select  strValue
wait  8
MobiDevice("micclass:=MobiDevice").Sync
'Check if there is only one value or negative scenarios
If (Instr(1, strValue , "-") = 0  AND Instr(1, strValue , ":") = 0)  OR  strCase = "invalid" AND Err.Description = "" Then
	strErrorMessage =  LCase("String was not recognized as a valid DateTime.")
	If Ubound(arrProps) >= 0  Then
		Environment("Pass") = "Error Message thrown on passing properties " &Space(2) & Join(arrProps , ",")& Space(2) &"with values" &Space(2) & Join(arrValues , ", ") &Space(2) & "was " &Space(2) & Err.Description
		Environment("Fail") = "Error Message thrown on passing properties " &Space(2) & Join(arrProps , ",")& Space(2) &"with values" &Space(2) & Join(arrValues , ", ") &Space(2) & "was " &Space(2) & Err.Description
	Else
	Environment("Pass") = "Error Message thrown on passing single entity -> " & strValue & Space(2) & "was " & Space(2) & Err.Description
	Environment("Fail") =  "Expected error Message  on passing single entity was  -> " & strErrorMessage  & Space(2) & "but actual message thrown was  " & Space(2) & Err.Description
	End If 

	If  Instr(1, LCase(Err.Description) ,  strErrorMessage ) > 0 Then
		VerifySelectNative  = True
'		ReportStep "Select " , Environment("Description") , Environment("ExpectedResult")  , Environment("Pass") , "Pass"
'	Else
'		ReportStep "Select " , Environment("Description") , Environment("ExpectedResult")  , Environment("Fail") , "Fail"
	End If
Else
	For i = 0 to Ubound(arrProps)
		If  Left(Replace(arrValues(i), " " , "") , 1 ) = 0 Then	
				arrValues(i)  = Replace(arrValues(i), " " , "") 
				arrValues(i)  = Mid(arrValues(i) , 2 , 1)
		End If
		If  Replace(arrValues(i), " " , "")  <>  objTestObject.GetROProperty(arrProps(i)) Then
				strFailedFor = strFailedFor & arrProps(i) & ";"
		End If
	Next
	If strFailedFor = ""  AND Len(Err.Description) = 0 Then
			VerifySelectNative  = True
			Environment("Pass")  = "Successfully selected string value as ->"& strValue
	Else
			Environment("Fail") =  "Failed to select string value  ->"& strValue & Space(2) & Err.Description
'		ReportStep "Select " , Environment("Description") , Environment("ExpectedResult")  ,"Successfully selected string value as ->"& strValue, "Pass"
'	Else
'		ReportStep "Select " , Environment("Description") , Environment("ExpectedResult")  ,"Failed to select string value  ->"& strValue & Space(2) & Err.Description, "Pass"
	End If
End If


			Case  "integerinput"
			
			arrParameters  = Split(Replace(strValue , " " , "") , ",")
			For i = 0 to UBound(arrParameters)
				If arrParameters(i) = "" Then
					'Assigning optional value 
					arrParameters(i) = "-1"
				End If
			Next

			'Assigning Values to parameters
			intYear = CLng(arrParameters(0))
			intMonth = CLng(arrParameters(1))
			intDay =  CLng(arrParameters(2))
			intHour = CLng(arrParameters(3))
			intMinute = CLng(arrParameters(4))


			Reporter.Filter = rfDisableAll
			'Select  Values on DateTimePicker
			objTestObject.Select intYear , intMonth , intDay , intHour , intMinute
			If  intYear =0 OR intYear > 9999 OR intMonth = 0 OR intMonth > 12  OR intDay = 0 OR intDay > 31 OR intHour = 0 OR intHour > 24 OR intMinute = 0 OR intMinute > 60 Then
				strSelectCase = "invalid"
			Else
				strSelectCase = "valid"
			End If

			arrProps = Array(intYear , intMonth , intDay , intHour , intMinute)
			For  i = 0 to Ubound(arrProps)
				If  arrProps(i)  <  - 1 Then
					strSelectCase  = "invalid"
					Exit For
				End If
			Next

			intYear = CInt(intYear)
If TypeName(intYear) = "Integer" Then
        IsLeapYear = ((intYear Mod 4 = 0) And _
          (intYear Mod 100 <> 0) Or (intYear Mod 400 = 0))
 End If

If   Not  IsLeapYear  AND Cint(intMonth) = 2  AND Cint(intDay) > 28 Then
	strSelectCase = "invalid"
End If


			If LCase(strSelectCase) = "valid" Then
				'Validating selection
				arrDateTimeProp =Array ("year" , "month" , "day" , "hour" , "minutes")
				For i = 0 to UBound(arrDateTimeProp)
					wait 5
					MobiDevice("micclass:=MobiDevice").Sync
					ValueToVerify = objTestObject.GetROProperty(arrDateTimeProp(i))
					If  CLng(ValueToVerify) <>  CLng(arrParameters(i)) Then
						If   arrParameters(i)  <>  "-1" Then
							strItem = strItem & arrDateTimeProp(i)  & " ," 
						End If 
					End If					
				Next
				If   strItem =  "" Then
					VerifySelectNative = True
					Environment("Pass") = "Date is selected with year - " & arrParameters(0) & " and month - " & arrParameters(1) & " and day - " & arrParameters(2) & " and hour - " & arrParameters(3) & " and minute - " & arrParameters(4)
				Else
					Environment("Fail") = "Unable to select date from user input - " & Join(arrParameters,",")
				End If
			ElseIf LCase(strSelectCase) = "invalid" Then
				'@validating error message for invalid input
				If Instr(1,Lcase(Err.Description),"cannot identify the specified item of the object. confirm that the specified item is included in the object's item collection") > 0 Then
					VerifySelectNative = True
					Environment("Pass") = "Error message - '" & Err.description & "' is displayed"
				Else
					VerifySelectNative= False
					Environment("Fail") = "Actual Error message displayed is :- '" & Err.description
				End If
			End If
			Reporter.Filter = rfEnableAll
			End Select

		Case "mobisegment"
			Select Case Lcase(strSelectCase)
				Case "withindex"
					objTestObject.Select strValue
					objTestObject.WaitProperty  "selecteditemindex"  , strValue , 8000
					If objTestObject.getroproperty("selecteditemindex") = strValue and Err.description = "" Then
						VerifySelectNative = True
						Environment("Pass") = "Successfully selected value for index - " & strValue
					Else
						VerifySelectNative = False
						Environment("Fail") = "Unable to select value for index : " & strValue
					End If

				Case "withhashvalue"
					objTestObject.Select strValue
					objTestObject.WaitProperty  "selecteditemindex"  , strValue , 8000
					If objTestObject.getroproperty("selecteditemindex") = Cint(Right(strValue,len(strValue)-1)) and Err.description = "" Then
						VerifySelectNative = True
						Environment("Pass") = "Successfully selected value for index - " & strValue
					Else
						VerifySelectNative = False
						Environment("Fail") = "Unable to select value for index : " & strValue
					End If

				Case "withoutparameter"
Err.Clear
					Reporter.Filter = rfDisableAll
					objTestObject.Select
					If Lcase(Err.Description) = "invalid number of parameters." Then
						VerifySelectNative = True
						Environment("Pass") = "Error message - '" & Err.description & "' is displayed"
					Else
						VerifySelectNative = False
						Environment("Fail") = "Actual Error message displayed is :- '" & Err.description
					End If
					Reporter.Filter = rfEnableAll

				Case "withoutofindex"
                    Err.Clear
					Reporter.Filter = rfDisableAll
					strValue = objTestObject.GetROProperty("itemscount")
					objTestObject.Select Cint(strValue)
					If  Len(Err.Description) <> 0   Then
						VerifySelectNative = True
						Environment("Pass") = "Error message - Index is zero-based and must not exceed total number of segments in the control"
					Else
						VerifySelectNative = False
						Environment("Fail") = "Actual Error message displayed is :- '" & Err.description
					End If
					Reporter.Filter = rfEnableAll

				Case "withnegativeindex"
                                        Err.Clear
					Reporter.Filter = rfDisableAll
					objTestObject.Select -1
					If Lcase(Err.Description) = "invalid parameter. must be greater or equal than zero" Then
						VerifySelectNative = True
						Environment("Pass") = "Error message - '" & Err.description & "' is displayed"
					Else
						VerifySelectNative = False
						Environment("Fail") = "Actual Error message displayed is :- '" & Err.description
					End If
					Reporter.Filter = rfEnableAll

				Case "withindexasstring"

                                        Err.Clear					
                                        Reporter.Filter = rfDisableAll
					objTestObject.Select Cstr(strValue)
					If Lcase(Err.Description) = "cannot identify the specified item of the object. confirm that the specified item is included in the object's item collection." Then
						VerifySelectNative = True
						Environment("Pass") = "Error message - '" & Err.description & "' is displayed"
					Else
						VerifySelectNative = False
						Environment("Fail") = "Actual Error message displayed is :- '" & Err.description
					End If
					Reporter.Filter = rfEnableAll
			End Select

	End Select

	'Check for the existence of the image that should be displayed after selection
	If  VerifySelectNative AND Err.Description = "" Then
		ReportStep "Select" , Environment("Description"),Environment("ExpectedResult"),Environment("Pass") , "Pass"
		Reporter.ReportEvent micPass,Environment("Description"), Environment("Pass")
	Else
		ReportStep "Select" , Environment("Description"),Environment("ExpectedResult"),Environment("Fail")&Space(2)&Err.Description , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") &Space(2)&Err.Description
	End If
	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""

	Reporter.Filter = rfDisableAll
    	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "Select" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function




'##########################################################################################################################
''@Function:		VerifyGetItemNative
''@Description:		Verify GetItem functionality for MobiList for native automation
''@Return Type:		String
''@Created By:		Ananya
''@Created On:		25/01/2017
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	objTestObject 
''@Param Type:   	Object
''@Param Drtn: 		In
''@Param Desc: 		Object for which the GetItem method needs to be tested
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	intIndex 
''@Param Type:   	Int
''@Param Drtn: 		In
''@Param Desc: 		The index number is an Integer value. Numeric index of the item to be fetched. Index values begin with 0
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	intWheelCount 
''@Param Type:   	Int
''@Param Drtn: 		In
''@Param Desc: 		Wheel number
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	strExpectedValue
''@Param Type:   	String
''@Param Drtn: 		In
''@Param Desc: 		The Item, it should returned from the specified index in the list
''--------------------------------------------------------------------------------------------------------------------------
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	strOption
''@Param Type:   	String
''@Param Drtn: 		In
''@Param Desc: 		Option for example with index only
''--------------------------------------------------------------------------------------------------------------------------
''--------------------------------------------------------------------------------------------------------------------------
''@Param Name:  	objSelectFrom
''@Param Type:   	Object
''@Param Drtn: 		In
''@Param Desc: 		List on which action needs to be performed
''--------------------------------------------------------------------------------------------------------------------------
''@Example: Set objTestObject = MobiDevice("Device").MobiList("List")
''					  blnResult = VerifyGetItem(objTestObject,1,1 ,"Picker1 >", "withoutparameter")
''--------------------------------------------------------------------------------------------------------------------------

Function VerifyGetItemNative(objTestObject, intIndex, intWheelCount , strExpectedValue , strOption , objSelectFrom)
	err.clear
   On Error Resume Next
    Reporter.Filter = rfEnableAll
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	'Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	strObjectType = objTestObject.GetTOProperty("micclass")
	VerifyGetItemNative = False
	strErrorMessage = ""

	Select Case LCase(strOption)

	Case  "withoutparameter"
		Reporter.Filter = rfDisableAll
		err.clear
		strErrorMessage = "Invalid number of parameters."
		strItem = objTestObject.GetItem
		Reporter.Filter = rfEnableAll

	 Case "withindexonly"
			Reporter.Filter = rfDisableAll
			err.clear
			objTestObject.Click
			wait 2
		    strItemReturned = objSelectFrom.GetItem(intIndex)
		    'msgbox strItemReturned
			wait 2

			'Case : index value is a string
			If   VarType(intIndex) = 8 Then

						strErrorMessage = "Type mismatch." 
			'Case : index value is negative
			ElseIf  intIndex < 0  Then
				If LCase(strObjectType) = "mobipicker"  Then
						strErrorMessage = "the requested item exceeds the number of items in the list or is negative."
				ElseIf LCase(strObjectType) = "mobidropdown" Then
						strErrorMessage = "Cannot identify the specified item of the object. Confirm that the specified item is included in the object's item collection."
				ElseIf LCase(strObjectType) = "mobilist" Then
						strErrorMessage ="Invalid index specified. Must be greater than or equal to zero."
				Else
						strErrorMessage ="Invalid index specified. Must be greater or equal to zero"
				End If
			'Case : index value is out of range
			ElseIf  intIndex >= objSelectFrom.GetROProperty("itemscount") Then
				If LCase(strObjectType) = "mobipicker"  Then
						strErrorMessage = "the requested item exceeds the number of items in the list or is negative."
				ElseIf LCase(strObjectType) = "mobilist" Then
						strErrorMessage = "Invalid index specified. Must be greater than or equal to zero and less then the final index (" & objTestObject.GetROProperty("itemscount") & ")"
				Else
						strErrorMessage ="Cannot identify the specified item of the object. Confirm that the specified item is included in the object's item collection."
				End If

			Else
				'Case : Valid index value
				If  Lcase(Trim(strExpectedValue))= Lcase(Trim(strItemReturned)) Then
						VerifyGetItemNative = True
						Environment("Pass") = "Value returned as"& Space(2) & strItemReturned & Space(2)  & "at index  :"& intIndex 
				Else
						Environment("Fail") = "Value returned as"& Space(2) & strItemReturned & Space(2)  & "at index  :"& intIndex &Space(2)&"but expected value was :"& strExpectedValue
				End If
			End If 
			Reporter.Filter = rfEnableAll

	Case "withbothparameters" ,"withonlyoneparameter"
		err.clear
			Reporter.Filter = rfDisableAll
			strItemReturned = objTestObject.GetItem( intIndex , intWheelcount)
			'Case : valid index and wheelcount
			If intIndex < objTestObject.GetROProperty("itemscount") AND intWheelcount < objTestObject.GetROProperty("wheelcount")  Then
				If  Lcase(Trim(strExpectedValue))= Lcase(Trim(strItemReturned)) Then
						VerifyGetItemNative = True
						Environment("Pass") = "Value returned as"& Space(2) & strItemReturned & Space(2)  & "at index  :"& intIndex &" , "& "Wheelcount  :"& intWheelcount
				Else
						Environment("Fail") = "Value returned as"& Space(2) & strItemReturned & Space(2)  & "at index  :"& intIndex &" , "& "Wheelcount  :"& intWheelcount & Space(2)&"but expected value was :"& strExpectedValue
				End If 
			'Case : blank index and valid wheelcount
			Else
				If intIndex = " " AND  intWheelcount < objTestObject.GetROProperty("wheelcount") Then
						strErrorMessage = "Type mismatch." 

				'Case : valid index and wheelcount either negative or out of range
				ElseIf intIndex  < objTestObject.GetROProperty("itemscount")  AND ( intWheelcount < 0 OR intWheelcount > objTestObject.GetROProperty("wheelcount")) Then
						strErrorMessage = "Invalid picker wheel number assignment"
				End If 
			End If 
	End Select

		If  Len(strErrorMessage) <> 0  Then
				If Instr(1, LCase(Replace(Err.Description , " " , "")), LCase(Replace(strErrorMessage , " " , "")) ) > 0 Then
						VerifyGetItemNative = True
						Environment("Pass") = "Error message thrown  :"&chr(34) &Err.Description&chr(34)
				Else
						Environment("Fail") = "Error message thrown  :"&chr(34) &Err.Description&chr(34) &"but Expected message was :"& strErrorMessage
				End If
		End If
	Reporter.Filter = rfEnableAll	

	If  VerifyGetItemNative AND Err.Description = "" Then
        ReportStep  "GetItem" ,  Environment("Description"),Environment("ExpectedResult") , Environment("Pass")   , "Pass"
		Reporter.ReportEvent  micPass  ,  Environment("Description")  ,Environment("Pass")
	Else
		ReportStep "GetItem" , Environment("Description"),Environment("ExpectedResult")  , Environment("Fail") , "Fail"
		Reporter.ReportEvent micFail  ,  Environment("Description")  ,Environment("Fail") &Space(2)&Err.Description
	End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
    	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "GetItem" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function
	

'##########################################################################################################################
''@Function:            ScrollToBottom
''@Description:         Scroll to bottom on the controls list
''@Return Type:            Boolean
''@Created By:            Ananya
''@Created On:            18/01/2017
''@Modified  by :         Ananya
''--------------------------------------------------------------------------------------------------------------------------
Function ScrollToBottom(objTestObject , strValToBeVerified)
'where strValToBeVerified will be the last item of the list 

Flag = true
'strValToBeVerified = "zoomcontrols"
Set desc = description.Create
desc("recursive").value = "true"
strRows = ""

Do
  Set listchild = objTestObject.ChildObjects(desc) 
  For i = 0 to listchild.Count -1  
  'strRows = strRows & listchild(i).getroproperty("text") &Space(1)
   strvisibleItem = listchild(i).GetROProperty("text")
   If Lcase(strValToBeVerified)=Lcase(strvisibleItem) Then
   	Exit Function
   End If
 Next
 objTestObject.Swipe eDOWN
 wait 2
Loop While Lcase(strValToBeVerified) <> Lcase(strvisibleItem)
'intRows = Split(strRows , " ")

'Set objDict = CreateObject("Scripting.Dictionary")
'objDict.CompareMode = vbTextCompare
'For each val in intRows
'objDict(val) = val
'Next

'RowArray = objDict.Items
'intRows = Ubound(RowArray)
'msgbox "No. of rows in the list :" & intRows

End Function

Function ScrollToTop(objTestObject , strValToBeVerified)
'where strValToBeVerified will be the last item of the list 

Flag = true
'strValToBeVerified = "zoomcontrols"
Set desc = description.Create
desc("recursive").value = "true"
strRows = ""

Do
  Set listchild = objTestObject.ChildObjects(desc) 
  For i = 0 to listchild.Count -1  
  'strRows = strRows & listchild(i).getroproperty("text") &Space(1)
   strvisibleItem = listchild(i).GetROProperty("text")
   If Lcase(strValToBeVerified)=Lcase(strvisibleItem) Then
   	Exit Function
   End If
 Next
 objTestObject.Swipe eUP
 wait 2
Loop While Lcase(strValToBeVerified) <> Lcase(strvisibleItem)
'intRows = Split(strRows , " ")

'Set objDict = CreateObject("Scripting.Dictionary")
'objDict.CompareMode = vbTextCompare
'For each val in intRows
'objDict(val) = val
'Next

'RowArray = objDict.Items
'intRows = Ubound(RowArray)
'msgbox "No. of rows in the list :" & intRows

End Function

Function SwipeRight(ObjTest,ObjTesT2)
Do
ObjTest.Draw "down(90%,50%) move(10%,50%)"
wait 1
Loop While Not ObjTesT2.Exist(2)	

End Function

Function VerifySetNativeAutomation(objTestObject, ValueToSet)
   On Error Resume Next
    Reporter.Filter = rfEnableAll
	Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	strType =  objTestObject.GetTOProperty("micclass")
    Reporter.Filter = rfEnableAll
	'Setting function's default return value to false	
	VerifySetNativeAutomation= False

		objTestObject.Set ValueToSet
		Wait 5
		MobiDevice("micClass:=MobiDevice").Sync
		'Values returned will be the approximated values
		intMinVal = ValueToSet - 4
		intMaxVal = ValueToSet + 4
		If objTestObject.GetROProperty("value") >= intMinVal  AND  objTestObject.GetROProperty("value") <= intMaxVal Then
			Environment("Pass") = "Successfully set percentage"&Space(2) & ValueTOSet
		    VerifySetNativeAutomation= True
		Else
		    Environment("Fail") = "Failed to set percentage  "&Space(2)&ValueTOSet &Space(2) & "Value set is :"&objTestObject.GetROProperty("value")
		End If 
		
	If   VerifySetNativeAutomation AND Err.Description = "" Then
		ReportStep  "Set" , Environment("Description") , Environment("ExpectedResult") ,Environment("Pass") , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass")
	Else
		ReportStep "Set" , Environment("Description") , Environment("ExpectedResult") ,Environment("Fail")&Space(2)&Err.Description , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") &Space(2)&Err.Description
	End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""

	Reporter.Filter = rfDisableAll
    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "Set" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	On Error GoTo 0
End Function


Function VerifySelectNativeDateTiemPicker(objTestObject , strValue)
	Err.Clear
	Reporter.Filter = rfEnableAll
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	'Setting default value
	VerifySelectNativeDateTiemPicker = False

	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")
	strObjectName =  Environment("MobiObjectClass")

	On Error Resume Next
	objTestObject.Select strValue
	Wait 4
	MobiDevice("micClass:=MobiDevice").Sync
	arr = Split(strValue , "-") 
	If  DateValue(Monthname(Month(strValue)) & Space(1) & arr(2) & Space(1) & arr(0)) = DateValue(strValue) AND Err.Description = "" Then
	    VerifySelectNativeDateTiemPicker = True
		ReportStep "Select" , Environment("Description"),Environment("ExpectedResult") & Space(1) & "for value :-"&strValue,"Date selected :-"&strValue , "Pass"
		Reporter.ReportEvent micPass,Environment("Description"), Environment("Pass")
	Else
		ReportStep "Select" , Environment("Description"),Environment("ExpectedResult"),"Fail to select :-"&strValue &Space(2)&Err.Description , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") &Space(2)&Err.Description
	End If
	Reporter.ReportEvent micDone, Environment("StepName") & " ends", "" 

	Reporter.Filter = rfDisableAll
    	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "Select" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function


 '##########################################################################################################################
'@Function:            VerifyGetItemUIPicker
'@Description:            Tests the functionality of GetItem method for the MobiPicker
'@Return Type:            Boolean
'@Created By:            Ananya
'@Created On:            16-02-2017
'@Modified  by :         Ananya
'--------------------------------------------------------------------------------------------------------------------------
'This function is seprately created for MobiPicker
'-------------------------------------------------------------------------------------------------------------------------- 
Function VerifyGetItemUIPicker(objTestObject, intIndex, intWheelCount , strExpectedValue , strOption)
	err.clear
   On Error Resume Next
    Reporter.Filter = rfEnableAll
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	'Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	strObjectType = objTestObject.GetTOProperty("micclass")
	VerifyGetItemUIPicker = False
	strErrorMessage = ""

	Select Case LCase(strOption)

	Case  "withoutparameter"
		Reporter.Filter = rfDisableAll
		err.clear
		strErrorMessage = "Invalid number of parameters"
	
		strItem = objTestObject.GetItem
		Reporter.Filter = rfEnableAll

	 Case "withindexonly"
			Reporter.Filter = rfDisableAll
			err.clear
			objTestObject.GetItem(intIndex)
			wait 2
			strItemReturned = objTestObject.GetItem(intIndex)
			

			'Case : index value is a string
			If   VarType(intIndex) = 8 Then

						strErrorMessage = "Type mismatch" 
			'Case : index value is negative
			ElseIf  intIndex < 0  Then
				If LCase(strObjectType) = "mobipicker"  Then
						strErrorMessage = "the requested item exceeds the number of items in the list or is negative."
'				ElseIf LCase(strObjectType) = "mobidropdown" Then
'						strErrorMessage = "Cannot identify the specified item of the object. Confirm that the specified item is included in the object's item collection."
'				ElseIf LCase(strObjectType) = "mobilist" Then
'						strErrorMessage ="Invalid index specified. Must be greater than or equal to zero."
				Else
						strErrorMessage ="Invalid index specified. Must be greater or equal to zero"
				End If
			'Case : index value is out of range
			ElseIf  intIndex >= objTestObject.GetROProperty("itemscount") Then
				If LCase(strObjectType) = "mobipicker"  Then
						strErrorMessage = "the requested item exceeds the number of items in the list or is negative."
'				ElseIf LCase(strObjectType) = "mobilist" Then
'						strErrorMessage = "Invalid index specified. Must be greater than or equal to zero and less then the final index (" & objTestObject.GetROProperty("itemscount") & ")"
				Else
						strErrorMessage ="Cannot identify the specified item of the object. Confirm that the specified item is included in the object's item collection."
				End If

			Else
				'Case : Valid index value
				If  Lcase(Trim(strExpectedValue))= Lcase(Trim(strItemReturned)) Then
						VerifyGetItemUIPicker = True
						Environment("Pass") = "Value returned as"& Space(2) & strItemReturned & Space(2)  & "at index  :"& intIndex 
				Else
						Environment("Fail") = "Value returned as"& Space(2) & strItemReturned & Space(2)  & "at index  :"& intIndex &Space(2)&"but expected value was :"& strExpectedValue
				End If
			End If 
			Reporter.Filter = rfEnableAll

	Case "withbothparameters" ,"withonlyoneparameter"
		err.clear
			Reporter.Filter = rfDisableAll
			'objTestObject.GetItem( intIndex , intWheelcount)
			strItemReturned = objTestObject.GetItem( intIndex , intWheelcount)
			wait 3
			strItemReturned = objTestObject.GetItem( intIndex , intWheelcount)
			wait 3
			'msgbox strItemReturned
			'Case : valid index and wheelcount
			If intIndex < objTestObject.GetROProperty("itemscount") AND intWheelcount < objTestObject.GetROProperty("wheelcount")  Then
				If  Lcase(Trim(strExpectedValue))= Lcase(Trim(strItemReturned)) Then
						VerifyGetItemUIPicker = True
						Environment("Pass") = "Value returned as"& Space(2) & strItemReturned & Space(2)  & "at index  :"& intIndex &" , "& "Wheelcount  :"& intWheelcount
				Else
						Environment("Fail") = "Value returned as"& Space(2) & strItemReturned & Space(2)  & "at index  :"& intIndex &" , "& "Wheelcount  :"& intWheelcount & Space(2)&"but expected value was :"& strExpectedValue
				End If 
			'Case : blank index and valid wheelcount
			Else
				If intIndex = " " AND  intWheelcount < objTestObject.GetROProperty("wheelcount") Then
						strErrorMessage = "Type mismatch." 

				'Case : valid index and wheelcount either negative or out of range
				ElseIf intIndex  < objTestObject.GetROProperty("itemscount")  AND ( intWheelcount < 0 OR intWheelcount > objTestObject.GetROProperty("wheelcount")) Then
						strErrorMessage = "Invalid picker wheel number assignment"
				End If 
			End If 
	End Select

		If  Len(strErrorMessage) <> 0  Then
		      				
		       If Instr(1, LCase(Replace(Err.Description , " " , "")), LCase(Replace(strErrorMessage , " " , "")) ) > 0 Then
						VerifyGetItemUIPicker = True
						Environment("Pass") = "Error message thrown  :"&chr(34) &Err.Description&chr(34)
				Else
						Environment("Fail") = "Error message thrown  :"&chr(34) &Err.Description&chr(34) &"but Expected message was :"& strErrorMessage
				End If
		End If
	Reporter.Filter = rfEnableAll	

	If  VerifyGetItemUIPicker AND Err.Description = "" Then
        ReportStep  "GetItem" ,  Environment("Description"),Environment("ExpectedResult") , Environment("Pass")   , "Pass"
		Reporter.ReportEvent  micPass  ,  Environment("Description")  ,Environment("Pass")
	Else
		ReportStep "GetItem" , Environment("Description"),Environment("ExpectedResult")  , Environment("Fail") , "Fail"
		Reporter.ReportEvent micFail  ,  Environment("Description")  ,Environment("Fail") &Space(2)&Err.Description
	End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
    	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "GetItem" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0
End Function

 '##########################################################################################################################
'@Function:            VerifySwipePicker
'@Description:            Tests the functionality of Swipe method for the MobiPicker
'@Return Type:            Boolean
'@Created By:            Ananya
'@Created On:            16-02-2017
'@Modified  by :         Ananya
'--------------------------------------------------------------------------------------------------------------------------
'This function is seprately created for MobiPicker
'-------------------------------------------------------------------------------------------------------------------------- 
Function VerifySwipePicker(objTestObject , strDirection ,  strVelocity ,  intStartPercentage  ,  intEndPercentage , objAfterSwipe1 ,objAfterSwipe2, objAfterSwipe3)

	On Error Resume Next
    Environment("TestStepCount")  = Environment("TestStepCount")  + 1
    Reporter.Filter = rfEnableAll
	VerifySwipePicker = False
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", ""
	Environment("MobiObjectClass") = objTestObject.GetTOProperty("micclass")

	

	Reporter.Filter = rfDisableAll
	'Check if all parameters are blank
	If  VarType(strDirection)  = 10 AND VarType(strVelocity) = 10  AND VarType(intStartPercentage)  = 10 AND VarType( intEndPercentage ) = 10 Then
				'Case  - Execute method  without parameters
				objTestObject.Swipe
	Else 
	
				'Assign default values to Start and End percentage if no value is assigned to them
				If VarType(intStartPercentage) = 10 Then
					intStartPercentage = 20
				End If
	
				If VarType(intEndPercentage) = 10 Then
					intEndPercentage = 80
				End If
			
				If  Environment("WheelNumber")  = "" Then
					Environment("WheelNumber") = 0
				End If
			

		

					objTestObject.Swipe strDirection ,strVelocity , intStartPercentage , intEndPercentage , Environment("WheelNumber")
					objTestObject.WaitProperty  "visible" , False , 10000
				
				
	End If 
	
	Reporter.Filter = rfEnableAll

	If  VarType(strDirection)  = 10 AND VarType(strVelocity) = 10  AND VarType(intStartPercentage)  = 10 AND VarType( intEndPercentage ) = 10 Then
		
		If  InStr(1 , LCase(Replace("Invalid number of parameters " , " " ,"")) , LCase(Replace(Err.Description , " " ,""))) > 0  Then
				ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult")  , "Error message thrown as ->" & Err.Description , "Pass"
                Reporter.ReportEvent micPass , Environment("Description")  , "Error message thrown as ->" & Err.Description
				Exit Function
		Else
				ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult")  , "Expected error -> Invalid number of parameters." &Space(2) & "Error thrown  ->"&Err.Description
                Reporter.ReportEvent micFail , Environment("Description")  , "Expected error -> Type mismatch" &Space(2) & "Error thrown  ->"&Err.Description
		End If
	'Verfiy if any of  the parameters Direction , Velocity , StartPercentage , EndPercentage have invalid values
	 ElseIf  CLng(intStartPercentage) <> intStartPercentage OR CLng(intEndPercentage) <>  intEndPercentage OR IsEmpty(strDirection) OR IsEmpty(strVelocity) Then
		If  InStr(1 , LCase(Replace("Type Mismatch." , " " ,"")) , LCase(Replace(Err.Description , " " ,""))) > 0  Then
				VerifySwipePicker = True
				ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult")  , "Error message thrown as ->Type Mismatch " , "Pass"
				 Reporter.ReportEvent micPass , Environment("Description")  ,  "Error message thrown as ->Type Mismatch "
				 Exit Function
		Else
				ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult")  , "Expected error -> Type mismatch" &Space(2) & "Error thrown  ->"&Err.Description
				Reporter.ReportEvent micFail , Environment("Description")  , "Expected error -> Type mismatch" &Space(2) & "Error thrown  ->"&Err.Description
		End If
	'Verify if  Start Percentage or End Percentage have negative values
	ElseIf   intStartPercentage < 0 OR intEndPercentage < 0 Then
		If  InStr(1 , LCase(Replace("Invalid percent specified. Value must be within 0-100 range" , " " ,"")) , LCase(Replace(Err.Description , " " ,""))) > 0  Then
				VerifySwipePicker = True
				ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult")  , "Error message thrown as ->Invalid percent specified. Value must be within 0-100 range" , "Pass"
				Reporter.ReportEvent micPass , Environment("Description")  ,"Error message thrown as ->Invalid percent specified. Value must be within 0-100 range"
				Exit Function
		Else
				ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult")  , "Expected error -> Type mismatch" &Space(2) & "Error thrown  ->"&Err.Description
				Reporter.ReportEvent micFail , Environment("Description")  , "Expected error -> Type mismatch" &Space(2) & "Error thrown  ->"&Err.Description
				Exit Function
		End If

	ElseIf  LCase(objTestObject.GetTOProperty("micclass")) = "mobipicker"  Then
			If Environment("WheelNumber") <  0  Then
				If  InStr(1 , LCase(Replace("Invalid picker wheel number assignment" , " " ,"")) , LCase(Replace(Err.Description , " " ,""))) > 0  Then
				VerifySwipePicker = True
				ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult")  , "Error message thrown as ->Invalid picker wheel number assignment" , "Pass"
				Reporter.ReportEvent micPass , Environment("Description")  ,"Error message thrown as ->Invalid picker wheel number assignment"
				Exit Function
				Else
				ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult")  , "Expected error -> Invalid picker wheel number assignment" &Space(2) & "Error thrown  ->"&Err.Description
				Reporter.ReportEvent micFail , Environment("Description")  , "Expected error -> Invalid picker wheel number assignment " &Space(2) & "Error thrown  ->"&Err.Description
				Exit Function
			End If
End If 
End If 
	 If VarType(strDirection) = 10 Then
					strDirection = "Blank"
				ElseIf strDirection = 1 Then
                                   strDirection = "eUP"
                                ElseIf strDirection = 2 Then
                                   strDirection = "eDOWN"
                                ElseIf strDirection  = 3 Then
                                   strDirection = "eLEFT"
                                ElseIf  strDirection  = 4 Then
                                   strDirection  = "eRIGHT"
                End If
				                            
				
				  If VarType(strVelocity) = 10 Then
							strVelocity = "Blank"
							ElseIf strVelocity  = 0 Then
							strVelocity = "eSLOW"
					ElseIf strVelocity = 1 Then
							strVelocity  = "eMEDIUM"
					ElseIf strVelocity = 2 Then
							strVelocity = "eFAST"					
					End If 

		    wait 5
			If  (objAfterSwipe1.Exist(6) OR objAfterSwipe2.Exist(6) OR objAfterSwipe3.Exist(6) AND Len(Err.DEscription) = 0)  Then
			VerifySwipePicker = True
			ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult") ,  "Working correctly with Direction  : "& strDirection & " , "&"Velocity  :"& strVelocity &",  " &"Start Percentage  : "&  intStartPercentage &", " &  "End Percentage  :" & intEndPercentage , "Pass"
			Reporter.ReportEvent micPass , Environment("Description")  , "Working correctly with Direction  : " & strDirection & " , "&"Velocity  :"& strVelocity &",  " &"Start Percentage  : "&  intStartPercentage &", " &  "End Percentage  :" & intEndPercentage
			Else
			ReportStep "VerifySwipe", Environment("Description") ,Environment("ExpectedResult") ,  "Failed  with Direction  : " & strDirection & " , "&"Velocity  :"& strVelocity &",  " &"Start Percentage  : "&  intStartPercentage &", " &  "End Percentage  :" & intEndPercentage & " " & err.Description , "Fail"
			Reporter.ReportEvent micFail , Environment("Description")  ,  "Failed  with Direction  : " & strDirection & " , "&"Velocity  :"& strVelocity &",  " &"Start Percentage  : "&  intStartPercentage &", " &  "End Percentage  :" & intEndPercentage &Space(2)&Err.Description
'	End If 

End If 


	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "Swipe" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If

	Err.Clear
	On Error GoTo 0
End Function

'##########################################################################################################################
''@Function:		VerifyScale
''@Description:		Verify change in scale on viewer(eg. 25 , 50 , 75 , 100)
''@Return Type:		Boolean
''@Created By:		Shweta & Pradeep
''@Created On:		15-03-2017
''--------------------------------------------------------------------------------------------------------------------------

Function VerifyScale(ObjTestObject,intScale) 

   On Error Resume Next
	Reporter.Filter = rfEnableAll
	Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", "" 
	
	'Setting function's default return value to false
	VerifyScale = False
	strScaleFailedFor = "" 
	
	'Verifying error message on passing blank value/invalid value.
	
If  intScale="" OR TypeName(intScale) = "String" OR TypeName(intScale) = "Double" Then 
	Err.Clear
	Reporter.Filter = rfDisableAll
	ObjTestObject.Scale intScale
	Wait 3
	strErrorMessage = "Type mismatch on ObjectRuntimeDevice"

	If Instr(1,LCase(Replace(strErrorMessage, " ","")),Lcase(Replace(Err.Description," ",""))) > 0 Then
		VerifyScale = True
		Environment("Pass") = "Errow thrown:Type mismatch on ObjectRuntimeDevice"
		Err.Clear
	Else
		Environment("Fail") = "Error thrown :"&Space(2)&chr(34)&Err.Description&chr(34)&"expected was->Type mismatch on ObjectRuntimeDevice"
	End If
	Reporter.Filter = rfEnableAll
	'Verifying error message on passing out of the range value.
ElseIf intScale<25 OR intScale>100 Then
	Err.Clear
	Reporter.Filter = rfDisableAll
	ObjTestObject.Scale intScale
	Wait 3
	strErrorMessage = "Invalid 'percent' argument for Scale. Value must be between 25 and 100."
	
	If Instr(1,LCase(Replace(strErrorMessage, " ","")),Lcase(Replace(Err.Description," ",""))) > 0 Then
		VerifyScale = True
		Environment("Pass") = "Errow thrown:Invalid 'percent' argument for Scale. Value must be between 25 and 100"
		Err.Clear
	Else
		Environment("Fail") = "Error thrown :"&Space(2)&chr(34)&Err.Description&chr(34)&"expected was->Invalid 'percent' argument for Scale. Value must be between 25 and 100"
	End If
	Reporter.Filter = rfEnableAll
Else
	Err.Clear
	ObjTestObject.Scale intScale
	Wait 3
		If Not ObjTestObject.GetROProperty("viewerscale") = intScale Then
				strScaleFailedFor = intScale
		End If
		
		If Err.Description = "" AND strScaleFailedFor = ""  Then
			VerifyScale = True
			Environment("Pass") = "Successfully changed device scale to ->" &intScale
		Else
			Environment("Fail") = "Failed to change device scale for ->" &strScaleFailedFor
			
		End If
End If


 If  VerifyScale AND Err.Description = "" Then
        ReportStep "Scale" , Environment("Description") , Environment("ExpectedResult") , Environment("Pass")  , "Pass"
        Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass")
        
    Else
        ReportStep  "Scale" ,  Environment("Description") , Environment("ExpectedResult") , Environment("Fail") &Space(2)& Err.Description , "Fail"
        Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") &Space(2)& Err.Description 
    End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
    If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "Scale" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Err.Clear
	On Error GoTo 0

End Function

'##########################################################################################################################
''@Function:			VerifyRotate
''@Description:		 Verify screen rotation on Device eg. eLANDSCAPERIGHT, ePORTRAIT, eLANDSCAPELEFT
''@Return Type:		Boolean
''@Created By:		Shweta & Pradeep
''@Created On:		21/03/2017
''--------------------------------------------------------------------------------------------------------------------------
Function VerifyRotate(ObjTestObject, ByVal Orientation)  
On Error Resume Next
   VerifyRotate = False
   
   If  Orientation = 0 Then
	   strOrientation = "ePORTRAIT"
	ElseIf  Orientation = 90 Then
		 strOrientation = "eLANDSCAPELEFT"
	ElseIf  Orientation = 180  Then
		 strOrientation = "eUPSIDEDOWN"
	Else   
		 strOrientation = "eLANDSCAPERIGHT"
	End If

ObjTestObject.Rotate  Orientation
Wait 2
   
 If Typename(Orientation)="String" Then
 	If  LCase(Err.Description) = "type mismatch on objectruntimedevice"  Then
		VerifyRotate = True 
		ReportStep "Rotate" , Environment("Description") , Environment("ExpectedResult")  , "Error message thrown on passing invalid orientation value ->" & Err.Description, "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), "Error message thrown on passing invalid orientation value ->" & Err.Description
	Else
		ReportStep  "Rotate" ,  Environment("Description") , Environment("ExpectedResult") ,"Failed to throw error for invalid orientation value" , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), "Failed to throw error for invalid orientation value" &Space(2)&Err.Description
	End If
	
ElseIf ObjTestObject.GetROProperty("orientation") = Orientation  Then
		VerifyRotate = True
		ReportStep "Rotate" , Environment("Description") , Environment("ExpectedResult")  , "Application Rotated in " & strOrientation &Space(2) & "orientation"  , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), "Application Rotated in " & strOrientation &Space(2) & "orientation"
	Else
		ReportStep  "Rotate" ,  Environment("Description") , Environment("ExpectedResult") , "Failed to  Rotate in " & strOrientation &Space(2) & "orientation"  & Space(2) & Err.Description , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"),  "Failed to  Rotate in " & strOrientation &Space(2) & "orientation"  & Space(2) & Err.Description
	End If


	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "Rotate" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If

	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
	On Error GoTo 0
End Function


'##########################################################################################################################
''@Function:		VerifyBackTrustBrowser
''@Description:		 Verify back functionality on TrustBrowser & preserve history of visited pages
''@Return Type:		Boolean
''@Created By:		Pradeep
''@Created On:		30/03/2017
''--------------------------------------------------------------------------------------------------------------------------

Function VerifyBackTrustBrowser(ObjTest1,ObjTest2,ObjBackButton)
	On Error Resume Next
	Reporter.Filter = rfEnableAll
	Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", "" 
	VerifyBackTrustBrowser = False
	ObjTest1.ScrollIntoView
	wait 2
	ObjTest1.Click
	ObjTest2.WaitProperty "visible","True"
	
	If Not ObjTest2.exist(60) Then
		Exit Function
	End If
	deviceOS = MobiDevice("micClass:=MobiDevice").GetROProperty("platform")
	If Lcase(deviceOS)="iphone os" Then
		ObjBackButton.Click
	Else
		MobiDevice("Web Browser").ButtonPress eBACK
	End If
	If ObjTest1.Exist(60) Then
		VerifyBackTrustBrowser = True
		Environment("Pass")="Back functioanlity for TrustBrowser working & it preserves the history of visited page"
	Else
		Environment("Fail")="Back functioanlity for TrustBrowser is not working"
	End If
	
	If  VerifyCaptureBitmap AND Err.Description = "" Then
		ReportStep "Back Functionality on TrustBrowser" , Environment("Description") , Environment("ExpectedResult") , Environment("Pass")  , "Pass"
		Reporter.ReportEvent micPass, Environment("Description"), Environment("Pass")
	Else
		ReportStep  "Back Functionality on TrustBrowser" ,  Environment("Description") , Environment("ExpectedResult") , Environment("Fail") &Space(2)& Err.Description , "Fail"
		Reporter.ReportEvent micFail, Environment("Description"), Environment("Fail") &Space(2)& Err.Description 
	End If

	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "CaptureBitMap" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
	On Error GoTo 0
End Function


Function SkipChromeSignIn

If MobiDevice("name:=Chrome").MobiCheckbox("text:=Help make Chrome better.*").Exist(5) Then
	MobiDevice("name:=Chrome").MobiCheckbox("text:=Help make Chrome better.*").Set eUNCHECKED
	If MobiDevice("name:=Chrome").MobiButton("text:=ACCEPT & CONTINUE").Exist(5) Then
		MobiDevice("name:=Chrome").MobiButton("text:=ACCEPT & CONTINUE").Click
	End If
End If
If MobiDevice("name:=Chrome").MobiElement("enabled:=True","text:=Update Google Play services").Exist(5) Then
	MobiDevice("name:=Chrome").ButtonPress eBACK
End If
If MobiDevice("name:=Chrome").MobiSwitch("enabled:=True").Exist(5) Then
	MobiDevice("name:=Chrome").MobiSwitch("enabled:=True").Set eDEACTIVATE
	If MobiDevice("name:=Chrome").MobiButton("text:=NEXT").Exist(5) Then
		MobiDevice("name:=Chrome").MobiButton("text:=NEXT").Click
	End If
End If
If MobiDevice("name:=Chrome").MobiButton("text:=SIGN IN").Exist(5) AND MobiDevice("name:=Chrome").MobiButton("text:=NO THANKS").Exist(5) Then
	MobiDevice("name:=Chrome").MobiButton("text:=NO THANKS").Click
End If

End Function

'##########################################################################################################################
''@Function:		VerifyClickDropdown
''@Description:		Veify click on Dropdown's
''@Return Type:		Boolean
''@Created By:		Shweta
''@Created On:		21/11/2017
''--------------------------------------------------------------------------------------------------------------------------

Function VerifyClickDropdown(objTestObject , objToVerify , strCoordsOption)
	On Error Resume Next
	Err.Clear
	Reporter.Filter = rfEnableAll
	Environment("TestStepCount")  = Environment("TestStepCount")  + 1
	Reporter.ReportEvent micDone, Environment("StepName") & " starts", "" 
	VerifyClickDropdown = False
	strTextBefore = MobiDevice("micclass:=MobiDevice").GetVisibleText
	wait 2
	Click objTestObject ,strCoordsOption
	objToVerify.WaitProperty "Visible" , "True" , 5000
	
'Object existence can not be identified on iOS due to a bug for MobiPicker
	If Lcase(MobiDevice("micclass:=MobiDevice").GetROProperty("platform")) = "iphone os" Then
		strTextAfter = MobiDevice("micclass:=MobiDevice").GetVisibleText
	    wait 2
	    If strTextBefore <> strTextAfter Then
	    	VerifyClickDropdown = True
	    End If
	    'Reload the web page
	    OpenURL strURL , objTestObject , 3 
	Else
	   If objToVerify.Exist(5) AND Len(Err.Description) = 0  Then
		VerifyClickDropdown = True			
	   End If
	   'Close opened list or button after verification
	   If objToVerify.GetROProperty("micclass") = "MobiList" AND objToVerify.Exist(3) Then
		objToVerify.Click
		objToVerify.WaitProperty "Visible" , "False" , 5000
	   ElseIf objToVerify.GetROProperty("micclass") = "MobiButton" AND objToVerify.Exist(3) Then
        objToVerify.click 	
        objToVerify.WaitProperty "Visible" , "False" , 5000
	   End If
	End If
	
	If VerifyClickDropdown AND Len(Err.Description) = 0  Then
		ReportStep "Click()" , Environment("Description") , Environment("ExpectedResult") , "Clicked on MobiDropdown"  , "Pass"
	Else
		ReportStep  "Click()" ,  Environment("Description") , Environment("ExpectedResult") , "Click failed on MobiDropdown" &Space(2)& Err.Description , "Fail"
	End If  
	
	If  Environment("TestStepCount")  > Environment("ReportStepCount")  Then
			strStatus = "Not Run"
			ReportStep "Click" , Environment("Description") , Environment("ExpectedResult") , "Not Executed"  , strStatus
	End If
	Reporter.ReportEvent micDone, Environment("StepName") & " ends", ""
	Reporter.Filter = rfDisableAll
	On Error GoTo 0
End Function

'##########################################################################################################################
''@Function:	CloseAndroidKeypad
''@Description: This sub is used  to close the keypad on android devices.
''@Return Type:	 none
''@Created By:	Shweta
''@Created On:	20-Sept-2018
'###########################################################################################################################
Sub CloseAndroidKeypad
'Set Username object
Set objUsernameEdit = MobiEdit("accessibilitylabel:=Username Field")
'Get text value of username edit before clicking Sign In button
strBefore = objUsernameEdit.GetROProperty("text")
MobiButton("accessibilitylabel:=loginButton").Click
Wait 3
'Get text value of username edit after clicking Sign In button
strAfter = objUsernameEdit.GetROProperty("text")
Wait 3
'Compare length of text set before and after clicking Sign In button
If Len(strAfter) > Len(strBefore)  Then
    'Click eBack button if text value before and after differs
    MobiDevice("micClass:=MobiDevice").ButtonPress eBACK
    Wait 3
'Check if Invalid Username/Password dialog appears 
ElseIf MobiButton("name:=OK").Exist Then
     'Click OK button to close dialog box
     MobiButton("name:=OK").Click
     MobiButton("name:=OK").WaitProperty "visible" , "False" , 5000
End If
End Sub



